
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005690  08005690  00015690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08005768  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005768  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfe6  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aea  00000000  00000000  0002d0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c2  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001748c  00000000  00000000  000301da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e44e  00000000  00000000  00047666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000888ba  00000000  00000000  00055ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af4  00000000  00000000  000de370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e1e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005674 	.word	0x08005674

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005674 	.word	0x08005674

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <BMP390_Init>:
 * NOTE ==> if our sensor does soft reset. All params of the sensor are cleared. We have to init our sensor properly again.
 */

#include "bmp390.h"

_Bool BMP390_Init(BMP390_HandleTypeDef *BMP390){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, 10, 1000) != HAL_OK){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69d8      	ldr	r0, [r3, #28]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8b19      	ldrh	r1, [r3, #24]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	220a      	movs	r2, #10
 8000f9a:	f001 ff63 	bl	8002e64 <HAL_I2C_IsDeviceReady>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <BMP390_Init+0x2c>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <BMP390_Init+0x88>)
 8000fac:	f001 fa9c 	bl	80024e8 <HAL_GPIO_WritePin>

	 }

	 BMP390_Get_RawCalibCoeff(BMP390);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8b9 	bl	8001128 <BMP390_Get_RawCalibCoeff>

	 BMP390_Calc_PrcsdCalibrationCoeff(BMP390);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9ba 	bl	8001330 <BMP390_Calc_PrcsdCalibrationCoeff>

	 BMP390_Set_DefaultParams(BMP390);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 faff 	bl	80015c0 <BMP390_Set_DefaultParams>

	 BMP390_Upload_ConfigParams(BMP390);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f826 	bl	8001014 <BMP390_Upload_ConfigParams>


	 if(BMP390->Ref_Alt_Sel == 'm'){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000fce:	2b6d      	cmp	r3, #109	; 0x6d
 8000fd0:	d10d      	bne.n	8000fee <BMP390_Init+0x6a>

		 BMP390->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		 BMP390->FixedAltitude = BMP390_Calc_TemporaryAltitude(BMP390, &BMP390_VertAlt);
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <BMP390_Init+0x8c>)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fcca 	bl	8001978 <BMP390_Calc_TemporaryAltitude>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000fec:	e009      	b.n	8001002 <BMP390_Init+0x7e>

	 }
	 else if(BMP390->Ref_Alt_Sel == 'M'){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000ff4:	2b4d      	cmp	r3, #77	; 0x4d
 8000ff6:	d104      	bne.n	8001002 <BMP390_Init+0x7e>

		 BMP390->FixedAltitude = 0.0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	 }

	 return true;
 8001002:	2301      	movs	r3, #1

}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000
 8001010:	200001cc 	.word	0x200001cc

08001014 <BMP390_Upload_ConfigParams>:

_Bool BMP390_Upload_ConfigParams(BMP390_HandleTypeDef *BMP390){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]

	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	005b      	lsls	r3, r3, #1
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800102a:	b25b      	sxtb	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_press)<<0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	b25b      	sxtb	r3, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2da      	uxtb	r2, r3
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	 BMP390->CONFIG   = ((BMP390->Params.filtercoef)<<1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	 BMP390->ODR 	  = (BMP390->Params.odr);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	785a      	ldrb	r2, [r3, #1]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

     BMP390->OSR 	  = ((BMP390->Params.press_osrs)<<0) |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	b25a      	sxtb	r2, r3
					    ((BMP390->Params.temp_osrs)<<3);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	00db      	lsls	r3, r3, #3
     BMP390->OSR 	  = ((BMP390->Params.press_osrs)<<0) |
 8001066:	b25b      	sxtb	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b25b      	sxtb	r3, r3
 800106c:	b2da      	uxtb	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e


	 BMP390->DeltaData.alt0 = 0.0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	671a      	str	r2, [r3, #112]	; 0x70
	 BMP390->DeltaData.spd0 = 0.0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	 BMP390->DeltaData.acc0 = 0.0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	679a      	str	r2, [r3, #120]	; 0x78
	 BMP390->DeltaData.cnt 	+= 1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88


	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_PWR_CTRL , 1, &BMP390->PWR_CTRL, 1, 1000);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69d8      	ldr	r0, [r3, #28]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8b19      	ldrh	r1, [r3, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	338f      	adds	r3, #143	; 0x8f
 80010aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	2201      	movs	r2, #1
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	221b      	movs	r2, #27
 80010ba:	f001 fb71 	bl	80027a0 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_CONFIG , 1, &BMP390->CONFIG, 1, 1000);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69d8      	ldr	r0, [r3, #28]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8b19      	ldrh	r1, [r3, #24]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	338c      	adds	r3, #140	; 0x8c
 80010ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	2201      	movs	r2, #1
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	221f      	movs	r2, #31
 80010da:	f001 fb61 	bl	80027a0 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_ODR , 1, &BMP390->ODR, 1, 1000);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69d8      	ldr	r0, [r3, #28]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	8b19      	ldrh	r1, [r3, #24]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	338d      	adds	r3, #141	; 0x8d
 80010ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ee:	9202      	str	r2, [sp, #8]
 80010f0:	2201      	movs	r2, #1
 80010f2:	9201      	str	r2, [sp, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	221d      	movs	r2, #29
 80010fa:	f001 fb51 	bl	80027a0 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_OSR , 1, &BMP390->OSR, 1, 1000);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69d8      	ldr	r0, [r3, #28]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	8b19      	ldrh	r1, [r3, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	338e      	adds	r3, #142	; 0x8e
 800110a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110e:	9202      	str	r2, [sp, #8]
 8001110:	2201      	movs	r2, #1
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	221c      	movs	r2, #28
 800111a:	f001 fb41 	bl	80027a0 <HAL_I2C_Mem_Write>

	 return true;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <BMP390_Get_RawCalibCoeff>:

_Bool BMP390_Get_RawCalibCoeff(BMP390_HandleTypeDef *BMP390){
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af04      	add	r7, sp, #16
 800112e:	6078      	str	r0, [r7, #4]

	uint8_t BMP390_CalibCoeff[21];
	uint8_t cnt = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_CalibCoeff, 1, &BMP390_CalibCoeff[0], 21, 1000);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69d8      	ldr	r0, [r3, #28]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8b19      	ldrh	r1, [r3, #24]
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2315      	movs	r3, #21
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2231      	movs	r2, #49	; 0x31
 8001150:	f001 fc20 	bl	8002994 <HAL_I2C_Mem_Read>

	BMP390->Raw_NVM.T1  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	3320      	adds	r3, #32
 8001158:	443b      	add	r3, r7
 800115a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800115e:	b21a      	sxth	r2, r3
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	3301      	adds	r3, #1
 8001164:	3320      	adds	r3, #32
 8001166:	443b      	add	r3, r7
 8001168:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	841a      	strh	r2, [r3, #32]
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	3302      	adds	r3, #2
 800117e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T2  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	3320      	adds	r3, #32
 8001184:	443b      	add	r3, r7
 8001186:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800118a:	b21a      	sxth	r2, r3
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	3301      	adds	r3, #1
 8001190:	3320      	adds	r3, #32
 8001192:	443b      	add	r3, r7
 8001194:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	845a      	strh	r2, [r3, #34]	; 0x22
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	3302      	adds	r3, #2
 80011aa:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	3320      	adds	r3, #32
 80011b0:	443b      	add	r3, r7
 80011b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	3301      	adds	r3, #1
 80011c2:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P1  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	3320      	adds	r3, #32
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	3301      	adds	r3, #1
 80011d4:	3320      	adds	r3, #32
 80011d6:	443b      	add	r3, r7
 80011d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	84da      	strh	r2, [r3, #38]	; 0x26
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	3302      	adds	r3, #2
 80011ec:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P2  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	3320      	adds	r3, #32
 80011f2:	443b      	add	r3, r7
 80011f4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	3301      	adds	r3, #1
 80011fe:	3320      	adds	r3, #32
 8001200:	443b      	add	r3, r7
 8001202:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	851a      	strh	r2, [r3, #40]	; 0x28
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	3302      	adds	r3, #2
 8001216:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3320      	adds	r3, #32
 800121c:	443b      	add	r3, r7
 800121e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001222:	b25a      	sxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P4  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	3320      	adds	r3, #32
 8001234:	443b      	add	r3, r7
 8001236:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	3301      	adds	r3, #1
 8001246:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P5  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	3320      	adds	r3, #32
 800124c:	443b      	add	r3, r7
 800124e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001252:	b21a      	sxth	r2, r3
 8001254:	7ffb      	ldrb	r3, [r7, #31]
 8001256:	3301      	adds	r3, #1
 8001258:	3320      	adds	r3, #32
 800125a:	443b      	add	r3, r7
 800125c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	3302      	adds	r3, #2
 8001272:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P6  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	3320      	adds	r3, #32
 8001278:	443b      	add	r3, r7
 800127a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800127e:	b21a      	sxth	r2, r3
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	3301      	adds	r3, #1
 8001284:	3320      	adds	r3, #32
 8001286:	443b      	add	r3, r7
 8001288:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	85da      	strh	r2, [r3, #46]	; 0x2e
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3302      	adds	r3, #2
 800129e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P7  = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	3320      	adds	r3, #32
 80012a4:	443b      	add	r3, r7
 80012a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012aa:	b25a      	sxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	3301      	adds	r3, #1
 80012b6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P8  = (int8_t)((BMP390_CalibCoeff[cnt]));  									 cnt+=1;
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	3320      	adds	r3, #32
 80012bc:	443b      	add	r3, r7
 80012be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	3301      	adds	r3, #1
 80012ce:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P9  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80012d0:	7ffb      	ldrb	r3, [r7, #31]
 80012d2:	3320      	adds	r3, #32
 80012d4:	443b      	add	r3, r7
 80012d6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	3301      	adds	r3, #1
 80012e0:	3320      	adds	r3, #32
 80012e2:	443b      	add	r3, r7
 80012e4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	865a      	strh	r2, [r3, #50]	; 0x32
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
 80012f6:	3302      	adds	r3, #2
 80012f8:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P10 = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	3320      	adds	r3, #32
 80012fe:	443b      	add	r3, r7
 8001300:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001304:	b25a      	sxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	3301      	adds	r3, #1
 8001310:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P11 = (int8_t)((BMP390_CalibCoeff[cnt]));
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	3320      	adds	r3, #32
 8001316:	443b      	add	r3, r7
 8001318:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800131c:	b25a      	sxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	return true;
 8001324:	2301      	movs	r3, #1

}
 8001326:	4618      	mov	r0, r3
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <BMP390_Calc_PrcsdCalibrationCoeff>:

_Bool BMP390_Calc_PrcsdCalibrationCoeff(BMP390_HandleTypeDef *BMP390){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	BMP390->Prcsd_NVM.T1 = (BMP390->Raw_NVM.T1 / pow(2,-8));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	8c1b      	ldrh	r3, [r3, #32]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f859 	bl	80003f4 <__aeabi_i2d>
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b93      	ldr	r3, [pc, #588]	; (8001594 <BMP390_Calc_PrcsdCalibrationCoeff+0x264>)
 8001348:	f7ff f9e8 	bl	800071c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb68 	bl	8000a28 <__aeabi_d2f>
 8001358:	4602      	mov	r2, r0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
	BMP390->Prcsd_NVM.T2 = (BMP390->Raw_NVM.T2 / pow(2,30));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f846 	bl	80003f4 <__aeabi_i2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b8a      	ldr	r3, [pc, #552]	; (8001598 <BMP390_Calc_PrcsdCalibrationCoeff+0x268>)
 800136e:	f7ff f9d5 	bl	800071c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fb55 	bl	8000a28 <__aeabi_d2f>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
	BMP390->Prcsd_NVM.T3 = (BMP390->Raw_NVM.T3 / pow(2,48));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f832 	bl	80003f4 <__aeabi_i2d>
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001396:	f7ff f9c1 	bl	800071c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb41 	bl	8000a28 <__aeabi_d2f>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
	BMP390->Prcsd_NVM.P1 = ((BMP390->Raw_NVM.P1 - pow(2,14)) / pow(2,20));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f81e 	bl	80003f4 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013be:	f7fe fecb 	bl	8000158 <__aeabi_dsub>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x274>)
 80013d0:	f7ff f9a4 	bl	800071c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb24 	bl	8000a28 <__aeabi_d2f>
 80013e0:	4602      	mov	r2, r0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
	BMP390->Prcsd_NVM.P2 = ((BMP390->Raw_NVM.P2 - pow(2,14)) / pow(2,29));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f801 	bl	80003f4 <__aeabi_i2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013f8:	f7fe feae 	bl	8000158 <__aeabi_dsub>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <BMP390_Calc_PrcsdCalibrationCoeff+0x278>)
 800140a:	f7ff f987 	bl	800071c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb07 	bl	8000a28 <__aeabi_d2f>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	649a      	str	r2, [r3, #72]	; 0x48
	BMP390->Prcsd_NVM.P3 = (BMP390->Raw_NVM.P3 / pow(2,32));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe ffe4 	bl	80003f4 <__aeabi_i2d>
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <BMP390_Calc_PrcsdCalibrationCoeff+0x27c>)
 8001432:	f7ff f973 	bl	800071c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff faf3 	bl	8000a28 <__aeabi_d2f>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	64da      	str	r2, [r3, #76]	; 0x4c
	BMP390->Prcsd_NVM.P4 = (BMP390->Raw_NVM.P4 / pow(2,37));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f993 302b 	ldrsb.w	r3, [r3, #43]	; 0x2b
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ffd0 	bl	80003f4 <__aeabi_i2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <BMP390_Calc_PrcsdCalibrationCoeff+0x280>)
 800145a:	f7ff f95f 	bl	800071c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fadf 	bl	8000a28 <__aeabi_d2f>
 800146a:	4602      	mov	r2, r0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	651a      	str	r2, [r3, #80]	; 0x50
	BMP390->Prcsd_NVM.P5 = (BMP390->Raw_NVM.P5 / pow(2,-3));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffbd 	bl	80003f4 <__aeabi_i2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001482:	f7ff f94b 	bl	800071c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff facb 	bl	8000a28 <__aeabi_d2f>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
	BMP390->Prcsd_NVM.P6 = (BMP390->Raw_NVM.P6 / pow(2,6));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffa9 	bl	80003f4 <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <BMP390_Calc_PrcsdCalibrationCoeff+0x284>)
 80014a8:	f7ff f938 	bl	800071c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fab8 	bl	8000a28 <__aeabi_d2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58
	BMP390->Prcsd_NVM.P7 = (BMP390->Raw_NVM.P7 / pow(2,8));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ff95 	bl	80003f4 <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <BMP390_Calc_PrcsdCalibrationCoeff+0x288>)
 80014d0:	f7ff f924 	bl	800071c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff faa4 	bl	8000a28 <__aeabi_d2f>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
	BMP390->Prcsd_NVM.P8 = (BMP390->Raw_NVM.P8 / pow(2,15));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff81 	bl	80003f4 <__aeabi_i2d>
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <BMP390_Calc_PrcsdCalibrationCoeff+0x28c>)
 80014f8:	f7ff f910 	bl	800071c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fa90 	bl	8000a28 <__aeabi_d2f>
 8001508:	4602      	mov	r2, r0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	661a      	str	r2, [r3, #96]	; 0x60
	BMP390->Prcsd_NVM.P9 = (BMP390->Raw_NVM.P9 / pow(2,48));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff6d 	bl	80003f4 <__aeabi_i2d>
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001520:	f7ff f8fc 	bl	800071c <__aeabi_ddiv>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fa7c 	bl	8000a28 <__aeabi_d2f>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	665a      	str	r2, [r3, #100]	; 0x64
	BMP390->Prcsd_NVM.P10 = (BMP390->Raw_NVM.P10 / pow(2,48));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff59 	bl	80003f4 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001548:	f7ff f8e8 	bl	800071c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa68 	bl	8000a28 <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	669a      	str	r2, [r3, #104]	; 0x68
	BMP390->Prcsd_NVM.P11 = (BMP390->Raw_NVM.P11 / pow(2,65));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff45 	bl	80003f4 <__aeabi_i2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8001572:	f7ff f8d3 	bl	800071c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fa53 	bl	8000a28 <__aeabi_d2f>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	66da      	str	r2, [r3, #108]	; 0x6c

	return true;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	3f700000 	.word	0x3f700000
 8001598:	41d00000 	.word	0x41d00000
 800159c:	42f00000 	.word	0x42f00000
 80015a0:	40d00000 	.word	0x40d00000
 80015a4:	41300000 	.word	0x41300000
 80015a8:	41c00000 	.word	0x41c00000
 80015ac:	41f00000 	.word	0x41f00000
 80015b0:	42400000 	.word	0x42400000
 80015b4:	40500000 	.word	0x40500000
 80015b8:	40700000 	.word	0x40700000
 80015bc:	40e00000 	.word	0x40e00000

080015c0 <BMP390_Set_DefaultParams>:

_Bool BMP390_Set_DefaultParams(BMP390_HandleTypeDef *BMP390){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	BMP390->Params.mode = BMP390_Mode_Normal;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
	BMP390->Params.stat_meas_press = Enable;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	715a      	strb	r2, [r3, #5]
	BMP390->Params.stat_meas_temp = Enable;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	719a      	strb	r2, [r3, #6]
	BMP390->Params.press_osrs = BMP390_Oversampling_X8 ;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	70da      	strb	r2, [r3, #3]
	BMP390->Params.temp_osrs= BMP390_Oversampling_X2 ;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	711a      	strb	r2, [r3, #4]
	BMP390->Params.filtercoef = BMP390_Filter_Coef_3;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	709a      	strb	r2, [r3, #2]
	BMP390->Params.odr = BMP390_ODR_50;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	705a      	strb	r2, [r3, #1]

	return true;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <BMP390_Get_SensorValues>:


_Bool BMP390_Get_SensorValues(BMP390_HandleTypeDef *BMP390, float *BMP390_Press,
							 float *BMP390_Temp,float *BMP390_VertAlt,
							 float *BMP390_VertAcc, float *BMP390_VertSpd,
							 float *BMP390_gForce){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08c      	sub	sp, #48	; 0x30
 8001602:	af04      	add	r7, sp, #16
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]

	uint32_t rawPress;
	uint32_t rawTemp;
	uint8_t MSB_LSB_XLSB_PT[6] = {0};
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	82bb      	strh	r3, [r7, #20]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_MSB_LSB_XLSB_PT, 1, &MSB_LSB_XLSB_PT[6], 6, 10000);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	69d8      	ldr	r0, [r3, #28]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8b19      	ldrh	r1, [r3, #24]
 800161c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	2306      	movs	r3, #6
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	3306      	adds	r3, #6
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	2204      	movs	r2, #4
 8001632:	f001 f9af 	bl	8002994 <HAL_I2C_Mem_Read>

	rawPress = ((MSB_LSB_XLSB_PT[2])<<16)  | ((MSB_LSB_XLSB_PT[1])<<8) | ((MSB_LSB_XLSB_PT[0])<<0);
 8001636:	7cbb      	ldrb	r3, [r7, #18]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	7c7b      	ldrb	r3, [r7, #17]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	4313      	orrs	r3, r2
 8001640:	7c3a      	ldrb	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61fb      	str	r3, [r7, #28]
	rawTemp  = ((MSB_LSB_XLSB_PT[5])<<16)  | ((MSB_LSB_XLSB_PT[4])<<8) | ((MSB_LSB_XLSB_PT[3])<<0);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	7d3b      	ldrb	r3, [r7, #20]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4313      	orrs	r3, r2
 8001650:	7cfa      	ldrb	r2, [r7, #19]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]


	*BMP390_Temp  	= BMP390_Calc_PrcsdTemp(BMP390,rawTemp);
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f81e 	bl	800169a <BMP390_Calc_PrcsdTemp>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
	*BMP390_Press 	= BMP390_Calc_PrcsdPress(BMP390,rawPress,BMP390_Temp);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	69f9      	ldr	r1, [r7, #28]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f845 	bl	80016f8 <BMP390_Calc_PrcsdPress>
 800166e:	4602      	mov	r2, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	601a      	str	r2, [r3, #0]
	*BMP390_VertAlt = BMP390_Calc_VertAlt(BMP390, BMP390_Press);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f932 	bl	80018e0 <BMP390_Calc_VertAlt>
 800167c:	4602      	mov	r2, r0
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]

	*BMP390_VertSpd = BMP390_Calc_VertSpd(BMP390, BMP390_VertAlt);
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f9c3 	bl	8001a10 <BMP390_Calc_VertSpd>
 800168a:	4602      	mov	r2, r0
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	601a      	str	r2, [r3, #0]

	//*BMP390_VertAcc = BMP390_Calc_VertAcc();
	//*BMP390_gForce	= BMP390_Calc_gForce();


	return true;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <BMP390_Calc_PrcsdTemp>:


float BMP390_Calc_PrcsdTemp(BMP390_HandleTypeDef *BMP390, uint32_t rawTemp){
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]

	float partial_data1;
	float partial_data2;


	partial_data1 = (float)(rawTemp - BMP390->Prcsd_NVM.T1);
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7ff fac5 	bl	8000c34 <__aeabi_ui2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f7ff fa0c 	bl	8000ad0 <__aeabi_fsub>
 80016b8:	4603      	mov	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]
	partial_data2 = (float)(partial_data1 * BMP390->Prcsd_NVM.T2);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fb0e 	bl	8000ce4 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60bb      	str	r3, [r7, #8]

	return (partial_data2 + (partial_data1 * partial_data1) * BMP390->Prcsd_NVM.T3);
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fb08 	bl	8000ce4 <__aeabi_fmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f7ff fb00 	bl	8000ce4 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f9f3 	bl	8000ad4 <__addsf3>
 80016ee:	4603      	mov	r3, r0

}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <BMP390_Calc_PrcsdPress>:

float BMP390_Calc_PrcsdPress(BMP390_HandleTypeDef *BMP390, uint32_t rawPress, float *BMP390_Temp){
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = BMP390->Prcsd_NVM.P6 * (*(BMP390_Temp));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f7ff fae8 	bl	8000ce4 <__aeabi_fmul>
 8001714:	4603      	mov	r3, r0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P7 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7ff fadc 	bl	8000ce4 <__aeabi_fmul>
 800172c:	4603      	mov	r3, r0
 800172e:	4619      	mov	r1, r3
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fad7 	bl	8000ce4 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P8 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4610      	mov	r0, r2
 800174a:	f7ff facb 	bl	8000ce4 <__aeabi_fmul>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7ff fac3 	bl	8000ce4 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fabe 	bl	8000ce4 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	61fb      	str	r3, [r7, #28]
	partial_out1 =  BMP390->Prcsd_NVM.P5 + partial_data1 + partial_data2 + partial_data3;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f9ae 	bl	8000ad4 <__addsf3>
 8001778:	4603      	mov	r3, r0
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f9a9 	bl	8000ad4 <__addsf3>
 8001782:	4603      	mov	r3, r0
 8001784:	4619      	mov	r1, r3
 8001786:	69f8      	ldr	r0, [r7, #28]
 8001788:	f7ff f9a4 	bl	8000ad4 <__addsf3>
 800178c:	4603      	mov	r3, r0
 800178e:	61bb      	str	r3, [r7, #24]
	partial_data1 = BMP390->Prcsd_NVM.P2 * (*(BMP390_Temp));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f7ff faa2 	bl	8000ce4 <__aeabi_fmul>
 80017a0:	4603      	mov	r3, r0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P3 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f7ff fa96 	bl	8000ce4 <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fa91 	bl	8000ce4 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P4 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f7ff fa85 	bl	8000ce4 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7ff fa7d 	bl	8000ce4 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fa78 	bl	8000ce4 <__aeabi_fmul>
 80017f4:	4603      	mov	r3, r0
 80017f6:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)rawPress * (BMP390->Prcsd_NVM.P1 + partial_data1 + partial_data2 + partial_data3);
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f7ff fa1b 	bl	8000c34 <__aeabi_ui2f>
 80017fe:	4604      	mov	r4, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f964 	bl	8000ad4 <__addsf3>
 800180c:	4603      	mov	r3, r0
 800180e:	6a39      	ldr	r1, [r7, #32]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f95f 	bl	8000ad4 <__addsf3>
 8001816:	4603      	mov	r3, r0
 8001818:	69f9      	ldr	r1, [r7, #28]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f95a 	bl	8000ad4 <__addsf3>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fa5d 	bl	8000ce4 <__aeabi_fmul>
 800182a:	4603      	mov	r3, r0
 800182c:	617b      	str	r3, [r7, #20]
	partial_data1 = (float)rawPress * (float)rawPress;
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f7ff fa00 	bl	8000c34 <__aeabi_ui2f>
 8001834:	4604      	mov	r4, r0
 8001836:	68b8      	ldr	r0, [r7, #8]
 8001838:	f7ff f9fc 	bl	8000c34 <__aeabi_ui2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fa4f 	bl	8000ce4 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P9 + BMP390->Prcsd_NVM.P10 * (*(BMP390_Temp));
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff fa43 	bl	8000ce4 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f936 	bl	8000ad4 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	623b      	str	r3, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001870:	f7ff fa38 	bl	8000ce4 <__aeabi_fmul>
 8001874:	4603      	mov	r3, r0
 8001876:	61fb      	str	r3, [r7, #28]
	partial_data4 = partial_data3 + ((float)rawPress * (float)rawPress * (float)rawPress) * BMP390->Prcsd_NVM.P11;
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f7ff f9db 	bl	8000c34 <__aeabi_ui2f>
 800187e:	4604      	mov	r4, r0
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f7ff f9d7 	bl	8000c34 <__aeabi_ui2f>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fa2a 	bl	8000ce4 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	461c      	mov	r4, r3
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	f7ff f9cd 	bl	8000c34 <__aeabi_ui2f>
 800189a:	4603      	mov	r3, r0
 800189c:	4619      	mov	r1, r3
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff fa20 	bl	8000ce4 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff fa18 	bl	8000ce4 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	69f8      	ldr	r0, [r7, #28]
 80018ba:	f7ff f90b 	bl	8000ad4 <__addsf3>
 80018be:	4603      	mov	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]

	return partial_out1 + partial_out2 + partial_data4;
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	69b8      	ldr	r0, [r7, #24]
 80018c6:	f7ff f905 	bl	8000ad4 <__addsf3>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f900 	bl	8000ad4 <__addsf3>
 80018d4:	4603      	mov	r3, r0

}
 80018d6:	4618      	mov	r0, r3
 80018d8:	372c      	adds	r7, #44	; 0x2c
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}
	...

080018e0 <BMP390_Calc_VertAlt>:


float BMP390_Calc_VertAlt(BMP390_HandleTypeDef *BMP390, float *BMP390_Press){
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]

	return (((SeaLevelTemp / GradientTemp)
			* (1 - pow((*BMP390_Press / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel))))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4920      	ldr	r1, [pc, #128]	; (8001970 <BMP390_Calc_VertAlt+0x90>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff faab 	bl	8000e4c <__aeabi_fdiv>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd8d 	bl	8000418 <__aeabi_f2d>
 80018fe:	a318      	add	r3, pc, #96	; (adr r3, 8001960 <BMP390_Calc_VertAlt+0x80>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f002 ffae 	bl	8004864 <pow>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	4918      	ldr	r1, [pc, #96]	; (8001974 <BMP390_Calc_VertAlt+0x94>)
 8001912:	f7fe fc21 	bl	8000158 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a312      	add	r3, pc, #72	; (adr r3, 8001968 <BMP390_Calc_VertAlt+0x88>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fdd0 	bl	80004c8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
			- (BMP390->FixedAltitude));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd6e 	bl	8000418 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fc08 	bl	8000158 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f86a 	bl	8000a28 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0

}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bdb0      	pop	{r4, r5, r7, pc}
 800195e:	bf00      	nop
 8001960:	a0829b73 	.word	0xa0829b73
 8001964:	3fc85a7a 	.word	0x3fc85a7a
 8001968:	9d89d89d 	.word	0x9d89d89d
 800196c:	40e5a558 	.word	0x40e5a558
 8001970:	47c5e680 	.word	0x47c5e680
 8001974:	3ff00000 	.word	0x3ff00000

08001978 <BMP390_Calc_TemporaryAltitude>:


float BMP390_Calc_TemporaryAltitude(BMP390_HandleTypeDef *BMP390, float *BMP390_VertAlt){
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]

	 float tempAltitude = 0;
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	e025      	b.n	80019da <BMP390_Calc_TemporaryAltitude+0x62>

		 BMP390_Get_SensorValues(BMP390, &BMP390_Press,
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <BMP390_Calc_TemporaryAltitude+0x80>)
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <BMP390_Calc_TemporaryAltitude+0x84>)
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <BMP390_Calc_TemporaryAltitude+0x88>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <BMP390_Calc_TemporaryAltitude+0x8c>)
 800199e:	491a      	ldr	r1, [pc, #104]	; (8001a08 <BMP390_Calc_TemporaryAltitude+0x90>)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fe2c 	bl	80015fe <BMP390_Get_SensorValues>
			  		  	  	  	 &BMP390_Temp, BMP390_VertAlt,
			  					 &BMP390_VertAcc, &BMP390_VertSpd,
			  					 &BMP390_gForce);

		 tempAltitude = (float)(tempAltitude + (float)((*BMP390_VertAlt) * (0.05)));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd34 	bl	8000418 <__aeabi_f2d>
 80019b0:	a30f      	add	r3, pc, #60	; (adr r3, 80019f0 <BMP390_Calc_TemporaryAltitude+0x78>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fd87 	bl	80004c8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f831 	bl	8000a28 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4619      	mov	r1, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff f882 	bl	8000ad4 <__addsf3>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b13      	cmp	r3, #19
 80019de:	ddd6      	ble.n	800198e <BMP390_Calc_TemporaryAltitude+0x16>

	  }
	 HAL_TIM_Base_Start_IT(&htim1);
 80019e0:	480a      	ldr	r0, [pc, #40]	; (8001a0c <BMP390_Calc_TemporaryAltitude+0x94>)
 80019e2:	f002 fb6d 	bl	80040c0 <HAL_TIM_Base_Start_IT>
	 return tempAltitude;
 80019e6:	68fb      	ldr	r3, [r7, #12]

}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	9999999a 	.word	0x9999999a
 80019f4:	3fa99999 	.word	0x3fa99999
 80019f8:	200001d8 	.word	0x200001d8
 80019fc:	200001d4 	.word	0x200001d4
 8001a00:	200001d0 	.word	0x200001d0
 8001a04:	200001c8 	.word	0x200001c8
 8001a08:	200001c4 	.word	0x200001c4
 8001a0c:	200000e0 	.word	0x200000e0

08001a10 <BMP390_Calc_VertSpd>:


//Yükseklik değişimi ile hız hesabı,// V = (X1 - X0)/gerçek 1 saniye hızı verecek
float BMP390_Calc_VertSpd(BMP390_HandleTypeDef *BMP390, float *BMP390_VertAlt){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]

	if(BMP390->DeltaData.cnt == 0){
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10c      	bne.n	8001a3e <BMP390_Calc_VertSpd+0x2e>

		BMP390->DeltaData.alt0 = (*BMP390_VertAlt);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	671a      	str	r2, [r3, #112]	; 0x70
		BMP390->DeltaData.cnt += 1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001a3c:	e01a      	b.n	8001a74 <BMP390_Calc_VertSpd+0x64>

	}
	else if(BMP390->DeltaData.cnt == 1){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d115      	bne.n	8001a74 <BMP390_Calc_VertSpd+0x64>

		BMP390->DeltaData.alt1 = (*BMP390_VertAlt);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	675a      	str	r2, [r3, #116]	; 0x74
		BMP390->DeltaData.cnt -= 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		return ((BMP390->DeltaData.alt1) - (BMP390->DeltaData.alt0));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff f830 	bl	8000ad0 <__aeabi_fsub>
 8001a70:	4603      	mov	r3, r0
 8001a72:	e7ff      	b.n	8001a74 <BMP390_Calc_VertSpd+0x64>

	}

}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a80:	f000 fa46 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a84:	f000 f818 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a88:	f000 f8d2 	bl	8001c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a8c:	f000 f850 	bl	8001b30 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a90:	f000 f87c 	bl	8001b8c <MX_TIM1_Init>

  /**
   * Ref_Alt_Sel is a selection;  For 'm' : it sets the reference altitude to the current location (0 meters)
   * 							  For 'M' : it sets the reference altitude to sea level
   */
  BMP390.BMP390_I2C_ADDRESS = BMP390_I2C_ADDRESS_L;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <main+0x34>)
 8001a96:	2276      	movs	r2, #118	; 0x76
 8001a98:	831a      	strh	r2, [r3, #24]
  BMP390.i2c = &hi2c1;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <main+0x34>)
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <main+0x38>)
 8001a9e:	61da      	str	r2, [r3, #28]
  BMP390.Ref_Alt_Sel = 'm';
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <main+0x34>)
 8001aa2:	226d      	movs	r2, #109	; 0x6d
 8001aa4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  BMP390_Init(&BMP390);
 8001aa8:	4801      	ldr	r0, [pc, #4]	; (8001ab0 <main+0x34>)
 8001aaa:	f7ff fa6b 	bl	8000f84 <BMP390_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <main+0x32>
 8001ab0:	20000128 	.word	0x20000128
 8001ab4:	2000008c 	.word	0x2000008c

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b090      	sub	sp, #64	; 0x40
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	2228      	movs	r2, #40	; 0x28
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fe9a 	bl	8004800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fe9a 	bl	8003828 <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001afa:	f000 f8f1 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afe:	230f      	movs	r3, #15
 8001b00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 f908 	bl	8003d2c <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b22:	f000 f8dd 	bl	8001ce0 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3740      	adds	r7, #64	; 0x40
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <MX_I2C1_Init+0x54>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_I2C1_Init+0x58>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b6e:	f000 fcd3 	bl	8002518 <HAL_I2C_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b78:	f000 f8b2 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000008c 	.word	0x2000008c
 8001b84:	40005400 	.word	0x40005400
 8001b88:	000186a0 	.word	0x000186a0

08001b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001baa:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <MX_TIM1_Init+0xa0>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bb0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd6:	4814      	ldr	r0, [pc, #80]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bd8:	f002 fa22 	bl	8004020 <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001be2:	f000 f87d 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001bf4:	f002 fbb8 	bl	8004368 <HAL_TIM_ConfigClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bfe:	f000 f86f 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_TIM1_Init+0x9c>)
 8001c10:	f002 fd8c 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c1a:	f000 f861 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000e0 	.word	0x200000e0
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c62:	f043 0320 	orr.w	r3, r3, #32
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001caa:	480c      	ldr	r0, [pc, #48]	; (8001cdc <MX_GPIO_Init+0xac>)
 8001cac:	f000 fc1c 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_GPIO_Init+0xac>)
 8001cca:	f000 fa91 	bl	80021f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40011000 	.word	0x40011000

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_I2C_MspInit+0x74>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d125      	bne.n	8001dbc <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480b      	ldr	r0, [pc, #44]	; (8001dcc <HAL_I2C_MspInit+0x7c>)
 8001da0:	f000 fa26 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dae:	61d3      	str	r3, [r2, #28]
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_TIM_Base_MspInit+0x44>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d113      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_TIM_Base_MspInit+0x48>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_TIM_Base_MspInit+0x48>)
 8001de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_TIM_Base_MspInit+0x48>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2019      	movs	r0, #25
 8001e00:	f000 f9bf 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e04:	2019      	movs	r0, #25
 8001e06:	f000 f9d8 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40021000 	.word	0x40021000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <NMI_Handler+0x4>

08001e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <MemManage_Handler+0x4>

08001e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 f89b 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <TIM1_UP_IRQHandler+0x2c>)
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <TIM1_UP_IRQHandler+0x30>)
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <TIM1_UP_IRQHandler+0x34>)
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <TIM1_UP_IRQHandler+0x38>)
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <TIM1_UP_IRQHandler+0x3c>)
 8001e82:	490a      	ldr	r1, [pc, #40]	; (8001eac <TIM1_UP_IRQHandler+0x40>)
 8001e84:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <TIM1_UP_IRQHandler+0x44>)
 8001e86:	f7ff fbba 	bl	80015fe <BMP390_Get_SensorValues>
		  		  	  	  	&BMP390_Temp, &BMP390_VertAlt,
		  				    &BMP390_VertAcc, &BMP390_VertSpd,
		  				    &BMP390_gForce);

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8a:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <TIM1_UP_IRQHandler+0x48>)
 8001e8c:	f002 f964 	bl	8004158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200001d8 	.word	0x200001d8
 8001e9c:	200001d4 	.word	0x200001d4
 8001ea0:	200001d0 	.word	0x200001d0
 8001ea4:	200001cc 	.word	0x200001cc
 8001ea8:	200001c8 	.word	0x200001c8
 8001eac:	200001c4 	.word	0x200001c4
 8001eb0:	20000128 	.word	0x20000128
 8001eb4:	200000e0 	.word	0x200000e0

08001eb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff fff8 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee0:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f002 fc95 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef2:	f7ff fdc3 	bl	8001a7c <main>
  bx lr
 8001ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f00:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8001f04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f08:	20000318 	.word	0x20000318

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x28>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x28>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f923 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fede 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f93b 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f903 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_IncTick+0x1c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_IncTick+0x20>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	200001dc 	.word	0x200001dc

08001fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_GetTick+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	200001dc 	.word	0x200001dc

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <__NVIC_EnableIRQ+0x34>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff90 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff2d 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff42 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff90 	bl	80020c4 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5f 	bl	8002070 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff35 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e161      	b.n	80024c8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002204:	2201      	movs	r2, #1
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8150 	bne.w	80024c2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a97      	ldr	r2, [pc, #604]	; (8002484 <HAL_GPIO_Init+0x294>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800222c:	4a95      	ldr	r2, [pc, #596]	; (8002484 <HAL_GPIO_Init+0x294>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d875      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002232:	4a95      	ldr	r2, [pc, #596]	; (8002488 <HAL_GPIO_Init+0x298>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d058      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002238:	4a93      	ldr	r2, [pc, #588]	; (8002488 <HAL_GPIO_Init+0x298>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d86f      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800223e:	4a93      	ldr	r2, [pc, #588]	; (800248c <HAL_GPIO_Init+0x29c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d052      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002244:	4a91      	ldr	r2, [pc, #580]	; (800248c <HAL_GPIO_Init+0x29c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d869      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800224a:	4a91      	ldr	r2, [pc, #580]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04c      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002250:	4a8f      	ldr	r2, [pc, #572]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d863      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002256:	4a8f      	ldr	r2, [pc, #572]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d046      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800225c:	4a8d      	ldr	r2, [pc, #564]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d85d      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d82a      	bhi.n	80022bc <HAL_GPIO_Init+0xcc>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d859      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_GPIO_Init+0x80>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022d7 	.word	0x080022d7
 800227c:	08002319 	.word	0x08002319
 8002280:	0800231f 	.word	0x0800231f
 8002284:	0800231f 	.word	0x0800231f
 8002288:	0800231f 	.word	0x0800231f
 800228c:	0800231f 	.word	0x0800231f
 8002290:	0800231f 	.word	0x0800231f
 8002294:	0800231f 	.word	0x0800231f
 8002298:	0800231f 	.word	0x0800231f
 800229c:	0800231f 	.word	0x0800231f
 80022a0:	0800231f 	.word	0x0800231f
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	0800231f 	.word	0x0800231f
 80022ac:	0800231f 	.word	0x0800231f
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	4a76      	ldr	r2, [pc, #472]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c2:	e02c      	b.n	800231e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e029      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e024      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e01f      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	330c      	adds	r3, #12
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e01a      	b.n	8002320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2304      	movs	r3, #4
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e013      	b.n	8002320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002300:	2308      	movs	r3, #8
 8002302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	611a      	str	r2, [r3, #16]
          break;
 800230a:	e009      	b.n	8002320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	615a      	str	r2, [r3, #20]
          break;
 8002316:	e003      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x130>
          break;
 800231e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d801      	bhi.n	800232a <HAL_GPIO_Init+0x13a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e001      	b.n	800232e <HAL_GPIO_Init+0x13e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d802      	bhi.n	800233c <HAL_GPIO_Init+0x14c>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x152>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3b08      	subs	r3, #8
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80a9 	beq.w	80024c2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_GPIO_Init+0x2ac>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a49      	ldr	r2, [pc, #292]	; (800249c <HAL_GPIO_Init+0x2ac>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_GPIO_Init+0x2ac>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <HAL_GPIO_Init+0x2b4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00d      	beq.n	80023d0 <HAL_GPIO_Init+0x1e0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <HAL_GPIO_Init+0x1dc>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_GPIO_Init+0x1d8>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e004      	b.n	80023d2 <HAL_GPIO_Init+0x1e2>
 80023c8:	2303      	movs	r3, #3
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x1e2>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_Init+0x1e2>
 80023d0:	2300      	movs	r3, #0
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023e2:	492f      	ldr	r1, [pc, #188]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	492b      	ldr	r1, [pc, #172]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	43db      	mvns	r3, r3
 8002412:	4927      	ldr	r1, [pc, #156]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002414:	4013      	ands	r3, r2
 8002416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4921      	ldr	r1, [pc, #132]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	60cb      	str	r3, [r1, #12]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800243c:	4013      	ands	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4913      	ldr	r1, [pc, #76]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002464:	4013      	ands	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01f      	beq.n	80024b4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	490d      	ldr	r1, [pc, #52]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	e01f      	b.n	80024c2 <HAL_GPIO_Init+0x2d2>
 8002482:	bf00      	nop
 8002484:	10320000 	.word	0x10320000
 8002488:	10310000 	.word	0x10310000
 800248c:	10220000 	.word	0x10220000
 8002490:	10210000 	.word	0x10210000
 8002494:	10120000 	.word	0x10120000
 8002498:	10110000 	.word	0x10110000
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40010c00 	.word	0x40010c00
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_GPIO_Init+0x2f4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_GPIO_Init+0x2f4>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae96 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	; 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e12b      	b.n	8002782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fc06 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800257c:	f001 fd1e 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a81      	ldr	r2, [pc, #516]	; (800278c <HAL_I2C_Init+0x274>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d807      	bhi.n	800259c <HAL_I2C_Init+0x84>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a80      	ldr	r2, [pc, #512]	; (8002790 <HAL_I2C_Init+0x278>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e006      	b.n	80025aa <HAL_I2C_Init+0x92>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a7d      	ldr	r2, [pc, #500]	; (8002794 <HAL_I2C_Init+0x27c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0e7      	b.n	8002782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a78      	ldr	r2, [pc, #480]	; (8002798 <HAL_I2C_Init+0x280>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a6a      	ldr	r2, [pc, #424]	; (800278c <HAL_I2C_Init+0x274>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d802      	bhi.n	80025ec <HAL_I2C_Init+0xd4>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e009      	b.n	8002600 <HAL_I2C_Init+0xe8>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_I2C_Init+0x284>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	3301      	adds	r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	495c      	ldr	r1, [pc, #368]	; (800278c <HAL_I2C_Init+0x274>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d819      	bhi.n	8002654 <HAL_I2C_Init+0x13c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e59      	subs	r1, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fbb1 f3f3 	udiv	r3, r1, r3
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002634:	400b      	ands	r3, r1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_I2C_Init+0x138>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e59      	subs	r1, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	e051      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002650:	2304      	movs	r3, #4
 8002652:	e04f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_I2C_Init+0x168>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e012      	b.n	80026a6 <HAL_I2C_Init+0x18e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Init+0x196>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e022      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10e      	bne.n	80026d4 <HAL_I2C_Init+0x1bc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e58      	subs	r0, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	e00f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	6809      	ldr	r1, [r1, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6911      	ldr	r1, [r2, #16]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	000186a0 	.word	0x000186a0
 8002790:	001e847f 	.word	0x001e847f
 8002794:	003d08ff 	.word	0x003d08ff
 8002798:	431bde83 	.word	0x431bde83
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ba:	f7ff fc01 	bl	8001fc0 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	f040 80d9 	bne.w	8002980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2319      	movs	r3, #25
 80027d4:	2201      	movs	r2, #1
 80027d6:	496d      	ldr	r1, [pc, #436]	; (800298c <HAL_I2C_Mem_Write+0x1ec>)
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fdef 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0cc      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Mem_Write+0x56>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0c5      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d007      	beq.n	800281c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2221      	movs	r2, #33	; 0x21
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_I2C_Mem_Write+0x1f0>)
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285e:	88f8      	ldrh	r0, [r7, #6]
 8002860:	893a      	ldrh	r2, [r7, #8]
 8002862:	8979      	ldrh	r1, [r7, #10]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4603      	mov	r3, r0
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fc26 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d052      	beq.n	8002920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e081      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 feb4 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06b      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_I2C_Mem_Write+0x180>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1aa      	bne.n	800287e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fea7 	bl	8003680 <I2C_WaitOnBTFFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e016      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b2:	f7ff fb05 	bl	8001fc0 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	f040 8244 	bne.w	8002e4e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2319      	movs	r3, #25
 80029cc:	2201      	movs	r2, #1
 80029ce:	4982      	ldr	r1, [pc, #520]	; (8002bd8 <HAL_I2C_Mem_Read+0x244>)
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fcf3 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
 80029de:	e237      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_I2C_Mem_Read+0x5a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e230      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d007      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2222      	movs	r2, #34	; 0x22
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a62      	ldr	r2, [pc, #392]	; (8002bdc <HAL_I2C_Mem_Read+0x248>)
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a56:	88f8      	ldrh	r0, [r7, #6]
 8002a58:	893a      	ldrh	r2, [r7, #8]
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4603      	mov	r3, r0
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fbc0 	bl	80031ec <I2C_RequestMemoryRead>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1ec      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d113      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e1c0      	b.n	8002e28 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d11e      	bne.n	8002aec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002abe:	b672      	cpsid	i
}
 8002ac0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae8:	b662      	cpsie	i
}
 8002aea:	e035      	b.n	8002b58 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11e      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b04:	b672      	cpsid	i
}
 8002b06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b2e:	b662      	cpsie	i
}
 8002b30:	e012      	b.n	8002b58 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b40:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b58:	e166      	b.n	8002e28 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	f200 811f 	bhi.w	8002da2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d123      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fdcd 	bl	8003710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e167      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb2:	e139      	b.n	8002e28 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d152      	bne.n	8002c62 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4906      	ldr	r1, [pc, #24]	; (8002be0 <HAL_I2C_Mem_Read+0x24c>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fbf8 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e13c      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000
 8002be0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c2a:	b662      	cpsie	i
}
 8002c2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c60:	e0e2      	b.n	8002e28 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2200      	movs	r2, #0
 8002c6a:	497b      	ldr	r1, [pc, #492]	; (8002e58 <HAL_I2C_Mem_Read+0x4c4>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fba5 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0e9      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cc2:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_I2C_Mem_Read+0x4c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_I2C_Mem_Read+0x4cc>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0a1a      	lsrs	r2, r3, #8
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00da      	lsls	r2, r3, #3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d118      	bne.n	8002d1a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0a:	b662      	cpsie	i
}
 8002d0c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e09a      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d1d9      	bne.n	8002cdc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d6a:	b662      	cpsie	i
}
 8002d6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002da0:	e042      	b.n	8002e28 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fcb2 	bl	8003710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e04c      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d118      	bne.n	8002e28 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f ae94 	bne.w	8002b5a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010004 	.word	0x00010004
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	14f8b589 	.word	0x14f8b589

08002e64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff f8a4 	bl	8001fc0 <HAL_GetTick>
 8002e78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 8111 	bne.w	80030ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4988      	ldr	r1, [pc, #544]	; (80030b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa90 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e104      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_IsDeviceReady+0x50>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0fd      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d007      	beq.n	8002eda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2224      	movs	r2, #36	; 0x24
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a70      	ldr	r2, [pc, #448]	; (80030bc <HAL_I2C_IsDeviceReady+0x258>)
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa4e 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	d103      	bne.n	8002f3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0b6      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f52:	f7ff f835 	bl	8001fc0 <HAL_GetTick>
 8002f56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f86:	e025      	b.n	8002fd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f88:	f7ff f81a 	bl	8001fc0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <HAL_I2C_IsDeviceReady+0x13a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	22a0      	movs	r2, #160	; 0xa0
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2ba0      	cmp	r3, #160	; 0xa0
 8002fde:	d005      	beq.n	8002fec <HAL_I2C_IsDeviceReady+0x188>
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_I2C_IsDeviceReady+0x188>
 8002fe6:	7dbb      	ldrb	r3, [r7, #22]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0cd      	beq.n	8002f88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d129      	bne.n	8003056 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2319      	movs	r3, #25
 800302e:	2201      	movs	r2, #1
 8003030:	4921      	ldr	r1, [pc, #132]	; (80030b8 <HAL_I2C_IsDeviceReady+0x254>)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f9c2 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e036      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e02c      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800306e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2319      	movs	r3, #25
 8003076:	2201      	movs	r2, #1
 8003078:	490f      	ldr	r1, [pc, #60]	; (80030b8 <HAL_I2C_IsDeviceReady+0x254>)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f99e 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e012      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3301      	adds	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	f4ff af32 	bcc.w	8002efe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000

080030c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f960 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003110:	d103      	bne.n	800311a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e05f      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800312c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <I2C_RequestMemoryWrite+0x128>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f9bb 	bl	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e04c      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6a39      	ldr	r1, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa46 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e02b      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800318c:	893b      	ldrh	r3, [r7, #8]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	e021      	b.n	80031dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b29b      	uxth	r3, r3
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa20 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e005      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003214:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f8c2 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d103      	bne.n	8003256 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0aa      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	4952      	ldr	r1, [pc, #328]	; (80033b8 <I2C_RequestMemoryRead+0x1cc>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f91d 	bl	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e097      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f9a8 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e076      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	893b      	ldrh	r3, [r7, #8]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	e021      	b.n	8003318 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f982 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e050      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330e:	893b      	ldrh	r3, [r7, #8]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f967 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e035      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003352:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f82b 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d103      	bne.n	8003384 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e013      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003388:	897b      	ldrh	r3, [r7, #10]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	4906      	ldr	r1, [pc, #24]	; (80033b8 <I2C_RequestMemoryRead+0x1cc>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f886 	bl	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010002 	.word	0x00010002

080033bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	e048      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d044      	beq.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fdf3 	bl	8001fc0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d139      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10d      	bne.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	e00c      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e023      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10d      	bne.n	8003486 <I2C_WaitOnFlagUntilTimeout+0xca>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	e00c      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	43da      	mvns	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d093      	beq.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034be:	e071      	b.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d123      	bne.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e067      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d041      	beq.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe fd4e 	bl	8001fc0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d136      	bne.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10c      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e00b      	b.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e021      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10c      	bne.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e00b      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af6d 	bne.w	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fc:	e034      	b.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8e3 	bl	80037ca <I2C_IsAcknowledgeFailed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e034      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fcd3 	bl	8001fc0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d016      	beq.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d1c3      	bne.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368c:	e034      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f89b 	bl	80037ca <I2C_IsAcknowledgeFailed>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e034      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d028      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fc8b 	bl	8001fc0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11d      	bne.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d016      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d1c3      	bne.n	800368e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800371c:	e049      	b.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d119      	bne.n	8003760 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0210 	mvn.w	r2, #16
 8003734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e030      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fe fc2e 	bl	8001fc0 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11d      	bne.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d016      	beq.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d1ae      	bne.n	800371e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d11b      	bne.n	800381a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e272      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8087 	beq.w	8003956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003848:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b04      	cmp	r3, #4
 8003852:	d00c      	beq.n	800386e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003854:	4b8f      	ldr	r3, [pc, #572]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d112      	bne.n	8003886 <HAL_RCC_OscConfig+0x5e>
 8003860:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d10b      	bne.n	8003886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d06c      	beq.n	8003954 <HAL_RCC_OscConfig+0x12c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d168      	bne.n	8003954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e24c      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x76>
 8003890:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	e02e      	b.n	80038fc <HAL_RCC_OscConfig+0xd4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x98>
 80038a6:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7a      	ldr	r2, [pc, #488]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b78      	ldr	r3, [pc, #480]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a77      	ldr	r2, [pc, #476]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e01d      	b.n	80038fc <HAL_RCC_OscConfig+0xd4>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0xbc>
 80038ca:	4b72      	ldr	r3, [pc, #456]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a71      	ldr	r2, [pc, #452]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0xd4>
 80038e4:	4b6b      	ldr	r3, [pc, #428]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe fb5c 	bl	8001fc0 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe fb58 	bl	8001fc0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e200      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0xe4>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fb48 	bl	8001fc0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fb44 	bl	8001fc0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1ec      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x10c>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d063      	beq.n	8003a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003962:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d11c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x18c>
 800397a:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d116      	bne.n	80039b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x176>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e1c0      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4939      	ldr	r1, [pc, #228]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	e03a      	b.n	8003a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fafd 	bl	8001fc0 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe faf9 	bl	8001fc0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1a1      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4927      	ldr	r1, [pc, #156]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
 80039fc:	e015      	b.n	8003a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe fadc 	bl	8001fc0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fad8 	bl	8001fc0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e180      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03a      	beq.n	8003aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d019      	beq.n	8003a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <HAL_RCC_OscConfig+0x274>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a44:	f7fe fabc 	bl	8001fc0 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fab8 	bl	8001fc0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e160      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f000 faba 	bl	8003fe4 <RCC_Delay>
 8003a70:	e01c      	b.n	8003aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_OscConfig+0x274>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a78:	f7fe faa2 	bl	8001fc0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7e:	e00f      	b.n	8003aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fe fa9e 	bl	8001fc0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d908      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e146      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	42420000 	.word	0x42420000
 8003a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	4b92      	ldr	r3, [pc, #584]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e9      	bne.n	8003a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a6 	beq.w	8003c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abe:	4b8b      	ldr	r3, [pc, #556]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	4b88      	ldr	r3, [pc, #544]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4a87      	ldr	r2, [pc, #540]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	61d3      	str	r3, [r2, #28]
 8003ad6:	4b85      	ldr	r3, [pc, #532]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_RCC_OscConfig+0x4c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d118      	bne.n	8003b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	4b7f      	ldr	r3, [pc, #508]	; (8003cf0 <HAL_RCC_OscConfig+0x4c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7e      	ldr	r2, [pc, #504]	; (8003cf0 <HAL_RCC_OscConfig+0x4c8>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afe:	f7fe fa5f 	bl	8001fc0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fe fa5b 	bl	8001fc0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	; 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e103      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <HAL_RCC_OscConfig+0x4c8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x312>
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4a6e      	ldr	r2, [pc, #440]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6213      	str	r3, [r2, #32]
 8003b38:	e02d      	b.n	8003b96 <HAL_RCC_OscConfig+0x36e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x334>
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a69      	ldr	r2, [pc, #420]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a66      	ldr	r2, [pc, #408]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	e01c      	b.n	8003b96 <HAL_RCC_OscConfig+0x36e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	d10c      	bne.n	8003b7e <HAL_RCC_OscConfig+0x356>
 8003b64:	4b61      	ldr	r3, [pc, #388]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a60      	ldr	r2, [pc, #384]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4a5d      	ldr	r2, [pc, #372]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6213      	str	r3, [r2, #32]
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCC_OscConfig+0x36e>
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a5a      	ldr	r2, [pc, #360]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6213      	str	r3, [r2, #32]
 8003b8a:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a57      	ldr	r2, [pc, #348]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d015      	beq.n	8003bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe fa0f 	bl	8001fc0 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fa0b 	bl	8001fc0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e0b1      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ee      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x37e>
 8003bc8:	e014      	b.n	8003bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe f9f9 	bl	8001fc0 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe f9f5 	bl	8001fc0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e09b      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	4b40      	ldr	r3, [pc, #256]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8087 	beq.w	8003d1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d061      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d146      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <HAL_RCC_OscConfig+0x4cc>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fe f9c9 	bl	8001fc0 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fe f9c5 	bl	8001fc0 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e06d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d108      	bne.n	8003c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a19      	ldr	r1, [r3, #32]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	491b      	ldr	r1, [pc, #108]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x4cc>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe f999 	bl	8001fc0 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fe f995 	bl	8001fc0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x46a>
 8003cb0:	e035      	b.n	8003d1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCC_OscConfig+0x4cc>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f982 	bl	8001fc0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe f97e 	bl	8001fc0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e026      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x498>
 8003cde:	e01e      	b.n	8003d1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e019      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_OscConfig+0x500>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000

08003d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0d0      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d910      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	4965      	ldr	r1, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d040      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e073      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06b      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4936      	ldr	r1, [pc, #216]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7fe f8d0 	bl	8001fc0 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e24:	f7fe f8cc 	bl	8001fc0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e053      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1eb      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d210      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	4922      	ldr	r1, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f82e 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08005690 	.word	0x08005690
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x30>
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x36>
 8003f2e:	e027      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f32:	613b      	str	r3, [r7, #16]
      break;
 8003f34:	e027      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f40:	5cd3      	ldrb	r3, [r2, r3]
 8003f42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0c5b      	lsrs	r3, r3, #17
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a0d      	ldr	r2, [pc, #52]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f62:	fb03 f202 	mul.w	r2, r3, r2
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e004      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f82:	613b      	str	r3, [r7, #16]
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	693b      	ldr	r3, [r7, #16]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	007a1200 	.word	0x007a1200
 8003f9c:	080056a8 	.word	0x080056a8
 8003fa0:	080056b8 	.word	0x080056b8
 8003fa4:	003d0900 	.word	0x003d0900

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b02      	ldr	r3, [pc, #8]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	20000000 	.word	0x20000000

08003fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc0:	f7ff fff2 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	080056a0 	.word	0x080056a0

08003fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <RCC_Delay+0x34>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <RCC_Delay+0x38>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0a5b      	lsrs	r3, r3, #9
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004000:	bf00      	nop
  }
  while (Delay --);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	60fa      	str	r2, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <RCC_Delay+0x1c>
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	20000000 	.word	0x20000000
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fec2 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fa76 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e035      	b.n	8004144 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a16      	ldr	r2, [pc, #88]	; (8004150 <HAL_TIM_Base_Start_IT+0x90>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIM_Base_Start_IT+0x4e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d004      	beq.n	800410e <HAL_TIM_Base_Start_IT+0x4e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <HAL_TIM_Base_Start_IT+0x94>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d111      	bne.n	8004132 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b06      	cmp	r3, #6
 800411e:	d010      	beq.n	8004142 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	e007      	b.n	8004142 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400

08004158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b02      	cmp	r3, #2
 800416c:	d122      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d11b      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0202 	mvn.w	r2, #2
 8004184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9bd 	bl	800451a <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9b0 	bl	8004508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9bf 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0204 	mvn.w	r2, #4
 80041d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f993 	bl	800451a <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f986 	bl	8004508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f995 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b08      	cmp	r3, #8
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0208 	mvn.w	r2, #8
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2204      	movs	r2, #4
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f969 	bl	800451a <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f95c 	bl	8004508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f96b 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b10      	cmp	r3, #16
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0210 	mvn.w	r2, #16
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2208      	movs	r2, #8
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f93f 	bl	800451a <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f932 	bl	8004508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f941 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0201 	mvn.w	r2, #1
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f90d 	bl	80044f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa73 	bl	80047ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f905 	bl	800453e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b20      	cmp	r3, #32
 800434e:	d107      	bne.n	8004360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0220 	mvn.w	r2, #32
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa3e 	bl	80047dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIM_ConfigClockSource+0x1c>
 8004380:	2302      	movs	r3, #2
 8004382:	e0b4      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x186>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043bc:	d03e      	beq.n	800443c <HAL_TIM_ConfigClockSource+0xd4>
 80043be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c2:	f200 8087 	bhi.w	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	f000 8086 	beq.w	80044da <HAL_TIM_ConfigClockSource+0x172>
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d2:	d87f      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d01a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xa6>
 80043d8:	2b70      	cmp	r3, #112	; 0x70
 80043da:	d87b      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b60      	cmp	r3, #96	; 0x60
 80043de:	d050      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x11a>
 80043e0:	2b60      	cmp	r3, #96	; 0x60
 80043e2:	d877      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d03c      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xfa>
 80043e8:	2b50      	cmp	r3, #80	; 0x50
 80043ea:	d873      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d058      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x13a>
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d86f      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b30      	cmp	r3, #48	; 0x30
 80043f6:	d064      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d86b      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d060      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d867      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d05c      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d05a      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 800440c:	e062      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800441e:	f000 f966 	bl	80046ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	609a      	str	r2, [r3, #8]
      break;
 800443a:	e04f      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	f000 f94f 	bl	80046ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445e:	609a      	str	r2, [r3, #8]
      break;
 8004460:	e03c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	461a      	mov	r2, r3
 8004470:	f000 f8c6 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2150      	movs	r1, #80	; 0x50
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f91d 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 8004480:	e02c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800448e:	461a      	mov	r2, r3
 8004490:	f000 f8e4 	bl	800465c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2160      	movs	r1, #96	; 0x60
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f90d 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044a0:	e01c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 f8a6 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f8fd 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f000 f8f4 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044d2:	e003      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <TIM_Base_SetConfig+0xa8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x28>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x28>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <TIM_Base_SetConfig+0xac>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <TIM_Base_SetConfig+0xa8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_Base_SetConfig+0x52>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0x52>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a17      	ldr	r2, [pc, #92]	; (80045fc <TIM_Base_SetConfig+0xac>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <TIM_Base_SetConfig+0xa8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400

08004600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 030a 	bic.w	r3, r3, #10
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	031b      	lsls	r3, r3, #12
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f043 0307 	orr.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	021a      	lsls	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	431a      	orrs	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004740:	2302      	movs	r3, #2
 8004742:	e041      	b.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d004      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10c      	bne.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400

080047dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <memset>:
 8004800:	4603      	mov	r3, r0
 8004802:	4402      	add	r2, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	d100      	bne.n	800480a <memset+0xa>
 8004808:	4770      	bx	lr
 800480a:	f803 1b01 	strb.w	r1, [r3], #1
 800480e:	e7f9      	b.n	8004804 <memset+0x4>

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000058 	.word	0x20000058

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	2600      	movs	r6, #0
 8004820:	4d0c      	ldr	r5, [pc, #48]	; (8004854 <__libc_init_array+0x38>)
 8004822:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	f000 ff22 	bl	8005674 <_init>
 8004830:	2600      	movs	r6, #0
 8004832:	4d0a      	ldr	r5, [pc, #40]	; (800485c <__libc_init_array+0x40>)
 8004834:	4c0a      	ldr	r4, [pc, #40]	; (8004860 <__libc_init_array+0x44>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	080056f0 	.word	0x080056f0
 8004858:	080056f0 	.word	0x080056f0
 800485c:	080056f0 	.word	0x080056f0
 8004860:	080056f4 	.word	0x080056f4

08004864 <pow>:
 8004864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004868:	4614      	mov	r4, r2
 800486a:	461d      	mov	r5, r3
 800486c:	4680      	mov	r8, r0
 800486e:	4689      	mov	r9, r1
 8004870:	f000 f866 	bl	8004940 <__ieee754_pow>
 8004874:	4622      	mov	r2, r4
 8004876:	4606      	mov	r6, r0
 8004878:	460f      	mov	r7, r1
 800487a:	462b      	mov	r3, r5
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fc f8bc 	bl	80009fc <__aeabi_dcmpun>
 8004884:	bbc8      	cbnz	r0, 80048fa <pow+0x96>
 8004886:	2200      	movs	r2, #0
 8004888:	2300      	movs	r3, #0
 800488a:	4640      	mov	r0, r8
 800488c:	4649      	mov	r1, r9
 800488e:	f7fc f883 	bl	8000998 <__aeabi_dcmpeq>
 8004892:	b1b8      	cbz	r0, 80048c4 <pow+0x60>
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	4620      	mov	r0, r4
 800489a:	4629      	mov	r1, r5
 800489c:	f7fc f87c 	bl	8000998 <__aeabi_dcmpeq>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d141      	bne.n	8004928 <pow+0xc4>
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f000 f844 	bl	8004934 <finite>
 80048ac:	b328      	cbz	r0, 80048fa <pow+0x96>
 80048ae:	2200      	movs	r2, #0
 80048b0:	2300      	movs	r3, #0
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fc f879 	bl	80009ac <__aeabi_dcmplt>
 80048ba:	b1f0      	cbz	r0, 80048fa <pow+0x96>
 80048bc:	f7ff ffa8 	bl	8004810 <__errno>
 80048c0:	2322      	movs	r3, #34	; 0x22
 80048c2:	e019      	b.n	80048f8 <pow+0x94>
 80048c4:	4630      	mov	r0, r6
 80048c6:	4639      	mov	r1, r7
 80048c8:	f000 f834 	bl	8004934 <finite>
 80048cc:	b9c8      	cbnz	r0, 8004902 <pow+0x9e>
 80048ce:	4640      	mov	r0, r8
 80048d0:	4649      	mov	r1, r9
 80048d2:	f000 f82f 	bl	8004934 <finite>
 80048d6:	b1a0      	cbz	r0, 8004902 <pow+0x9e>
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f000 f82a 	bl	8004934 <finite>
 80048e0:	b178      	cbz	r0, 8004902 <pow+0x9e>
 80048e2:	4632      	mov	r2, r6
 80048e4:	463b      	mov	r3, r7
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fc f887 	bl	80009fc <__aeabi_dcmpun>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d0e4      	beq.n	80048bc <pow+0x58>
 80048f2:	f7ff ff8d 	bl	8004810 <__errno>
 80048f6:	2321      	movs	r3, #33	; 0x21
 80048f8:	6003      	str	r3, [r0, #0]
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004902:	2200      	movs	r2, #0
 8004904:	2300      	movs	r3, #0
 8004906:	4630      	mov	r0, r6
 8004908:	4639      	mov	r1, r7
 800490a:	f7fc f845 	bl	8000998 <__aeabi_dcmpeq>
 800490e:	2800      	cmp	r0, #0
 8004910:	d0f3      	beq.n	80048fa <pow+0x96>
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f000 f80d 	bl	8004934 <finite>
 800491a:	2800      	cmp	r0, #0
 800491c:	d0ed      	beq.n	80048fa <pow+0x96>
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f000 f807 	bl	8004934 <finite>
 8004926:	e7c8      	b.n	80048ba <pow+0x56>
 8004928:	2600      	movs	r6, #0
 800492a:	4f01      	ldr	r7, [pc, #4]	; (8004930 <pow+0xcc>)
 800492c:	e7e5      	b.n	80048fa <pow+0x96>
 800492e:	bf00      	nop
 8004930:	3ff00000 	.word	0x3ff00000

08004934 <finite>:
 8004934:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004938:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800493c:	0fc0      	lsrs	r0, r0, #31
 800493e:	4770      	bx	lr

08004940 <__ieee754_pow>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	b093      	sub	sp, #76	; 0x4c
 8004946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800494a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800494e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004952:	4689      	mov	r9, r1
 8004954:	ea56 0102 	orrs.w	r1, r6, r2
 8004958:	4680      	mov	r8, r0
 800495a:	d111      	bne.n	8004980 <__ieee754_pow+0x40>
 800495c:	1803      	adds	r3, r0, r0
 800495e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004962:	4152      	adcs	r2, r2
 8004964:	4299      	cmp	r1, r3
 8004966:	4b82      	ldr	r3, [pc, #520]	; (8004b70 <__ieee754_pow+0x230>)
 8004968:	4193      	sbcs	r3, r2
 800496a:	f080 84ba 	bcs.w	80052e2 <__ieee754_pow+0x9a2>
 800496e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f7fb fbf1 	bl	800015c <__adddf3>
 800497a:	4683      	mov	fp, r0
 800497c:	468c      	mov	ip, r1
 800497e:	e06f      	b.n	8004a60 <__ieee754_pow+0x120>
 8004980:	4b7c      	ldr	r3, [pc, #496]	; (8004b74 <__ieee754_pow+0x234>)
 8004982:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004986:	429c      	cmp	r4, r3
 8004988:	464d      	mov	r5, r9
 800498a:	4682      	mov	sl, r0
 800498c:	dc06      	bgt.n	800499c <__ieee754_pow+0x5c>
 800498e:	d101      	bne.n	8004994 <__ieee754_pow+0x54>
 8004990:	2800      	cmp	r0, #0
 8004992:	d1ec      	bne.n	800496e <__ieee754_pow+0x2e>
 8004994:	429e      	cmp	r6, r3
 8004996:	dc01      	bgt.n	800499c <__ieee754_pow+0x5c>
 8004998:	d10f      	bne.n	80049ba <__ieee754_pow+0x7a>
 800499a:	b172      	cbz	r2, 80049ba <__ieee754_pow+0x7a>
 800499c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80049a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80049a4:	ea55 050a 	orrs.w	r5, r5, sl
 80049a8:	d1e1      	bne.n	800496e <__ieee754_pow+0x2e>
 80049aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80049ae:	18db      	adds	r3, r3, r3
 80049b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80049b4:	4152      	adcs	r2, r2
 80049b6:	429d      	cmp	r5, r3
 80049b8:	e7d5      	b.n	8004966 <__ieee754_pow+0x26>
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	da39      	bge.n	8004a32 <__ieee754_pow+0xf2>
 80049be:	4b6e      	ldr	r3, [pc, #440]	; (8004b78 <__ieee754_pow+0x238>)
 80049c0:	429e      	cmp	r6, r3
 80049c2:	dc52      	bgt.n	8004a6a <__ieee754_pow+0x12a>
 80049c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80049c8:	429e      	cmp	r6, r3
 80049ca:	f340 849d 	ble.w	8005308 <__ieee754_pow+0x9c8>
 80049ce:	1533      	asrs	r3, r6, #20
 80049d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80049d4:	2b14      	cmp	r3, #20
 80049d6:	dd0f      	ble.n	80049f8 <__ieee754_pow+0xb8>
 80049d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80049dc:	fa22 f103 	lsr.w	r1, r2, r3
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	4293      	cmp	r3, r2
 80049e6:	f040 848f 	bne.w	8005308 <__ieee754_pow+0x9c8>
 80049ea:	f001 0101 	and.w	r1, r1, #1
 80049ee:	f1c1 0302 	rsb	r3, r1, #2
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	b182      	cbz	r2, 8004a18 <__ieee754_pow+0xd8>
 80049f6:	e05d      	b.n	8004ab4 <__ieee754_pow+0x174>
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d159      	bne.n	8004ab0 <__ieee754_pow+0x170>
 80049fc:	f1c3 0314 	rsb	r3, r3, #20
 8004a00:	fa46 f103 	asr.w	r1, r6, r3
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	42b3      	cmp	r3, r6
 8004a0a:	f040 847a 	bne.w	8005302 <__ieee754_pow+0x9c2>
 8004a0e:	f001 0101 	and.w	r1, r1, #1
 8004a12:	f1c1 0302 	rsb	r3, r1, #2
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4b58      	ldr	r3, [pc, #352]	; (8004b7c <__ieee754_pow+0x23c>)
 8004a1a:	429e      	cmp	r6, r3
 8004a1c:	d132      	bne.n	8004a84 <__ieee754_pow+0x144>
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	f280 846b 	bge.w	80052fa <__ieee754_pow+0x9ba>
 8004a24:	4642      	mov	r2, r8
 8004a26:	464b      	mov	r3, r9
 8004a28:	2000      	movs	r0, #0
 8004a2a:	4954      	ldr	r1, [pc, #336]	; (8004b7c <__ieee754_pow+0x23c>)
 8004a2c:	f7fb fe76 	bl	800071c <__aeabi_ddiv>
 8004a30:	e7a3      	b.n	800497a <__ieee754_pow+0x3a>
 8004a32:	2300      	movs	r3, #0
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d13c      	bne.n	8004ab4 <__ieee754_pow+0x174>
 8004a3a:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <__ieee754_pow+0x234>)
 8004a3c:	429e      	cmp	r6, r3
 8004a3e:	d1eb      	bne.n	8004a18 <__ieee754_pow+0xd8>
 8004a40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004a44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004a48:	ea53 030a 	orrs.w	r3, r3, sl
 8004a4c:	f000 8449 	beq.w	80052e2 <__ieee754_pow+0x9a2>
 8004a50:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <__ieee754_pow+0x240>)
 8004a52:	429c      	cmp	r4, r3
 8004a54:	dd0b      	ble.n	8004a6e <__ieee754_pow+0x12e>
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	f2c0 8449 	blt.w	80052ee <__ieee754_pow+0x9ae>
 8004a5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004a60:	4658      	mov	r0, fp
 8004a62:	4661      	mov	r1, ip
 8004a64:	b013      	add	sp, #76	; 0x4c
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e7e2      	b.n	8004a34 <__ieee754_pow+0xf4>
 8004a6e:	2f00      	cmp	r7, #0
 8004a70:	f04f 0b00 	mov.w	fp, #0
 8004a74:	f04f 0c00 	mov.w	ip, #0
 8004a78:	daf2      	bge.n	8004a60 <__ieee754_pow+0x120>
 8004a7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004a7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004a82:	e7ed      	b.n	8004a60 <__ieee754_pow+0x120>
 8004a84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004a88:	d106      	bne.n	8004a98 <__ieee754_pow+0x158>
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	4640      	mov	r0, r8
 8004a90:	4649      	mov	r1, r9
 8004a92:	f7fb fd19 	bl	80004c8 <__aeabi_dmul>
 8004a96:	e770      	b.n	800497a <__ieee754_pow+0x3a>
 8004a98:	4b3a      	ldr	r3, [pc, #232]	; (8004b84 <__ieee754_pow+0x244>)
 8004a9a:	429f      	cmp	r7, r3
 8004a9c:	d10a      	bne.n	8004ab4 <__ieee754_pow+0x174>
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	db08      	blt.n	8004ab4 <__ieee754_pow+0x174>
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	b013      	add	sp, #76	; 0x4c
 8004aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	f000 bd0a 	b.w	80054c4 <__ieee754_sqrt>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	f000 fc58 	bl	800536c <fabs>
 8004abc:	4683      	mov	fp, r0
 8004abe:	468c      	mov	ip, r1
 8004ac0:	f1ba 0f00 	cmp.w	sl, #0
 8004ac4:	d128      	bne.n	8004b18 <__ieee754_pow+0x1d8>
 8004ac6:	b124      	cbz	r4, 8004ad2 <__ieee754_pow+0x192>
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <__ieee754_pow+0x23c>)
 8004aca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d122      	bne.n	8004b18 <__ieee754_pow+0x1d8>
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	da07      	bge.n	8004ae6 <__ieee754_pow+0x1a6>
 8004ad6:	465a      	mov	r2, fp
 8004ad8:	4663      	mov	r3, ip
 8004ada:	2000      	movs	r0, #0
 8004adc:	4927      	ldr	r1, [pc, #156]	; (8004b7c <__ieee754_pow+0x23c>)
 8004ade:	f7fb fe1d 	bl	800071c <__aeabi_ddiv>
 8004ae2:	4683      	mov	fp, r0
 8004ae4:	468c      	mov	ip, r1
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	daba      	bge.n	8004a60 <__ieee754_pow+0x120>
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004af0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004af4:	431c      	orrs	r4, r3
 8004af6:	d108      	bne.n	8004b0a <__ieee754_pow+0x1ca>
 8004af8:	465a      	mov	r2, fp
 8004afa:	4663      	mov	r3, ip
 8004afc:	4658      	mov	r0, fp
 8004afe:	4661      	mov	r1, ip
 8004b00:	f7fb fb2a 	bl	8000158 <__aeabi_dsub>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	e790      	b.n	8004a2c <__ieee754_pow+0xec>
 8004b0a:	9b00      	ldr	r3, [sp, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d1a7      	bne.n	8004a60 <__ieee754_pow+0x120>
 8004b10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004b14:	469c      	mov	ip, r3
 8004b16:	e7a3      	b.n	8004a60 <__ieee754_pow+0x120>
 8004b18:	0feb      	lsrs	r3, r5, #31
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b20:	9b00      	ldr	r3, [sp, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d104      	bne.n	8004b30 <__ieee754_pow+0x1f0>
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	e7e7      	b.n	8004b00 <__ieee754_pow+0x1c0>
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <__ieee754_pow+0x248>)
 8004b32:	429e      	cmp	r6, r3
 8004b34:	f340 80f6 	ble.w	8004d24 <__ieee754_pow+0x3e4>
 8004b38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004b3c:	429e      	cmp	r6, r3
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <__ieee754_pow+0x240>)
 8004b40:	dd09      	ble.n	8004b56 <__ieee754_pow+0x216>
 8004b42:	429c      	cmp	r4, r3
 8004b44:	dc0c      	bgt.n	8004b60 <__ieee754_pow+0x220>
 8004b46:	2f00      	cmp	r7, #0
 8004b48:	da0c      	bge.n	8004b64 <__ieee754_pow+0x224>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	b013      	add	sp, #76	; 0x4c
 8004b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b52:	f000 bcb2 	b.w	80054ba <__math_oflow>
 8004b56:	429c      	cmp	r4, r3
 8004b58:	dbf5      	blt.n	8004b46 <__ieee754_pow+0x206>
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <__ieee754_pow+0x23c>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	dd15      	ble.n	8004b8c <__ieee754_pow+0x24c>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	dcf2      	bgt.n	8004b4a <__ieee754_pow+0x20a>
 8004b64:	2000      	movs	r0, #0
 8004b66:	b013      	add	sp, #76	; 0x4c
 8004b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	f000 bca0 	b.w	80054b0 <__math_uflow>
 8004b70:	fff00000 	.word	0xfff00000
 8004b74:	7ff00000 	.word	0x7ff00000
 8004b78:	433fffff 	.word	0x433fffff
 8004b7c:	3ff00000 	.word	0x3ff00000
 8004b80:	3fefffff 	.word	0x3fefffff
 8004b84:	3fe00000 	.word	0x3fe00000
 8004b88:	41e00000 	.word	0x41e00000
 8004b8c:	4661      	mov	r1, ip
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4658      	mov	r0, fp
 8004b92:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <__ieee754_pow+0x3d0>)
 8004b94:	f7fb fae0 	bl	8000158 <__aeabi_dsub>
 8004b98:	a355      	add	r3, pc, #340	; (adr r3, 8004cf0 <__ieee754_pow+0x3b0>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	f7fb fc91 	bl	80004c8 <__aeabi_dmul>
 8004ba6:	a354      	add	r3, pc, #336	; (adr r3, 8004cf8 <__ieee754_pow+0x3b8>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	4606      	mov	r6, r0
 8004bae:	460f      	mov	r7, r1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb fc88 	bl	80004c8 <__aeabi_dmul>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4682      	mov	sl, r0
 8004bbc:	468b      	mov	fp, r1
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <__ieee754_pow+0x3d4>)
 8004bc4:	f7fb fc80 	bl	80004c8 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	a14c      	add	r1, pc, #304	; (adr r1, 8004d00 <__ieee754_pow+0x3c0>)
 8004bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd2:	f7fb fac1 	bl	8000158 <__aeabi_dsub>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f7fb fc75 	bl	80004c8 <__aeabi_dmul>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	2000      	movs	r0, #0
 8004be4:	494c      	ldr	r1, [pc, #304]	; (8004d18 <__ieee754_pow+0x3d8>)
 8004be6:	f7fb fab7 	bl	8000158 <__aeabi_dsub>
 8004bea:	4622      	mov	r2, r4
 8004bec:	462b      	mov	r3, r5
 8004bee:	4680      	mov	r8, r0
 8004bf0:	4689      	mov	r9, r1
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb fc67 	bl	80004c8 <__aeabi_dmul>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f7fb fc61 	bl	80004c8 <__aeabi_dmul>
 8004c06:	a340      	add	r3, pc, #256	; (adr r3, 8004d08 <__ieee754_pow+0x3c8>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fc5c 	bl	80004c8 <__aeabi_dmul>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4650      	mov	r0, sl
 8004c16:	4659      	mov	r1, fp
 8004c18:	f7fb fa9e 	bl	8000158 <__aeabi_dsub>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4604      	mov	r4, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fa98 	bl	800015c <__adddf3>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	4632      	mov	r2, r6
 8004c30:	463b      	mov	r3, r7
 8004c32:	4682      	mov	sl, r0
 8004c34:	468b      	mov	fp, r1
 8004c36:	f7fb fa8f 	bl	8000158 <__aeabi_dsub>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb fa89 	bl	8000158 <__aeabi_dsub>
 8004c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c4a:	9b00      	ldr	r3, [sp, #0]
 8004c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f04f 0600 	mov.w	r6, #0
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	4b2f      	ldreq	r3, [pc, #188]	; (8004d1c <__ieee754_pow+0x3dc>)
 8004c5e:	4b2c      	ldrne	r3, [pc, #176]	; (8004d10 <__ieee754_pow+0x3d0>)
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c68:	e9cd 2300 	strd	r2, r3, [sp]
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	463b      	mov	r3, r7
 8004c70:	f7fb fa72 	bl	8000158 <__aeabi_dsub>
 8004c74:	4652      	mov	r2, sl
 8004c76:	465b      	mov	r3, fp
 8004c78:	f7fb fc26 	bl	80004c8 <__aeabi_dmul>
 8004c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c80:	4680      	mov	r8, r0
 8004c82:	4689      	mov	r9, r1
 8004c84:	4620      	mov	r0, r4
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7fb fc1e 	bl	80004c8 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb fa62 	bl	800015c <__adddf3>
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	f7fb fc10 	bl	80004c8 <__aeabi_dmul>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	460b      	mov	r3, r1
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004cb8:	f7fb fa50 	bl	800015c <__adddf3>
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <__ieee754_pow+0x3e0>)
 8004cbe:	4682      	mov	sl, r0
 8004cc0:	4299      	cmp	r1, r3
 8004cc2:	460f      	mov	r7, r1
 8004cc4:	460e      	mov	r6, r1
 8004cc6:	f340 82e7 	ble.w	8005298 <__ieee754_pow+0x958>
 8004cca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004cce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004cd2:	4303      	orrs	r3, r0
 8004cd4:	f000 81e2 	beq.w	800509c <__ieee754_pow+0x75c>
 8004cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe64 	bl	80009ac <__aeabi_dcmplt>
 8004ce4:	3800      	subs	r0, #0
 8004ce6:	bf18      	it	ne
 8004ce8:	2001      	movne	r0, #1
 8004cea:	e72f      	b.n	8004b4c <__ieee754_pow+0x20c>
 8004cec:	f3af 8000 	nop.w
 8004cf0:	60000000 	.word	0x60000000
 8004cf4:	3ff71547 	.word	0x3ff71547
 8004cf8:	f85ddf44 	.word	0xf85ddf44
 8004cfc:	3e54ae0b 	.word	0x3e54ae0b
 8004d00:	55555555 	.word	0x55555555
 8004d04:	3fd55555 	.word	0x3fd55555
 8004d08:	652b82fe 	.word	0x652b82fe
 8004d0c:	3ff71547 	.word	0x3ff71547
 8004d10:	3ff00000 	.word	0x3ff00000
 8004d14:	3fd00000 	.word	0x3fd00000
 8004d18:	3fe00000 	.word	0x3fe00000
 8004d1c:	bff00000 	.word	0xbff00000
 8004d20:	408fffff 	.word	0x408fffff
 8004d24:	4bd4      	ldr	r3, [pc, #848]	; (8005078 <__ieee754_pow+0x738>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	402b      	ands	r3, r5
 8004d2a:	b943      	cbnz	r3, 8004d3e <__ieee754_pow+0x3fe>
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	4661      	mov	r1, ip
 8004d30:	4bd2      	ldr	r3, [pc, #840]	; (800507c <__ieee754_pow+0x73c>)
 8004d32:	f7fb fbc9 	bl	80004c8 <__aeabi_dmul>
 8004d36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004d3a:	4683      	mov	fp, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	1523      	asrs	r3, r4, #20
 8004d40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d44:	4413      	add	r3, r2
 8004d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d48:	4bcd      	ldr	r3, [pc, #820]	; (8005080 <__ieee754_pow+0x740>)
 8004d4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004d4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004d52:	429c      	cmp	r4, r3
 8004d54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004d58:	dd08      	ble.n	8004d6c <__ieee754_pow+0x42c>
 8004d5a:	4bca      	ldr	r3, [pc, #808]	; (8005084 <__ieee754_pow+0x744>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	f340 8164 	ble.w	800502a <__ieee754_pow+0x6ea>
 8004d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004d68:	3301      	adds	r3, #1
 8004d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	00f3      	lsls	r3, r6, #3
 8004d70:	930d      	str	r3, [sp, #52]	; 0x34
 8004d72:	4bc5      	ldr	r3, [pc, #788]	; (8005088 <__ieee754_pow+0x748>)
 8004d74:	4658      	mov	r0, fp
 8004d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	461a      	mov	r2, r3
 8004d82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d86:	4623      	mov	r3, r4
 8004d88:	f7fb f9e6 	bl	8000158 <__aeabi_dsub>
 8004d8c:	46da      	mov	sl, fp
 8004d8e:	462b      	mov	r3, r5
 8004d90:	4652      	mov	r2, sl
 8004d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004d96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d9a:	f7fb f9df 	bl	800015c <__adddf3>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	2000      	movs	r0, #0
 8004da4:	49b9      	ldr	r1, [pc, #740]	; (800508c <__ieee754_pow+0x74c>)
 8004da6:	f7fb fcb9 	bl	800071c <__aeabi_ddiv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004db6:	f7fb fb87 	bl	80004c8 <__aeabi_dmul>
 8004dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	46ab      	mov	fp, r5
 8004dcc:	106d      	asrs	r5, r5, #1
 8004dce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004dd8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ddc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	4614      	mov	r4, r2
 8004de6:	461d      	mov	r5, r3
 8004de8:	f7fb fb6e 	bl	80004c8 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004df4:	f7fb f9b0 	bl	8000158 <__aeabi_dsub>
 8004df8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	460f      	mov	r7, r1
 8004e00:	4620      	mov	r0, r4
 8004e02:	4629      	mov	r1, r5
 8004e04:	f7fb f9a8 	bl	8000158 <__aeabi_dsub>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	4659      	mov	r1, fp
 8004e10:	f7fb f9a2 	bl	8000158 <__aeabi_dsub>
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	f7fb fb56 	bl	80004c8 <__aeabi_dmul>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb f998 	bl	8000158 <__aeabi_dsub>
 8004e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e2c:	f7fb fb4c 	bl	80004c8 <__aeabi_dmul>
 8004e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e34:	4682      	mov	sl, r0
 8004e36:	468b      	mov	fp, r1
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f7fb fb44 	bl	80004c8 <__aeabi_dmul>
 8004e40:	a37b      	add	r3, pc, #492	; (adr r3, 8005030 <__ieee754_pow+0x6f0>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	f7fb fb3d 	bl	80004c8 <__aeabi_dmul>
 8004e4e:	a37a      	add	r3, pc, #488	; (adr r3, 8005038 <__ieee754_pow+0x6f8>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f982 	bl	800015c <__adddf3>
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	f7fb fb34 	bl	80004c8 <__aeabi_dmul>
 8004e60:	a377      	add	r3, pc, #476	; (adr r3, 8005040 <__ieee754_pow+0x700>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f979 	bl	800015c <__adddf3>
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f7fb fb2b 	bl	80004c8 <__aeabi_dmul>
 8004e72:	a375      	add	r3, pc, #468	; (adr r3, 8005048 <__ieee754_pow+0x708>)
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f7fb f970 	bl	800015c <__adddf3>
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	f7fb fb22 	bl	80004c8 <__aeabi_dmul>
 8004e84:	a372      	add	r3, pc, #456	; (adr r3, 8005050 <__ieee754_pow+0x710>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb f967 	bl	800015c <__adddf3>
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	f7fb fb19 	bl	80004c8 <__aeabi_dmul>
 8004e96:	a370      	add	r3, pc, #448	; (adr r3, 8005058 <__ieee754_pow+0x718>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb f95e 	bl	800015c <__adddf3>
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	460f      	mov	r7, r1
 8004ea6:	462b      	mov	r3, r5
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7fb fb0c 	bl	80004c8 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb fb06 	bl	80004c8 <__aeabi_dmul>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	f7fb f948 	bl	800015c <__adddf3>
 8004ecc:	4652      	mov	r2, sl
 8004ece:	465b      	mov	r3, fp
 8004ed0:	f7fb fafa 	bl	80004c8 <__aeabi_dmul>
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	f7fb f940 	bl	800015c <__adddf3>
 8004edc:	4642      	mov	r2, r8
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb faee 	bl	80004c8 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4b66      	ldr	r3, [pc, #408]	; (8005090 <__ieee754_pow+0x750>)
 8004ef8:	f7fb f930 	bl	800015c <__adddf3>
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	f7fb f92c 	bl	800015c <__adddf3>
 8004f04:	2400      	movs	r4, #0
 8004f06:	460d      	mov	r5, r1
 8004f08:	4622      	mov	r2, r4
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb fada 	bl	80004c8 <__aeabi_dmul>
 8004f14:	2200      	movs	r2, #0
 8004f16:	4680      	mov	r8, r0
 8004f18:	4689      	mov	r9, r1
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <__ieee754_pow+0x750>)
 8004f20:	f7fb f91a 	bl	8000158 <__aeabi_dsub>
 8004f24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f28:	f7fb f916 	bl	8000158 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4630      	mov	r0, r6
 8004f32:	4639      	mov	r1, r7
 8004f34:	f7fb f910 	bl	8000158 <__aeabi_dsub>
 8004f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f3c:	f7fb fac4 	bl	80004c8 <__aeabi_dmul>
 8004f40:	4622      	mov	r2, r4
 8004f42:	4606      	mov	r6, r0
 8004f44:	460f      	mov	r7, r1
 8004f46:	462b      	mov	r3, r5
 8004f48:	4650      	mov	r0, sl
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	f7fb fabc 	bl	80004c8 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb f900 	bl	800015c <__adddf3>
 8004f5c:	2400      	movs	r4, #0
 8004f5e:	4606      	mov	r6, r0
 8004f60:	460f      	mov	r7, r1
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f8f7 	bl	800015c <__adddf3>
 8004f6e:	a33c      	add	r3, pc, #240	; (adr r3, 8005060 <__ieee754_pow+0x720>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	4620      	mov	r0, r4
 8004f76:	460d      	mov	r5, r1
 8004f78:	f7fb faa6 	bl	80004c8 <__aeabi_dmul>
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	f7fb f8e6 	bl	8000158 <__aeabi_dsub>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4630      	mov	r0, r6
 8004f92:	4639      	mov	r1, r7
 8004f94:	f7fb f8e0 	bl	8000158 <__aeabi_dsub>
 8004f98:	a333      	add	r3, pc, #204	; (adr r3, 8005068 <__ieee754_pow+0x728>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb fa93 	bl	80004c8 <__aeabi_dmul>
 8004fa2:	a333      	add	r3, pc, #204	; (adr r3, 8005070 <__ieee754_pow+0x730>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f7fb fa8a 	bl	80004c8 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb f8ce 	bl	800015c <__adddf3>
 8004fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fc2:	4b34      	ldr	r3, [pc, #208]	; (8005094 <__ieee754_pow+0x754>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb f8c7 	bl	800015c <__adddf3>
 8004fce:	4680      	mov	r8, r0
 8004fd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fd2:	4689      	mov	r9, r1
 8004fd4:	f7fb fa0e 	bl	80003f4 <__aeabi_i2d>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <__ieee754_pow+0x758>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	f7fb f8b5 	bl	800015c <__adddf3>
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	f7fb f8b1 	bl	800015c <__adddf3>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb f8ad 	bl	800015c <__adddf3>
 8005002:	2000      	movs	r0, #0
 8005004:	4622      	mov	r2, r4
 8005006:	462b      	mov	r3, r5
 8005008:	4682      	mov	sl, r0
 800500a:	468b      	mov	fp, r1
 800500c:	f7fb f8a4 	bl	8000158 <__aeabi_dsub>
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	f7fb f8a0 	bl	8000158 <__aeabi_dsub>
 8005018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800501c:	f7fb f89c 	bl	8000158 <__aeabi_dsub>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	e60b      	b.n	8004c42 <__ieee754_pow+0x302>
 800502a:	2601      	movs	r6, #1
 800502c:	e69f      	b.n	8004d6e <__ieee754_pow+0x42e>
 800502e:	bf00      	nop
 8005030:	4a454eef 	.word	0x4a454eef
 8005034:	3fca7e28 	.word	0x3fca7e28
 8005038:	93c9db65 	.word	0x93c9db65
 800503c:	3fcd864a 	.word	0x3fcd864a
 8005040:	a91d4101 	.word	0xa91d4101
 8005044:	3fd17460 	.word	0x3fd17460
 8005048:	518f264d 	.word	0x518f264d
 800504c:	3fd55555 	.word	0x3fd55555
 8005050:	db6fabff 	.word	0xdb6fabff
 8005054:	3fdb6db6 	.word	0x3fdb6db6
 8005058:	33333303 	.word	0x33333303
 800505c:	3fe33333 	.word	0x3fe33333
 8005060:	e0000000 	.word	0xe0000000
 8005064:	3feec709 	.word	0x3feec709
 8005068:	dc3a03fd 	.word	0xdc3a03fd
 800506c:	3feec709 	.word	0x3feec709
 8005070:	145b01f5 	.word	0x145b01f5
 8005074:	be3e2fe0 	.word	0xbe3e2fe0
 8005078:	7ff00000 	.word	0x7ff00000
 800507c:	43400000 	.word	0x43400000
 8005080:	0003988e 	.word	0x0003988e
 8005084:	000bb679 	.word	0x000bb679
 8005088:	080056c0 	.word	0x080056c0
 800508c:	3ff00000 	.word	0x3ff00000
 8005090:	40080000 	.word	0x40080000
 8005094:	080056e0 	.word	0x080056e0
 8005098:	080056d0 	.word	0x080056d0
 800509c:	a39c      	add	r3, pc, #624	; (adr r3, 8005310 <__ieee754_pow+0x9d0>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	4640      	mov	r0, r8
 80050a4:	4649      	mov	r1, r9
 80050a6:	f7fb f859 	bl	800015c <__adddf3>
 80050aa:	4622      	mov	r2, r4
 80050ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050b0:	462b      	mov	r3, r5
 80050b2:	4650      	mov	r0, sl
 80050b4:	4639      	mov	r1, r7
 80050b6:	f7fb f84f 	bl	8000158 <__aeabi_dsub>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	f7fb fc91 	bl	80009e8 <__aeabi_dcmpgt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f47f ae06 	bne.w	8004cd8 <__ieee754_pow+0x398>
 80050cc:	4aa2      	ldr	r2, [pc, #648]	; (8005358 <__ieee754_pow+0xa18>)
 80050ce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f340 8100 	ble.w	80052d8 <__ieee754_pow+0x998>
 80050d8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80050dc:	151b      	asrs	r3, r3, #20
 80050de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80050e2:	fa4a fa03 	asr.w	sl, sl, r3
 80050e6:	44b2      	add	sl, r6
 80050e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80050ec:	489b      	ldr	r0, [pc, #620]	; (800535c <__ieee754_pow+0xa1c>)
 80050ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80050f2:	4108      	asrs	r0, r1
 80050f4:	ea00 030a 	and.w	r3, r0, sl
 80050f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80050fc:	f1c1 0114 	rsb	r1, r1, #20
 8005100:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005104:	fa4a fa01 	asr.w	sl, sl, r1
 8005108:	2e00      	cmp	r6, #0
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	bfb8      	it	lt
 8005114:	f1ca 0a00 	rsblt	sl, sl, #0
 8005118:	f7fb f81e 	bl	8000158 <__aeabi_dsub>
 800511c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005124:	2400      	movs	r4, #0
 8005126:	4642      	mov	r2, r8
 8005128:	464b      	mov	r3, r9
 800512a:	f7fb f817 	bl	800015c <__adddf3>
 800512e:	a37a      	add	r3, pc, #488	; (adr r3, 8005318 <__ieee754_pow+0x9d8>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	4620      	mov	r0, r4
 8005136:	460d      	mov	r5, r1
 8005138:	f7fb f9c6 	bl	80004c8 <__aeabi_dmul>
 800513c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005140:	4606      	mov	r6, r0
 8005142:	460f      	mov	r7, r1
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	f7fb f806 	bl	8000158 <__aeabi_dsub>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb f800 	bl	8000158 <__aeabi_dsub>
 8005158:	a371      	add	r3, pc, #452	; (adr r3, 8005320 <__ieee754_pow+0x9e0>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f9b3 	bl	80004c8 <__aeabi_dmul>
 8005162:	a371      	add	r3, pc, #452	; (adr r3, 8005328 <__ieee754_pow+0x9e8>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	4680      	mov	r8, r0
 800516a:	4689      	mov	r9, r1
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb f9aa 	bl	80004c8 <__aeabi_dmul>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fa ffee 	bl	800015c <__adddf3>
 8005180:	4604      	mov	r4, r0
 8005182:	460d      	mov	r5, r1
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fa ffe6 	bl	800015c <__adddf3>
 8005190:	4632      	mov	r2, r6
 8005192:	463b      	mov	r3, r7
 8005194:	4680      	mov	r8, r0
 8005196:	4689      	mov	r9, r1
 8005198:	f7fa ffde 	bl	8000158 <__aeabi_dsub>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4620      	mov	r0, r4
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7fa ffd8 	bl	8000158 <__aeabi_dsub>
 80051a8:	4642      	mov	r2, r8
 80051aa:	4606      	mov	r6, r0
 80051ac:	460f      	mov	r7, r1
 80051ae:	464b      	mov	r3, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	4649      	mov	r1, r9
 80051b4:	f7fb f988 	bl	80004c8 <__aeabi_dmul>
 80051b8:	a35d      	add	r3, pc, #372	; (adr r3, 8005330 <__ieee754_pow+0x9f0>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	f7fb f981 	bl	80004c8 <__aeabi_dmul>
 80051c6:	a35c      	add	r3, pc, #368	; (adr r3, 8005338 <__ieee754_pow+0x9f8>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fa ffc4 	bl	8000158 <__aeabi_dsub>
 80051d0:	4622      	mov	r2, r4
 80051d2:	462b      	mov	r3, r5
 80051d4:	f7fb f978 	bl	80004c8 <__aeabi_dmul>
 80051d8:	a359      	add	r3, pc, #356	; (adr r3, 8005340 <__ieee754_pow+0xa00>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fa ffbd 	bl	800015c <__adddf3>
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	f7fb f96f 	bl	80004c8 <__aeabi_dmul>
 80051ea:	a357      	add	r3, pc, #348	; (adr r3, 8005348 <__ieee754_pow+0xa08>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fa ffb2 	bl	8000158 <__aeabi_dsub>
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	f7fb f966 	bl	80004c8 <__aeabi_dmul>
 80051fc:	a354      	add	r3, pc, #336	; (adr r3, 8005350 <__ieee754_pow+0xa10>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fa ffab 	bl	800015c <__adddf3>
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	f7fb f95d 	bl	80004c8 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fa ff9f 	bl	8000158 <__aeabi_dsub>
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4640      	mov	r0, r8
 8005224:	4649      	mov	r1, r9
 8005226:	f7fb f94f 	bl	80004c8 <__aeabi_dmul>
 800522a:	2200      	movs	r2, #0
 800522c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fa ff8e 	bl	8000158 <__aeabi_dsub>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005244:	f7fb fa6a 	bl	800071c <__aeabi_ddiv>
 8005248:	4632      	mov	r2, r6
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	463b      	mov	r3, r7
 8005250:	4640      	mov	r0, r8
 8005252:	4649      	mov	r1, r9
 8005254:	f7fb f938 	bl	80004c8 <__aeabi_dmul>
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	f7fa ff7e 	bl	800015c <__adddf3>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fa ff76 	bl	8000158 <__aeabi_dsub>
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	f7fa ff72 	bl	8000158 <__aeabi_dsub>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	2000      	movs	r0, #0
 800527a:	4939      	ldr	r1, [pc, #228]	; (8005360 <__ieee754_pow+0xa20>)
 800527c:	f7fa ff6c 	bl	8000158 <__aeabi_dsub>
 8005280:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005284:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005288:	da29      	bge.n	80052de <__ieee754_pow+0x99e>
 800528a:	4652      	mov	r2, sl
 800528c:	f000 f874 	bl	8005378 <scalbn>
 8005290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005294:	f7ff bbfd 	b.w	8004a92 <__ieee754_pow+0x152>
 8005298:	4b32      	ldr	r3, [pc, #200]	; (8005364 <__ieee754_pow+0xa24>)
 800529a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800529e:	429f      	cmp	r7, r3
 80052a0:	f77f af14 	ble.w	80050cc <__ieee754_pow+0x78c>
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <__ieee754_pow+0xa28>)
 80052a6:	440b      	add	r3, r1
 80052a8:	4303      	orrs	r3, r0
 80052aa:	d009      	beq.n	80052c0 <__ieee754_pow+0x980>
 80052ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2300      	movs	r3, #0
 80052b4:	f7fb fb7a 	bl	80009ac <__aeabi_dcmplt>
 80052b8:	3800      	subs	r0, #0
 80052ba:	bf18      	it	ne
 80052bc:	2001      	movne	r0, #1
 80052be:	e452      	b.n	8004b66 <__ieee754_pow+0x226>
 80052c0:	4622      	mov	r2, r4
 80052c2:	462b      	mov	r3, r5
 80052c4:	f7fa ff48 	bl	8000158 <__aeabi_dsub>
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	f7fb fb82 	bl	80009d4 <__aeabi_dcmpge>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f aefb 	beq.w	80050cc <__ieee754_pow+0x78c>
 80052d6:	e7e9      	b.n	80052ac <__ieee754_pow+0x96c>
 80052d8:	f04f 0a00 	mov.w	sl, #0
 80052dc:	e720      	b.n	8005120 <__ieee754_pow+0x7e0>
 80052de:	4621      	mov	r1, r4
 80052e0:	e7d6      	b.n	8005290 <__ieee754_pow+0x950>
 80052e2:	f04f 0b00 	mov.w	fp, #0
 80052e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005360 <__ieee754_pow+0xa20>
 80052ea:	f7ff bbb9 	b.w	8004a60 <__ieee754_pow+0x120>
 80052ee:	f04f 0b00 	mov.w	fp, #0
 80052f2:	f04f 0c00 	mov.w	ip, #0
 80052f6:	f7ff bbb3 	b.w	8004a60 <__ieee754_pow+0x120>
 80052fa:	4640      	mov	r0, r8
 80052fc:	4649      	mov	r1, r9
 80052fe:	f7ff bb3c 	b.w	800497a <__ieee754_pow+0x3a>
 8005302:	9200      	str	r2, [sp, #0]
 8005304:	f7ff bb88 	b.w	8004a18 <__ieee754_pow+0xd8>
 8005308:	2300      	movs	r3, #0
 800530a:	f7ff bb72 	b.w	80049f2 <__ieee754_pow+0xb2>
 800530e:	bf00      	nop
 8005310:	652b82fe 	.word	0x652b82fe
 8005314:	3c971547 	.word	0x3c971547
 8005318:	00000000 	.word	0x00000000
 800531c:	3fe62e43 	.word	0x3fe62e43
 8005320:	fefa39ef 	.word	0xfefa39ef
 8005324:	3fe62e42 	.word	0x3fe62e42
 8005328:	0ca86c39 	.word	0x0ca86c39
 800532c:	be205c61 	.word	0xbe205c61
 8005330:	72bea4d0 	.word	0x72bea4d0
 8005334:	3e663769 	.word	0x3e663769
 8005338:	c5d26bf1 	.word	0xc5d26bf1
 800533c:	3ebbbd41 	.word	0x3ebbbd41
 8005340:	af25de2c 	.word	0xaf25de2c
 8005344:	3f11566a 	.word	0x3f11566a
 8005348:	16bebd93 	.word	0x16bebd93
 800534c:	3f66c16c 	.word	0x3f66c16c
 8005350:	5555553e 	.word	0x5555553e
 8005354:	3fc55555 	.word	0x3fc55555
 8005358:	3fe00000 	.word	0x3fe00000
 800535c:	fff00000 	.word	0xfff00000
 8005360:	3ff00000 	.word	0x3ff00000
 8005364:	4090cbff 	.word	0x4090cbff
 8005368:	3f6f3400 	.word	0x3f6f3400

0800536c <fabs>:
 800536c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005370:	4619      	mov	r1, r3
 8005372:	4770      	bx	lr
 8005374:	0000      	movs	r0, r0
	...

08005378 <scalbn>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	4616      	mov	r6, r2
 800537c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005380:	4604      	mov	r4, r0
 8005382:	460d      	mov	r5, r1
 8005384:	460b      	mov	r3, r1
 8005386:	b992      	cbnz	r2, 80053ae <scalbn+0x36>
 8005388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800538c:	4303      	orrs	r3, r0
 800538e:	d03c      	beq.n	800540a <scalbn+0x92>
 8005390:	4b31      	ldr	r3, [pc, #196]	; (8005458 <scalbn+0xe0>)
 8005392:	2200      	movs	r2, #0
 8005394:	f7fb f898 	bl	80004c8 <__aeabi_dmul>
 8005398:	4b30      	ldr	r3, [pc, #192]	; (800545c <scalbn+0xe4>)
 800539a:	4604      	mov	r4, r0
 800539c:	429e      	cmp	r6, r3
 800539e:	460d      	mov	r5, r1
 80053a0:	da0f      	bge.n	80053c2 <scalbn+0x4a>
 80053a2:	a329      	add	r3, pc, #164	; (adr r3, 8005448 <scalbn+0xd0>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f88e 	bl	80004c8 <__aeabi_dmul>
 80053ac:	e006      	b.n	80053bc <scalbn+0x44>
 80053ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80053b2:	42ba      	cmp	r2, r7
 80053b4:	d109      	bne.n	80053ca <scalbn+0x52>
 80053b6:	4602      	mov	r2, r0
 80053b8:	f7fa fed0 	bl	800015c <__adddf3>
 80053bc:	4604      	mov	r4, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	e023      	b.n	800540a <scalbn+0x92>
 80053c2:	460b      	mov	r3, r1
 80053c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053c8:	3a36      	subs	r2, #54	; 0x36
 80053ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80053ce:	428e      	cmp	r6, r1
 80053d0:	dd0e      	ble.n	80053f0 <scalbn+0x78>
 80053d2:	a31f      	add	r3, pc, #124	; (adr r3, 8005450 <scalbn+0xd8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80053e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80053e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80053e8:	481d      	ldr	r0, [pc, #116]	; (8005460 <scalbn+0xe8>)
 80053ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80053ee:	e7db      	b.n	80053a8 <scalbn+0x30>
 80053f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80053f4:	4432      	add	r2, r6
 80053f6:	428a      	cmp	r2, r1
 80053f8:	dceb      	bgt.n	80053d2 <scalbn+0x5a>
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	dd08      	ble.n	8005410 <scalbn+0x98>
 80053fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005402:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005406:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800540a:	4620      	mov	r0, r4
 800540c:	4629      	mov	r1, r5
 800540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005410:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005414:	da0c      	bge.n	8005430 <scalbn+0xb8>
 8005416:	a30c      	add	r3, pc, #48	; (adr r3, 8005448 <scalbn+0xd0>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005420:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005424:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005428:	480e      	ldr	r0, [pc, #56]	; (8005464 <scalbn+0xec>)
 800542a:	f041 011f 	orr.w	r1, r1, #31
 800542e:	e7bb      	b.n	80053a8 <scalbn+0x30>
 8005430:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005434:	3236      	adds	r2, #54	; 0x36
 8005436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800543a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	2200      	movs	r2, #0
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <scalbn+0xf0>)
 8005446:	e7af      	b.n	80053a8 <scalbn+0x30>
 8005448:	c2f8f359 	.word	0xc2f8f359
 800544c:	01a56e1f 	.word	0x01a56e1f
 8005450:	8800759c 	.word	0x8800759c
 8005454:	7e37e43c 	.word	0x7e37e43c
 8005458:	43500000 	.word	0x43500000
 800545c:	ffff3cb0 	.word	0xffff3cb0
 8005460:	8800759c 	.word	0x8800759c
 8005464:	c2f8f359 	.word	0xc2f8f359
 8005468:	3c900000 	.word	0x3c900000

0800546c <with_errno>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	460d      	mov	r5, r1
 8005472:	4616      	mov	r6, r2
 8005474:	f7ff f9cc 	bl	8004810 <__errno>
 8005478:	4629      	mov	r1, r5
 800547a:	6006      	str	r6, [r0, #0]
 800547c:	4620      	mov	r0, r4
 800547e:	bd70      	pop	{r4, r5, r6, pc}

08005480 <xflow>:
 8005480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005482:	4615      	mov	r5, r2
 8005484:	461c      	mov	r4, r3
 8005486:	b180      	cbz	r0, 80054aa <xflow+0x2a>
 8005488:	4610      	mov	r0, r2
 800548a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800548e:	e9cd 0100 	strd	r0, r1, [sp]
 8005492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005496:	4628      	mov	r0, r5
 8005498:	4621      	mov	r1, r4
 800549a:	f7fb f815 	bl	80004c8 <__aeabi_dmul>
 800549e:	2222      	movs	r2, #34	; 0x22
 80054a0:	b003      	add	sp, #12
 80054a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a6:	f7ff bfe1 	b.w	800546c <with_errno>
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	e7ee      	b.n	800548e <xflow+0xe>

080054b0 <__math_uflow>:
 80054b0:	2200      	movs	r2, #0
 80054b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054b6:	f7ff bfe3 	b.w	8005480 <xflow>

080054ba <__math_oflow>:
 80054ba:	2200      	movs	r2, #0
 80054bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80054c0:	f7ff bfde 	b.w	8005480 <xflow>

080054c4 <__ieee754_sqrt>:
 80054c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005668 <__ieee754_sqrt+0x1a4>
 80054c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80054d0:	460b      	mov	r3, r1
 80054d2:	4606      	mov	r6, r0
 80054d4:	460d      	mov	r5, r1
 80054d6:	460a      	mov	r2, r1
 80054d8:	4604      	mov	r4, r0
 80054da:	d10e      	bne.n	80054fa <__ieee754_sqrt+0x36>
 80054dc:	4602      	mov	r2, r0
 80054de:	f7fa fff3 	bl	80004c8 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4629      	mov	r1, r5
 80054ea:	f7fa fe37 	bl	800015c <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	460d      	mov	r5, r1
 80054f2:	4630      	mov	r0, r6
 80054f4:	4629      	mov	r1, r5
 80054f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fa:	2900      	cmp	r1, #0
 80054fc:	dc0d      	bgt.n	800551a <__ieee754_sqrt+0x56>
 80054fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005502:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005506:	d0f4      	beq.n	80054f2 <__ieee754_sqrt+0x2e>
 8005508:	b139      	cbz	r1, 800551a <__ieee754_sqrt+0x56>
 800550a:	4602      	mov	r2, r0
 800550c:	f7fa fe24 	bl	8000158 <__aeabi_dsub>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	f7fb f902 	bl	800071c <__aeabi_ddiv>
 8005518:	e7e9      	b.n	80054ee <__ieee754_sqrt+0x2a>
 800551a:	1512      	asrs	r2, r2, #20
 800551c:	f000 8089 	beq.w	8005632 <__ieee754_sqrt+0x16e>
 8005520:	2500      	movs	r5, #0
 8005522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005526:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800552a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552e:	07d2      	lsls	r2, r2, #31
 8005530:	bf5c      	itt	pl
 8005532:	005b      	lslpl	r3, r3, #1
 8005534:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800553c:	bf58      	it	pl
 800553e:	0064      	lslpl	r4, r4, #1
 8005540:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005544:	0062      	lsls	r2, r4, #1
 8005546:	2016      	movs	r0, #22
 8005548:	4629      	mov	r1, r5
 800554a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800554e:	1076      	asrs	r6, r6, #1
 8005550:	190f      	adds	r7, r1, r4
 8005552:	429f      	cmp	r7, r3
 8005554:	bfde      	ittt	le
 8005556:	1bdb      	suble	r3, r3, r7
 8005558:	1939      	addle	r1, r7, r4
 800555a:	192d      	addle	r5, r5, r4
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	3801      	subs	r0, #1
 8005560:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005564:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005568:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800556c:	d1f0      	bne.n	8005550 <__ieee754_sqrt+0x8c>
 800556e:	4604      	mov	r4, r0
 8005570:	2720      	movs	r7, #32
 8005572:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005576:	428b      	cmp	r3, r1
 8005578:	eb0c 0e00 	add.w	lr, ip, r0
 800557c:	dc02      	bgt.n	8005584 <__ieee754_sqrt+0xc0>
 800557e:	d113      	bne.n	80055a8 <__ieee754_sqrt+0xe4>
 8005580:	4596      	cmp	lr, r2
 8005582:	d811      	bhi.n	80055a8 <__ieee754_sqrt+0xe4>
 8005584:	f1be 0f00 	cmp.w	lr, #0
 8005588:	eb0e 000c 	add.w	r0, lr, ip
 800558c:	da56      	bge.n	800563c <__ieee754_sqrt+0x178>
 800558e:	2800      	cmp	r0, #0
 8005590:	db54      	blt.n	800563c <__ieee754_sqrt+0x178>
 8005592:	f101 0801 	add.w	r8, r1, #1
 8005596:	1a5b      	subs	r3, r3, r1
 8005598:	4641      	mov	r1, r8
 800559a:	4596      	cmp	lr, r2
 800559c:	bf88      	it	hi
 800559e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80055a2:	eba2 020e 	sub.w	r2, r2, lr
 80055a6:	4464      	add	r4, ip
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	3f01      	subs	r7, #1
 80055ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80055b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80055b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80055b8:	d1dd      	bne.n	8005576 <__ieee754_sqrt+0xb2>
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d01b      	beq.n	80055f6 <__ieee754_sqrt+0x132>
 80055be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800566c <__ieee754_sqrt+0x1a8>
 80055c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005670 <__ieee754_sqrt+0x1ac>
 80055c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80055ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80055ce:	f7fa fdc3 	bl	8000158 <__aeabi_dsub>
 80055d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4640      	mov	r0, r8
 80055dc:	4649      	mov	r1, r9
 80055de:	f7fb f9ef 	bl	80009c0 <__aeabi_dcmple>
 80055e2:	b140      	cbz	r0, 80055f6 <__ieee754_sqrt+0x132>
 80055e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80055e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80055ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80055f0:	d126      	bne.n	8005640 <__ieee754_sqrt+0x17c>
 80055f2:	463c      	mov	r4, r7
 80055f4:	3501      	adds	r5, #1
 80055f6:	106b      	asrs	r3, r5, #1
 80055f8:	0864      	lsrs	r4, r4, #1
 80055fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80055fe:	07ea      	lsls	r2, r5, #31
 8005600:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005604:	bf48      	it	mi
 8005606:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800560a:	4620      	mov	r0, r4
 800560c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005610:	e76d      	b.n	80054ee <__ieee754_sqrt+0x2a>
 8005612:	0ae3      	lsrs	r3, r4, #11
 8005614:	3915      	subs	r1, #21
 8005616:	0564      	lsls	r4, r4, #21
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0fa      	beq.n	8005612 <__ieee754_sqrt+0x14e>
 800561c:	02d8      	lsls	r0, r3, #11
 800561e:	d50a      	bpl.n	8005636 <__ieee754_sqrt+0x172>
 8005620:	f1c2 0020 	rsb	r0, r2, #32
 8005624:	fa24 f000 	lsr.w	r0, r4, r0
 8005628:	1e55      	subs	r5, r2, #1
 800562a:	4094      	lsls	r4, r2
 800562c:	4303      	orrs	r3, r0
 800562e:	1b4a      	subs	r2, r1, r5
 8005630:	e776      	b.n	8005520 <__ieee754_sqrt+0x5c>
 8005632:	4611      	mov	r1, r2
 8005634:	e7f0      	b.n	8005618 <__ieee754_sqrt+0x154>
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	3201      	adds	r2, #1
 800563a:	e7ef      	b.n	800561c <__ieee754_sqrt+0x158>
 800563c:	4688      	mov	r8, r1
 800563e:	e7aa      	b.n	8005596 <__ieee754_sqrt+0xd2>
 8005640:	f7fa fd8c 	bl	800015c <__adddf3>
 8005644:	e9da 8900 	ldrd	r8, r9, [sl]
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fb f9ac 	bl	80009ac <__aeabi_dcmplt>
 8005654:	b120      	cbz	r0, 8005660 <__ieee754_sqrt+0x19c>
 8005656:	1ca1      	adds	r1, r4, #2
 8005658:	bf08      	it	eq
 800565a:	3501      	addeq	r5, #1
 800565c:	3402      	adds	r4, #2
 800565e:	e7ca      	b.n	80055f6 <__ieee754_sqrt+0x132>
 8005660:	3401      	adds	r4, #1
 8005662:	f024 0401 	bic.w	r4, r4, #1
 8005666:	e7c6      	b.n	80055f6 <__ieee754_sqrt+0x132>
 8005668:	7ff00000 	.word	0x7ff00000
 800566c:	20000060 	.word	0x20000060
 8005670:	20000068 	.word	0x20000068

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
