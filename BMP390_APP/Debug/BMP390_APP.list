
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005688  08005688  00015688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e8  080056e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056e8  080056e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e8  080056e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08005760  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005760  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d09f  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001acd  00000000  00000000  0002d17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c2  00000000  00000000  0002f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001748c  00000000  00000000  00030272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e45f  00000000  00000000  000476fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000888d2  00000000  00000000  00055b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af0  00000000  00000000  000de430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e1f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800566c 	.word	0x0800566c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800566c 	.word	0x0800566c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <BMP390_Init>:
 * NOTE ==> if our sensor does soft reset. All params of the sensor are cleared. We have to init our sensor properly again.
 */

#include "bmp390.h"

_Bool BMP390_Init(BMP390_HandleTypeDef *BMP390){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, 10, 1000) != HAL_OK){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69d8      	ldr	r0, [r3, #28]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8b19      	ldrh	r1, [r3, #24]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	220a      	movs	r2, #10
 8000f9a:	f001 ff5f 	bl	8002e5c <HAL_I2C_IsDeviceReady>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <BMP390_Init+0x2c>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <BMP390_Init+0x88>)
 8000fac:	f001 fa98 	bl	80024e0 <HAL_GPIO_WritePin>

	 }

	 BMP390_Get_RawCalibCoeff(BMP390);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8b0 	bl	8001116 <BMP390_Get_RawCalibCoeff>

	 BMP390_Calc_PrcsdCalibrationCoeff(BMP390);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9b0 	bl	800131c <BMP390_Calc_PrcsdCalibrationCoeff>

	 BMP390_Set_DefaultParams(BMP390);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 faf5 	bl	80015ac <BMP390_Set_DefaultParams>

	 BMP390_Upload_ConfigParams(BMP390);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f826 	bl	8001014 <BMP390_Upload_ConfigParams>


	 if(BMP390->Ref_Alt_Sel == 'm'){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8000fce:	2b6d      	cmp	r3, #109	; 0x6d
 8000fd0:	d10d      	bne.n	8000fee <BMP390_Init+0x6a>

		 BMP390->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		 BMP390->FixedAltitude = BMP390_Calc_TemporaryAltitude(BMP390, &BMP390_VertAlt);
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <BMP390_Init+0x8c>)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fcc2 	bl	8001968 <BMP390_Calc_TemporaryAltitude>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000fec:	e009      	b.n	8001002 <BMP390_Init+0x7e>

	 }
	 else if(BMP390->Ref_Alt_Sel == 'M'){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8000ff4:	2b4d      	cmp	r3, #77	; 0x4d
 8000ff6:	d104      	bne.n	8001002 <BMP390_Init+0x7e>

		 BMP390->FixedAltitude = 0.0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	 }



	 return true;
 8001002:	2301      	movs	r3, #1

}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000
 8001010:	200001d4 	.word	0x200001d4

08001014 <BMP390_Upload_ConfigParams>:

_Bool BMP390_Upload_ConfigParams(BMP390_HandleTypeDef *BMP390){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]

	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	005b      	lsls	r3, r3, #1
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800102a:	b25b      	sxtb	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_press)<<0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	b25b      	sxtb	r3, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2da      	uxtb	r2, r3
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

	 BMP390->CONFIG   = ((BMP390->Params.filtercoef)<<1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	 BMP390->ODR 	  = (BMP390->Params.odr);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	785a      	ldrb	r2, [r3, #1]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

     BMP390->OSR 	  = ((BMP390->Params.press_osrs)<<0) |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	b25a      	sxtb	r2, r3
					    ((BMP390->Params.temp_osrs)<<3);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	00db      	lsls	r3, r3, #3
     BMP390->OSR 	  = ((BMP390->Params.press_osrs)<<0) |
 8001066:	b25b      	sxtb	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b25b      	sxtb	r3, r3
 800106c:	b2da      	uxtb	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_PWR_CTRL , 1, &BMP390->PWR_CTRL, 1, 1000);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69d8      	ldr	r0, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8b19      	ldrh	r1, [r3, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3397      	adds	r3, #151	; 0x97
 8001080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	2201      	movs	r2, #1
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	221b      	movs	r2, #27
 8001090:	f001 fb82 	bl	8002798 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_CONFIG , 1, &BMP390->CONFIG, 1, 1000);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69d8      	ldr	r0, [r3, #28]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	8b19      	ldrh	r1, [r3, #24]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3394      	adds	r3, #148	; 0x94
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	9202      	str	r2, [sp, #8]
 80010a6:	2201      	movs	r2, #1
 80010a8:	9201      	str	r2, [sp, #4]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	221f      	movs	r2, #31
 80010b0:	f001 fb72 	bl	8002798 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_ODR , 1, &BMP390->ODR, 1, 1000);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69d8      	ldr	r0, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8b19      	ldrh	r1, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3395      	adds	r3, #149	; 0x95
 80010c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c4:	9202      	str	r2, [sp, #8]
 80010c6:	2201      	movs	r2, #1
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	221d      	movs	r2, #29
 80010d0:	f001 fb62 	bl	8002798 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_OSR , 1, &BMP390->OSR, 1, 1000);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69d8      	ldr	r0, [r3, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	8b19      	ldrh	r1, [r3, #24]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3396      	adds	r3, #150	; 0x96
 80010e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e4:	9202      	str	r2, [sp, #8]
 80010e6:	2201      	movs	r2, #1
 80010e8:	9201      	str	r2, [sp, #4]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	221c      	movs	r2, #28
 80010f0:	f001 fb52 	bl	8002798 <HAL_I2C_Mem_Write>


	 //değişimleri sıfırlara eşitleyelim
	 BMP390->DeltaData.alt0 = 0.0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	671a      	str	r2, [r3, #112]	; 0x70
	 BMP390->DeltaData.alt1 = 0.0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	675a      	str	r2, [r3, #116]	; 0x74
	 BMP390->DeltaData.holdAlt = 0.0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	679a      	str	r2, [r3, #120]	; 0x78


	 return true;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <BMP390_Get_RawCalibCoeff>:

_Bool BMP390_Get_RawCalibCoeff(BMP390_HandleTypeDef *BMP390){
 8001116:	b580      	push	{r7, lr}
 8001118:	b08c      	sub	sp, #48	; 0x30
 800111a:	af04      	add	r7, sp, #16
 800111c:	6078      	str	r0, [r7, #4]

	uint8_t BMP390_CalibCoeff[21];
	uint8_t cnt = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_CalibCoeff, 1, &BMP390_CalibCoeff[0], 21, 1000);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69d8      	ldr	r0, [r3, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8b19      	ldrh	r1, [r3, #24]
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2315      	movs	r3, #21
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2231      	movs	r2, #49	; 0x31
 800113e:	f001 fc25 	bl	800298c <HAL_I2C_Mem_Read>

	BMP390->Raw_NVM.T1  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	3320      	adds	r3, #32
 8001146:	443b      	add	r3, r7
 8001148:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800114c:	b21a      	sxth	r2, r3
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	3301      	adds	r3, #1
 8001152:	3320      	adds	r3, #32
 8001154:	443b      	add	r3, r7
 8001156:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	841a      	strh	r2, [r3, #32]
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	3302      	adds	r3, #2
 800116c:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T2  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	3320      	adds	r3, #32
 8001172:	443b      	add	r3, r7
 8001174:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001178:	b21a      	sxth	r2, r3
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	3301      	adds	r3, #1
 800117e:	3320      	adds	r3, #32
 8001180:	443b      	add	r3, r7
 8001182:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	845a      	strh	r2, [r3, #34]	; 0x22
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	3302      	adds	r3, #2
 8001198:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	3320      	adds	r3, #32
 800119e:	443b      	add	r3, r7
 80011a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	3301      	adds	r3, #1
 80011b0:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P1  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	3320      	adds	r3, #32
 80011b6:	443b      	add	r3, r7
 80011b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011bc:	b21a      	sxth	r2, r3
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	3301      	adds	r3, #1
 80011c2:	3320      	adds	r3, #32
 80011c4:	443b      	add	r3, r7
 80011c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	84da      	strh	r2, [r3, #38]	; 0x26
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P2  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
 80011de:	3320      	adds	r3, #32
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	3301      	adds	r3, #1
 80011ec:	3320      	adds	r3, #32
 80011ee:	443b      	add	r3, r7
 80011f0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	3302      	adds	r3, #2
 8001204:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	3320      	adds	r3, #32
 800120a:	443b      	add	r3, r7
 800120c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001210:	b25a      	sxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3301      	adds	r3, #1
 800121c:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P4  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3320      	adds	r3, #32
 8001222:	443b      	add	r3, r7
 8001224:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001228:	b25a      	sxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	3301      	adds	r3, #1
 8001234:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P5  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	3320      	adds	r3, #32
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001240:	b21a      	sxth	r2, r3
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	3301      	adds	r3, #1
 8001246:	3320      	adds	r3, #32
 8001248:	443b      	add	r3, r7
 800124a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	3302      	adds	r3, #2
 8001260:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P6  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	3320      	adds	r3, #32
 8001266:	443b      	add	r3, r7
 8001268:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800126c:	b21a      	sxth	r2, r3
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	3301      	adds	r3, #1
 8001272:	3320      	adds	r3, #32
 8001274:	443b      	add	r3, r7
 8001276:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	85da      	strh	r2, [r3, #46]	; 0x2e
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	3302      	adds	r3, #2
 800128c:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P7  = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	3320      	adds	r3, #32
 8001292:	443b      	add	r3, r7
 8001294:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001298:	b25a      	sxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	3301      	adds	r3, #1
 80012a4:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P8  = (int8_t)((BMP390_CalibCoeff[cnt]));  									 cnt+=1;
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	3320      	adds	r3, #32
 80012aa:	443b      	add	r3, r7
 80012ac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	3301      	adds	r3, #1
 80012bc:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P9  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3320      	adds	r3, #32
 80012c2:	443b      	add	r3, r7
 80012c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	3301      	adds	r3, #1
 80012ce:	3320      	adds	r3, #32
 80012d0:	443b      	add	r3, r7
 80012d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	865a      	strh	r2, [r3, #50]	; 0x32
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3302      	adds	r3, #2
 80012e6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P10 = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	3320      	adds	r3, #32
 80012ec:	443b      	add	r3, r7
 80012ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	3301      	adds	r3, #1
 80012fe:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P11 = (int8_t)((BMP390_CalibCoeff[cnt]));
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	3320      	adds	r3, #32
 8001304:	443b      	add	r3, r7
 8001306:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800130a:	b25a      	sxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	return true;
 8001312:	2301      	movs	r3, #1

}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <BMP390_Calc_PrcsdCalibrationCoeff>:

_Bool BMP390_Calc_PrcsdCalibrationCoeff(BMP390_HandleTypeDef *BMP390){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	BMP390->Prcsd_NVM.T1 = (BMP390->Raw_NVM.T1 / pow(2,-8));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8c1b      	ldrh	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f863 	bl	80003f4 <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <BMP390_Calc_PrcsdCalibrationCoeff+0x264>)
 8001334:	f7ff f9f2 	bl	800071c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fb72 	bl	8000a28 <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	639a      	str	r2, [r3, #56]	; 0x38
	BMP390->Prcsd_NVM.T2 = (BMP390->Raw_NVM.T2 / pow(2,30));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f850 	bl	80003f4 <__aeabi_i2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b8a      	ldr	r3, [pc, #552]	; (8001584 <BMP390_Calc_PrcsdCalibrationCoeff+0x268>)
 800135a:	f7ff f9df 	bl	800071c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fb5f 	bl	8000a28 <__aeabi_d2f>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c
	BMP390->Prcsd_NVM.T3 = (BMP390->Raw_NVM.T3 / pow(2,48));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f83c 	bl	80003f4 <__aeabi_i2d>
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b81      	ldr	r3, [pc, #516]	; (8001588 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001382:	f7ff f9cb 	bl	800071c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fb4b 	bl	8000a28 <__aeabi_d2f>
 8001392:	4602      	mov	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
	BMP390->Prcsd_NVM.P1 = ((BMP390->Raw_NVM.P1 - pow(2,14)) / pow(2,20));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f828 	bl	80003f4 <__aeabi_i2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b78      	ldr	r3, [pc, #480]	; (800158c <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013aa:	f7fe fed5 	bl	8000158 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b75      	ldr	r3, [pc, #468]	; (8001590 <BMP390_Calc_PrcsdCalibrationCoeff+0x274>)
 80013bc:	f7ff f9ae 	bl	800071c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fb2e 	bl	8000a28 <__aeabi_d2f>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
	BMP390->Prcsd_NVM.P2 = ((BMP390->Raw_NVM.P2 - pow(2,14)) / pow(2,29));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f80b 	bl	80003f4 <__aeabi_i2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013e4:	f7fe feb8 	bl	8000158 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b67      	ldr	r3, [pc, #412]	; (8001594 <BMP390_Calc_PrcsdCalibrationCoeff+0x278>)
 80013f6:	f7ff f991 	bl	800071c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb11 	bl	8000a28 <__aeabi_d2f>
 8001406:	4602      	mov	r2, r0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	649a      	str	r2, [r3, #72]	; 0x48
	BMP390->Prcsd_NVM.P3 = (BMP390->Raw_NVM.P3 / pow(2,32));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe ffee 	bl	80003f4 <__aeabi_i2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <BMP390_Calc_PrcsdCalibrationCoeff+0x27c>)
 800141e:	f7ff f97d 	bl	800071c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fafd 	bl	8000a28 <__aeabi_d2f>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
	BMP390->Prcsd_NVM.P4 = (BMP390->Raw_NVM.P4 / pow(2,37));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f993 302b 	ldrsb.w	r3, [r3, #43]	; 0x2b
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe ffda 	bl	80003f4 <__aeabi_i2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b55      	ldr	r3, [pc, #340]	; (800159c <BMP390_Calc_PrcsdCalibrationCoeff+0x280>)
 8001446:	f7ff f969 	bl	800071c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fae9 	bl	8000a28 <__aeabi_d2f>
 8001456:	4602      	mov	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	651a      	str	r2, [r3, #80]	; 0x50
	BMP390->Prcsd_NVM.P5 = (BMP390->Raw_NVM.P5 / pow(2,-3));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ffc7 	bl	80003f4 <__aeabi_i2d>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800146e:	f7ff f955 	bl	800071c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fad5 	bl	8000a28 <__aeabi_d2f>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
	BMP390->Prcsd_NVM.P6 = (BMP390->Raw_NVM.P6 / pow(2,6));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffb3 	bl	80003f4 <__aeabi_i2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <BMP390_Calc_PrcsdCalibrationCoeff+0x284>)
 8001494:	f7ff f942 	bl	800071c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fac2 	bl	8000a28 <__aeabi_d2f>
 80014a4:	4602      	mov	r2, r0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	659a      	str	r2, [r3, #88]	; 0x58
	BMP390->Prcsd_NVM.P7 = (BMP390->Raw_NVM.P7 / pow(2,8));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ff9f 	bl	80003f4 <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x288>)
 80014bc:	f7ff f92e 	bl	800071c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff faae 	bl	8000a28 <__aeabi_d2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	65da      	str	r2, [r3, #92]	; 0x5c
	BMP390->Prcsd_NVM.P8 = (BMP390->Raw_NVM.P8 / pow(2,15));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff8b 	bl	80003f4 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <BMP390_Calc_PrcsdCalibrationCoeff+0x28c>)
 80014e4:	f7ff f91a 	bl	800071c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fa9a 	bl	8000a28 <__aeabi_d2f>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	661a      	str	r2, [r3, #96]	; 0x60
	BMP390->Prcsd_NVM.P9 = (BMP390->Raw_NVM.P9 / pow(2,48));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff77 	bl	80003f4 <__aeabi_i2d>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 800150c:	f7ff f906 	bl	800071c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fa86 	bl	8000a28 <__aeabi_d2f>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	665a      	str	r2, [r3, #100]	; 0x64
	BMP390->Prcsd_NVM.P10 = (BMP390->Raw_NVM.P10 / pow(2,48));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff63 	bl	80003f4 <__aeabi_i2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001534:	f7ff f8f2 	bl	800071c <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fa72 	bl	8000a28 <__aeabi_d2f>
 8001544:	4602      	mov	r2, r0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	669a      	str	r2, [r3, #104]	; 0x68
	BMP390->Prcsd_NVM.P11 = (BMP390->Raw_NVM.P11 / pow(2,65));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff4f 	bl	80003f4 <__aeabi_i2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800155e:	f7ff f8dd 	bl	800071c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa5d 	bl	8000a28 <__aeabi_d2f>
 800156e:	4602      	mov	r2, r0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	66da      	str	r2, [r3, #108]	; 0x6c

	return true;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	3f700000 	.word	0x3f700000
 8001584:	41d00000 	.word	0x41d00000
 8001588:	42f00000 	.word	0x42f00000
 800158c:	40d00000 	.word	0x40d00000
 8001590:	41300000 	.word	0x41300000
 8001594:	41c00000 	.word	0x41c00000
 8001598:	41f00000 	.word	0x41f00000
 800159c:	42400000 	.word	0x42400000
 80015a0:	40500000 	.word	0x40500000
 80015a4:	40700000 	.word	0x40700000
 80015a8:	40e00000 	.word	0x40e00000

080015ac <BMP390_Set_DefaultParams>:

_Bool BMP390_Set_DefaultParams(BMP390_HandleTypeDef *BMP390){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	BMP390->Params.mode = BMP390_Mode_Normal;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	701a      	strb	r2, [r3, #0]
	BMP390->Params.stat_meas_press = Enable;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	715a      	strb	r2, [r3, #5]
	BMP390->Params.stat_meas_temp = Enable;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	719a      	strb	r2, [r3, #6]
	BMP390->Params.press_osrs = BMP390_Oversampling_X8 ;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	70da      	strb	r2, [r3, #3]
	BMP390->Params.temp_osrs= BMP390_Oversampling_X2 ;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	711a      	strb	r2, [r3, #4]
	BMP390->Params.filtercoef = BMP390_Filter_Coef_3;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	709a      	strb	r2, [r3, #2]
	BMP390->Params.odr = BMP390_ODR_50;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	705a      	strb	r2, [r3, #1]

	return true;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <BMP390_Get_SensorValues>:


_Bool BMP390_Get_SensorValues(BMP390_HandleTypeDef *BMP390, float *BMP390_Press,
							 float *BMP390_Temp,float *BMP390_VertAlt,
							 float *BMP390_VertAcc, float *BMP390_VertSpd,
							 float *BMP390_gForce){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b08c      	sub	sp, #48	; 0x30
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	603b      	str	r3, [r7, #0]

	uint32_t rawPress;
	uint32_t rawTemp;
	uint8_t MSB_LSB_XLSB_PT[6] = {0};
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	2300      	movs	r3, #0
 80015fe:	82bb      	strh	r3, [r7, #20]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_MSB_LSB_XLSB_PT, 1, &MSB_LSB_XLSB_PT[6], 6, 10000);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	69d8      	ldr	r0, [r3, #28]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8b19      	ldrh	r1, [r3, #24]
 8001608:	f242 7310 	movw	r3, #10000	; 0x2710
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2306      	movs	r3, #6
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	3306      	adds	r3, #6
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	2204      	movs	r2, #4
 800161e:	f001 f9b5 	bl	800298c <HAL_I2C_Mem_Read>

	rawPress = ((MSB_LSB_XLSB_PT[2])<<16)  | ((MSB_LSB_XLSB_PT[1])<<8) | ((MSB_LSB_XLSB_PT[0])<<0);
 8001622:	7cbb      	ldrb	r3, [r7, #18]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	7c7b      	ldrb	r3, [r7, #17]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	4313      	orrs	r3, r2
 800162c:	7c3a      	ldrb	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61fb      	str	r3, [r7, #28]
	rawTemp  = ((MSB_LSB_XLSB_PT[5])<<16)  | ((MSB_LSB_XLSB_PT[4])<<8) | ((MSB_LSB_XLSB_PT[3])<<0);
 8001632:	7d7b      	ldrb	r3, [r7, #21]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	7d3b      	ldrb	r3, [r7, #20]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	4313      	orrs	r3, r2
 800163c:	7cfa      	ldrb	r2, [r7, #19]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]


	*BMP390_Temp  	= BMP390_Calc_PrcsdTemp(BMP390,rawTemp);
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f81f 	bl	8001688 <BMP390_Calc_PrcsdTemp>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	601a      	str	r2, [r3, #0]
	*BMP390_Press 	= BMP390_Calc_PrcsdPress(BMP390,rawPress,BMP390_Temp);
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	69f9      	ldr	r1, [r7, #28]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f846 	bl	80016e6 <BMP390_Calc_PrcsdPress>
 800165a:	4602      	mov	r2, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	601a      	str	r2, [r3, #0]
	*BMP390_VertAlt = BMP390_Calc_VertAlt(BMP390, BMP390_Press);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f934 	bl	80018d0 <BMP390_Calc_VertAlt>
 8001668:	4602      	mov	r2, r0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	601a      	str	r2, [r3, #0]

	//Zaten her 1hz ile buraya girecek
	*BMP390_VertSpd = BMP390_Calc_VertSpd(BMP390, BMP390_VertAlt,BMP390_VertSpd);
 800166e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001670:	6839      	ldr	r1, [r7, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f9c4 	bl	8001a00 <BMP390_Calc_VertSpd>
 8001678:	4602      	mov	r2, r0
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	601a      	str	r2, [r3, #0]
	//*BMP390_VertAcc = BMP390_Calc_VertAcc();
	//*BMP390_gForce	= BMP390_Calc_gForce();


	return true;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <BMP390_Calc_PrcsdTemp>:


float BMP390_Calc_PrcsdTemp(BMP390_HandleTypeDef *BMP390, uint32_t rawTemp){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]

	float partial_data1;
	float partial_data2;


	partial_data1 = (float)(rawTemp - BMP390->Prcsd_NVM.T1);
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7ff face 	bl	8000c34 <__aeabi_ui2f>
 8001698:	4602      	mov	r2, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fa15 	bl	8000ad0 <__aeabi_fsub>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60fb      	str	r3, [r7, #12]
	partial_data2 = (float)(partial_data1 * BMP390->Prcsd_NVM.T2);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fb17 	bl	8000ce4 <__aeabi_fmul>
 80016b6:	4603      	mov	r3, r0
 80016b8:	60bb      	str	r3, [r7, #8]

	return (partial_data2 + (partial_data1 * partial_data1) * BMP390->Prcsd_NVM.T3);
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fb11 	bl	8000ce4 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fb09 	bl	8000ce4 <__aeabi_fmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f9fc 	bl	8000ad4 <__addsf3>
 80016dc:	4603      	mov	r3, r0

}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <BMP390_Calc_PrcsdPress>:

float BMP390_Calc_PrcsdPress(BMP390_HandleTypeDef *BMP390, uint32_t rawPress, float *BMP390_Temp){
 80016e6:	b590      	push	{r4, r7, lr}
 80016e8:	b08b      	sub	sp, #44	; 0x2c
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = BMP390->Prcsd_NVM.P6 * (*(BMP390_Temp));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff faf1 	bl	8000ce4 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P7 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fae5 	bl	8000ce4 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	4619      	mov	r1, r3
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fae0 	bl	8000ce4 <__aeabi_fmul>
 8001724:	4603      	mov	r3, r0
 8001726:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P8 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f7ff fad4 	bl	8000ce4 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f7ff facc 	bl	8000ce4 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fac7 	bl	8000ce4 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	61fb      	str	r3, [r7, #28]
	partial_out1 =  BMP390->Prcsd_NVM.P5 + partial_data1 + partial_data2 + partial_data3;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f9b7 	bl	8000ad4 <__addsf3>
 8001766:	4603      	mov	r3, r0
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f9b2 	bl	8000ad4 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	4619      	mov	r1, r3
 8001774:	69f8      	ldr	r0, [r7, #28]
 8001776:	f7ff f9ad 	bl	8000ad4 <__addsf3>
 800177a:	4603      	mov	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
	partial_data1 = BMP390->Prcsd_NVM.P2 * (*(BMP390_Temp));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff faab 	bl	8000ce4 <__aeabi_fmul>
 800178e:	4603      	mov	r3, r0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P3 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fa9f 	bl	8000ce4 <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff fa9a 	bl	8000ce4 <__aeabi_fmul>
 80017b0:	4603      	mov	r3, r0
 80017b2:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P4 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff fa8e 	bl	8000ce4 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f7ff fa86 	bl	8000ce4 <__aeabi_fmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fa81 	bl	8000ce4 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)rawPress * (BMP390->Prcsd_NVM.P1 + partial_data1 + partial_data2 + partial_data3);
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f7ff fa24 	bl	8000c34 <__aeabi_ui2f>
 80017ec:	4604      	mov	r4, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f96d 	bl	8000ad4 <__addsf3>
 80017fa:	4603      	mov	r3, r0
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f968 	bl	8000ad4 <__addsf3>
 8001804:	4603      	mov	r3, r0
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff f963 	bl	8000ad4 <__addsf3>
 800180e:	4603      	mov	r3, r0
 8001810:	4619      	mov	r1, r3
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff fa66 	bl	8000ce4 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	617b      	str	r3, [r7, #20]
	partial_data1 = (float)rawPress * (float)rawPress;
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	f7ff fa09 	bl	8000c34 <__aeabi_ui2f>
 8001822:	4604      	mov	r4, r0
 8001824:	68b8      	ldr	r0, [r7, #8]
 8001826:	f7ff fa05 	bl	8000c34 <__aeabi_ui2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4619      	mov	r1, r3
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff fa58 	bl	8000ce4 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P9 + BMP390->Prcsd_NVM.P10 * (*(BMP390_Temp));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f7ff fa4c 	bl	8000ce4 <__aeabi_fmul>
 800184c:	4603      	mov	r3, r0
 800184e:	4619      	mov	r1, r3
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff f93f 	bl	8000ad4 <__addsf3>
 8001856:	4603      	mov	r3, r0
 8001858:	623b      	str	r3, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 800185a:	6a39      	ldr	r1, [r7, #32]
 800185c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185e:	f7ff fa41 	bl	8000ce4 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	61fb      	str	r3, [r7, #28]
	partial_data4 = partial_data3 + ((float)rawPress * (float)rawPress * (float)rawPress) * BMP390->Prcsd_NVM.P11;
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f7ff f9e4 	bl	8000c34 <__aeabi_ui2f>
 800186c:	4604      	mov	r4, r0
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff f9e0 	bl	8000c34 <__aeabi_ui2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4619      	mov	r1, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fa33 	bl	8000ce4 <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	461c      	mov	r4, r3
 8001882:	68b8      	ldr	r0, [r7, #8]
 8001884:	f7ff f9d6 	bl	8000c34 <__aeabi_ui2f>
 8001888:	4603      	mov	r3, r0
 800188a:	4619      	mov	r1, r3
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff fa29 	bl	8000ce4 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f7ff fa21 	bl	8000ce4 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4619      	mov	r1, r3
 80018a6:	69f8      	ldr	r0, [r7, #28]
 80018a8:	f7ff f914 	bl	8000ad4 <__addsf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

	return partial_out1 + partial_out2 + partial_data4;
 80018b0:	6979      	ldr	r1, [r7, #20]
 80018b2:	69b8      	ldr	r0, [r7, #24]
 80018b4:	f7ff f90e 	bl	8000ad4 <__addsf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	6939      	ldr	r1, [r7, #16]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f909 	bl	8000ad4 <__addsf3>
 80018c2:	4603      	mov	r3, r0

}
 80018c4:	4618      	mov	r0, r3
 80018c6:	372c      	adds	r7, #44	; 0x2c
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}
 80018cc:	0000      	movs	r0, r0
	...

080018d0 <BMP390_Calc_VertAlt>:


float BMP390_Calc_VertAlt(BMP390_HandleTypeDef *BMP390, float *BMP390_Press){
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

	return (((SeaLevelTemp / GradientTemp)
			* (1 - pow((*BMP390_Press / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel))))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4920      	ldr	r1, [pc, #128]	; (8001960 <BMP390_Calc_VertAlt+0x90>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fab3 	bl	8000e4c <__aeabi_fdiv>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fd95 	bl	8000418 <__aeabi_f2d>
 80018ee:	a318      	add	r3, pc, #96	; (adr r3, 8001950 <BMP390_Calc_VertAlt+0x80>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f002 ffb2 	bl	800485c <pow>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	4918      	ldr	r1, [pc, #96]	; (8001964 <BMP390_Calc_VertAlt+0x94>)
 8001902:	f7fe fc29 	bl	8000158 <__aeabi_dsub>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	a312      	add	r3, pc, #72	; (adr r3, 8001958 <BMP390_Calc_VertAlt+0x88>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fdd8 	bl	80004c8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
			- (BMP390->FixedAltitude));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd76 	bl	8000418 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fc10 	bl	8000158 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f872 	bl	8000a28 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0

}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	a0829b73 	.word	0xa0829b73
 8001954:	3fc85a7a 	.word	0x3fc85a7a
 8001958:	9d89d89d 	.word	0x9d89d89d
 800195c:	40e5a558 	.word	0x40e5a558
 8001960:	47c5e680 	.word	0x47c5e680
 8001964:	3ff00000 	.word	0x3ff00000

08001968 <BMP390_Calc_TemporaryAltitude>:


float BMP390_Calc_TemporaryAltitude(BMP390_HandleTypeDef *BMP390, float *BMP390_VertAlt){
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]

	 float tempAltitude = 0;
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	e025      	b.n	80019ca <BMP390_Calc_TemporaryAltitude+0x62>

		 BMP390_Get_SensorValues(BMP390, &BMP390_Press,
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <BMP390_Calc_TemporaryAltitude+0x80>)
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <BMP390_Calc_TemporaryAltitude+0x84>)
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <BMP390_Calc_TemporaryAltitude+0x88>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <BMP390_Calc_TemporaryAltitude+0x8c>)
 800198e:	491a      	ldr	r1, [pc, #104]	; (80019f8 <BMP390_Calc_TemporaryAltitude+0x90>)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fe2a 	bl	80015ea <BMP390_Get_SensorValues>
			  		  	  	  	 &BMP390_Temp, BMP390_VertAlt,
			  					 &BMP390_VertAcc, &BMP390_VertSpd,
			  					 &BMP390_gForce);

		 tempAltitude = (float)(tempAltitude + (float)((*BMP390_VertAlt) * (0.05)));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fd3c 	bl	8000418 <__aeabi_f2d>
 80019a0:	a30f      	add	r3, pc, #60	; (adr r3, 80019e0 <BMP390_Calc_TemporaryAltitude+0x78>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fd8f 	bl	80004c8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f839 	bl	8000a28 <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4619      	mov	r1, r3
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff f88a 	bl	8000ad4 <__addsf3>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b13      	cmp	r3, #19
 80019ce:	ddd6      	ble.n	800197e <BMP390_Calc_TemporaryAltitude+0x16>

	  }

	 HAL_TIM_Base_Start_IT(&htim1);
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <BMP390_Calc_TemporaryAltitude+0x94>)
 80019d2:	f002 fb71 	bl	80040b8 <HAL_TIM_Base_Start_IT>

	 return tempAltitude;
 80019d6:	68fb      	ldr	r3, [r7, #12]

}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	9999999a 	.word	0x9999999a
 80019e4:	3fa99999 	.word	0x3fa99999
 80019e8:	200001e0 	.word	0x200001e0
 80019ec:	200001dc 	.word	0x200001dc
 80019f0:	200001d8 	.word	0x200001d8
 80019f4:	200001d0 	.word	0x200001d0
 80019f8:	200001cc 	.word	0x200001cc
 80019fc:	200000e0 	.word	0x200000e0

08001a00 <BMP390_Calc_VertSpd>:


//Yükseklik değişimi ile hız hesabı,// V = (X1 - X0)/gerçek 1 saniye hızı verecek
float BMP390_Calc_VertSpd(BMP390_HandleTypeDef *BMP390, float *BMP390_VertAlt, float *BMP390_VertSpd){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]

	BMP390->DeltaData.alt1 = (*BMP390_VertAlt);//gelen irtifa  verisini x1 e at
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	675a      	str	r2, [r3, #116]	; 0x74
	(*BMP390_VertSpd) 	   = (BMP390->DeltaData.alt1 - BMP390->DeltaData.alt0); // Verilerin farkını al ve hız değeri elde et
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7ff f856 	bl	8000ad0 <__aeabi_fsub>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
	BMP390->DeltaData.alt0 = BMP390->DeltaData.alt1; // artık yeni konum x0 x1'İn değerini alarak bir basamak daha çıktı
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	671a      	str	r2, [r3, #112]	; 0x70

}
 8001a34:	bf00      	nop
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a46:	f000 fa5f 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4a:	f000 f831 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4e:	f000 f8eb 	bl	8001c28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a52:	f000 f869 	bl	8001b28 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a56:	f000 f895 	bl	8001b84 <MX_TIM1_Init>

  /**
   * Ref_Alt_Sel is a selection;  For 'm' : it sets the reference altitude to the current location (0 meters)
   * 							  For 'M' : it sets the reference altitude to sea level
   */
  BMP390.BMP390_I2C_ADDRESS = BMP390_I2C_ADDRESS_L;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <main+0x50>)
 8001a5c:	2276      	movs	r2, #118	; 0x76
 8001a5e:	831a      	strh	r2, [r3, #24]
  BMP390.i2c = &hi2c1;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <main+0x50>)
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <main+0x54>)
 8001a64:	61da      	str	r2, [r3, #28]
  BMP390.Ref_Alt_Sel = 'm';
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <main+0x50>)
 8001a68:	226d      	movs	r2, #109	; 0x6d
 8001a6a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
  BMP390_Init(&BMP390);
 8001a6e:	4808      	ldr	r0, [pc, #32]	; (8001a90 <main+0x50>)
 8001a70:	f7ff fa88 	bl	8000f84 <BMP390_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <main+0x58>)
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <main+0x5c>)
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <main+0x60>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <main+0x64>)
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <main+0x68>)
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <main+0x6c>)
 8001a86:	4802      	ldr	r0, [pc, #8]	; (8001a90 <main+0x50>)
 8001a88:	f7ff fdaf 	bl	80015ea <BMP390_Get_SensorValues>
 8001a8c:	e7f2      	b.n	8001a74 <main+0x34>
 8001a8e:	bf00      	nop
 8001a90:	20000128 	.word	0x20000128
 8001a94:	2000008c 	.word	0x2000008c
 8001a98:	200001e0 	.word	0x200001e0
 8001a9c:	200001dc 	.word	0x200001dc
 8001aa0:	200001d8 	.word	0x200001d8
 8001aa4:	200001d4 	.word	0x200001d4
 8001aa8:	200001d0 	.word	0x200001d0
 8001aac:	200001cc 	.word	0x200001cc

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b090      	sub	sp, #64	; 0x40
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2228      	movs	r2, #40	; 0x28
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe9a 	bl	80047f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ada:	2310      	movs	r3, #16
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fe9a 	bl	8003820 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001af2:	f000 f8f1 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f908 	bl	8003d24 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b1a:	f000 f8dd 	bl	8001cd8 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3740      	adds	r7, #64	; 0x40
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <MX_I2C1_Init+0x54>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x58>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b66:	f000 fcd3 	bl	8002510 <HAL_I2C_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b70:	f000 f8b2 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000008c 	.word	0x2000008c
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	000186a0 	.word	0x000186a0

08001b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <MX_TIM1_Init+0xa0>)
 8001ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001ba8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bce:	4814      	ldr	r0, [pc, #80]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bd0:	f002 fa22 	bl	8004018 <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bda:	f000 f87d 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001bec:	f002 fbb8 	bl	8004360 <HAL_TIM_ConfigClockSource>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bf6:	f000 f86f 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM1_Init+0x9c>)
 8001c08:	f002 fd8c 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c12:	f000 f861 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000e0 	.word	0x200000e0
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <MX_GPIO_Init+0xac>)
 8001ca4:	f000 fc1c 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_GPIO_Init+0xac>)
 8001cc2:	f000 fa91 	bl	80021e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40011000 	.word	0x40011000

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x60>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_MspInit+0x60>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d125      	bne.n	8001db4 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <HAL_I2C_MspInit+0x7c>)
 8001d98:	f000 fa26 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da6:	61d3      	str	r3, [r2, #28]
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_TIM_Base_MspInit+0x44>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d113      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2019      	movs	r0, #25
 8001df8:	f000 f9bf 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001dfc:	2019      	movs	r0, #25
 8001dfe:	f000 f9d8 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40021000 	.word	0x40021000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f89b 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//İvme , hız , g kuvveti hesaplamak için saniyede 1 kez buraya gelecek
	BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <TIM1_UP_IRQHandler+0x2c>)
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <TIM1_UP_IRQHandler+0x30>)
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <TIM1_UP_IRQHandler+0x34>)
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <TIM1_UP_IRQHandler+0x38>)
 8001e78:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <TIM1_UP_IRQHandler+0x3c>)
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <TIM1_UP_IRQHandler+0x40>)
 8001e7c:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <TIM1_UP_IRQHandler+0x44>)
 8001e7e:	f7ff fbb4 	bl	80015ea <BMP390_Get_SensorValues>
			  		  	  	&BMP390_Temp, &BMP390_VertAlt,
			  				&BMP390_VertAcc, &BMP390_VertSpd,
			  				&BMP390_gForce);

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <TIM1_UP_IRQHandler+0x48>)
 8001e84:	f002 f964 	bl	8004150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001e0 	.word	0x200001e0
 8001e94:	200001dc 	.word	0x200001dc
 8001e98:	200001d8 	.word	0x200001d8
 8001e9c:	200001d4 	.word	0x200001d4
 8001ea0:	200001d0 	.word	0x200001d0
 8001ea4:	200001cc 	.word	0x200001cc
 8001ea8:	20000128 	.word	0x20000128
 8001eac:	200000e0 	.word	0x200000e0

08001eb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff fff8 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ec2:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed8:	4c09      	ldr	r4, [pc, #36]	; (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f002 fc95 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eea:	f7ff fda9 	bl	8001a40 <main>
  bx lr
 8001eee:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ef8:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8001efc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f00:	20000320 	.word	0x20000320

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f923 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fede 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f93b 	bl	80021ce <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 f903 	bl	800217a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	200001e4 	.word	0x200001e4

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	200001e4 	.word	0x200001e4

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4906      	ldr	r1, [pc, #24]	; (8002064 <__NVIC_EnableIRQ+0x34>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff90 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff2d 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff42 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff90 	bl	80020bc <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5f 	bl	8002068 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff35 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b08b      	sub	sp, #44	; 0x2c
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	e161      	b.n	80024c0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021fc:	2201      	movs	r2, #1
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8150 	bne.w	80024ba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a97      	ldr	r2, [pc, #604]	; (800247c <HAL_GPIO_Init+0x294>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d05e      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002224:	4a95      	ldr	r2, [pc, #596]	; (800247c <HAL_GPIO_Init+0x294>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d875      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800222a:	4a95      	ldr	r2, [pc, #596]	; (8002480 <HAL_GPIO_Init+0x298>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d058      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002230:	4a93      	ldr	r2, [pc, #588]	; (8002480 <HAL_GPIO_Init+0x298>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d86f      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002236:	4a93      	ldr	r2, [pc, #588]	; (8002484 <HAL_GPIO_Init+0x29c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d052      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 800223c:	4a91      	ldr	r2, [pc, #580]	; (8002484 <HAL_GPIO_Init+0x29c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d869      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002242:	4a91      	ldr	r2, [pc, #580]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04c      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002248:	4a8f      	ldr	r2, [pc, #572]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d863      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800224e:	4a8f      	ldr	r2, [pc, #572]	; (800248c <HAL_GPIO_Init+0x2a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d046      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002254:	4a8d      	ldr	r2, [pc, #564]	; (800248c <HAL_GPIO_Init+0x2a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d85d      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800225a:	2b12      	cmp	r3, #18
 800225c:	d82a      	bhi.n	80022b4 <HAL_GPIO_Init+0xcc>
 800225e:	2b12      	cmp	r3, #18
 8002260:	d859      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <HAL_GPIO_Init+0x80>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	080022e3 	.word	0x080022e3
 800226c:	080022bd 	.word	0x080022bd
 8002270:	080022cf 	.word	0x080022cf
 8002274:	08002311 	.word	0x08002311
 8002278:	08002317 	.word	0x08002317
 800227c:	08002317 	.word	0x08002317
 8002280:	08002317 	.word	0x08002317
 8002284:	08002317 	.word	0x08002317
 8002288:	08002317 	.word	0x08002317
 800228c:	08002317 	.word	0x08002317
 8002290:	08002317 	.word	0x08002317
 8002294:	08002317 	.word	0x08002317
 8002298:	08002317 	.word	0x08002317
 800229c:	08002317 	.word	0x08002317
 80022a0:	08002317 	.word	0x08002317
 80022a4:	08002317 	.word	0x08002317
 80022a8:	08002317 	.word	0x08002317
 80022ac:	080022c5 	.word	0x080022c5
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	4a76      	ldr	r2, [pc, #472]	; (8002490 <HAL_GPIO_Init+0x2a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ba:	e02c      	b.n	8002316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e029      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	3304      	adds	r3, #4
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e024      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e01f      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	330c      	adds	r3, #12
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e01a      	b.n	8002318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ea:	2304      	movs	r3, #4
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e013      	b.n	8002318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	611a      	str	r2, [r3, #16]
          break;
 8002302:	e009      	b.n	8002318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002304:	2308      	movs	r3, #8
 8002306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	615a      	str	r2, [r3, #20]
          break;
 800230e:	e003      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x130>
          break;
 8002316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d801      	bhi.n	8002322 <HAL_GPIO_Init+0x13a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e001      	b.n	8002326 <HAL_GPIO_Init+0x13e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d802      	bhi.n	8002334 <HAL_GPIO_Init+0x14c>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x152>
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3b08      	subs	r3, #8
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	210f      	movs	r1, #15
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	6a39      	ldr	r1, [r7, #32]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a9 	beq.w	80024ba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002380:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3d      	ldr	r2, [pc, #244]	; (800249c <HAL_GPIO_Init+0x2b4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <HAL_GPIO_Init+0x2b8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1dc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_GPIO_Init+0x2bc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1d8>
 80023bc:	2302      	movs	r3, #2
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c8:	2300      	movs	r3, #0
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023da:	492f      	ldr	r1, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	492b      	ldr	r1, [pc, #172]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4927      	ldr	r1, [pc, #156]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800240c:	4013      	ands	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4921      	ldr	r1, [pc, #132]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	491d      	ldr	r1, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002434:	4013      	ands	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4917      	ldr	r1, [pc, #92]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4913      	ldr	r1, [pc, #76]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	490d      	ldr	r1, [pc, #52]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e01f      	b.n	80024ba <HAL_GPIO_Init+0x2d2>
 800247a:	bf00      	nop
 800247c:	10320000 	.word	0x10320000
 8002480:	10310000 	.word	0x10310000
 8002484:	10220000 	.word	0x10220000
 8002488:	10210000 	.word	0x10210000
 800248c:	10120000 	.word	0x10120000
 8002490:	10110000 	.word	0x10110000
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_GPIO_Init+0x2f4>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4909      	ldr	r1, [pc, #36]	; (80024dc <HAL_GPIO_Init+0x2f4>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f ae96 	bne.w	80021fc <HAL_GPIO_Init+0x14>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	372c      	adds	r7, #44	; 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e12b      	b.n	800277a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fc06 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002574:	f001 fd1e 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a81      	ldr	r2, [pc, #516]	; (8002784 <HAL_I2C_Init+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d807      	bhi.n	8002594 <HAL_I2C_Init+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_I2C_Init+0x278>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e006      	b.n	80025a2 <HAL_I2C_Init+0x92>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_I2C_Init+0x27c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0e7      	b.n	800277a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a78      	ldr	r2, [pc, #480]	; (8002790 <HAL_I2C_Init+0x280>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_I2C_Init+0x274>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d802      	bhi.n	80025e4 <HAL_I2C_Init+0xd4>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3301      	adds	r3, #1
 80025e2:	e009      	b.n	80025f8 <HAL_I2C_Init+0xe8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	4a69      	ldr	r2, [pc, #420]	; (8002794 <HAL_I2C_Init+0x284>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	495c      	ldr	r1, [pc, #368]	; (8002784 <HAL_I2C_Init+0x274>)
 8002614:	428b      	cmp	r3, r1
 8002616:	d819      	bhi.n	800264c <HAL_I2C_Init+0x13c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e59      	subs	r1, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb1 f3f3 	udiv	r3, r1, r3
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800262c:	400b      	ands	r3, r1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_I2C_Init+0x138>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e59      	subs	r1, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	e051      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 8002648:	2304      	movs	r3, #4
 800264a:	e04f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <HAL_I2C_Init+0x168>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e012      	b.n	800269e <HAL_I2C_Init+0x18e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x196>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <HAL_I2C_Init+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e58      	subs	r0, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	440b      	add	r3, r1
 80026bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	6809      	ldr	r1, [r1, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6911      	ldr	r1, [r2, #16]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	000186a0 	.word	0x000186a0
 8002788:	001e847f 	.word	0x001e847f
 800278c:	003d08ff 	.word	0x003d08ff
 8002790:	431bde83 	.word	0x431bde83
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b2:	f7ff fc01 	bl	8001fb8 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	f040 80d9 	bne.w	8002978 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2319      	movs	r3, #25
 80027cc:	2201      	movs	r2, #1
 80027ce:	496d      	ldr	r1, [pc, #436]	; (8002984 <HAL_I2C_Mem_Write+0x1ec>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fdef 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	e0cc      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Mem_Write+0x56>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0c5      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d007      	beq.n	8002814 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2221      	movs	r2, #33	; 0x21
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a4d      	ldr	r2, [pc, #308]	; (8002988 <HAL_I2C_Mem_Write+0x1f0>)
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002856:	88f8      	ldrh	r0, [r7, #6]
 8002858:	893a      	ldrh	r2, [r7, #8]
 800285a:	8979      	ldrh	r1, [r7, #10]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4603      	mov	r3, r0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fc26 	bl	80030b8 <I2C_RequestMemoryWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d052      	beq.n	8002918 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e081      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 feb4 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d107      	bne.n	800289e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06b      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11b      	bne.n	8002918 <HAL_I2C_Mem_Write+0x180>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1aa      	bne.n	8002876 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fea7 	bl	8003678 <I2C_WaitOnBTFFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e016      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	00100002 	.word	0x00100002
 8002988:	ffff0000 	.word	0xffff0000

0800298c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	; 0x30
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029aa:	f7ff fb05 	bl	8001fb8 <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	f040 8244 	bne.w	8002e46 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2319      	movs	r3, #25
 80029c4:	2201      	movs	r2, #1
 80029c6:	4982      	ldr	r1, [pc, #520]	; (8002bd0 <HAL_I2C_Mem_Read+0x244>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fcf3 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	e237      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Mem_Read+0x5a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e230      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d007      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2222      	movs	r2, #34	; 0x22
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a62      	ldr	r2, [pc, #392]	; (8002bd4 <HAL_I2C_Mem_Read+0x248>)
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a4e:	88f8      	ldrh	r0, [r7, #6]
 8002a50:	893a      	ldrh	r2, [r7, #8]
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fbc0 	bl	80031e4 <I2C_RequestMemoryRead>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1ec      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d113      	bne.n	8002a9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e1c0      	b.n	8002e20 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11e      	bne.n	8002ae4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab6:	b672      	cpsid	i
}
 8002ab8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae0:	b662      	cpsie	i
}
 8002ae2:	e035      	b.n	8002b50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11e      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
}
 8002afe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b26:	b662      	cpsie	i
}
 8002b28:	e012      	b.n	8002b50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b50:	e166      	b.n	8002e20 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	f200 811f 	bhi.w	8002d9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d123      	bne.n	8002bac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fdcd 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e167      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002baa:	e139      	b.n	8002e20 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d152      	bne.n	8002c5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_I2C_Mem_Read+0x24c>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fbf8 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e13c      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
 8002bce:	bf00      	nop
 8002bd0:	00100002 	.word	0x00100002
 8002bd4:	ffff0000 	.word	0xffff0000
 8002bd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c22:	b662      	cpsie	i
}
 8002c24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e0e2      	b.n	8002e20 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	2200      	movs	r2, #0
 8002c62:	497b      	ldr	r1, [pc, #492]	; (8002e50 <HAL_I2C_Mem_Read+0x4c4>)
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fba5 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0e9      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_I2C_Mem_Read+0x4c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_I2C_Mem_Read+0x4cc>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a1a      	lsrs	r2, r3, #8
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00da      	lsls	r2, r3, #3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d118      	bne.n	8002d12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d02:	b662      	cpsie	i
}
 8002d04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e09a      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d1d9      	bne.n	8002cd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d62:	b662      	cpsie	i
}
 8002d64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d98:	e042      	b.n	8002e20 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fcb2 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e04c      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d118      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f ae94 	bne.w	8002b52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	00010004 	.word	0x00010004
 8002e54:	20000000 	.word	0x20000000
 8002e58:	14f8b589 	.word	0x14f8b589

08002e5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff f8a4 	bl	8001fb8 <HAL_GetTick>
 8002e70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	f040 8111 	bne.w	80030a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2319      	movs	r3, #25
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4988      	ldr	r1, [pc, #544]	; (80030b0 <HAL_I2C_IsDeviceReady+0x254>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa90 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e104      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_I2C_IsDeviceReady+0x50>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0fd      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d007      	beq.n	8002ed2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2224      	movs	r2, #36	; 0x24
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a70      	ldr	r2, [pc, #448]	; (80030b4 <HAL_I2C_IsDeviceReady+0x258>)
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa4e 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2c:	d103      	bne.n	8002f36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e0b6      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f835 	bl	8001fb8 <HAL_GetTick>
 8002f4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f7e:	e025      	b.n	8002fcc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7ff f81a 	bl	8001fb8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <HAL_I2C_IsDeviceReady+0x13a>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	22a0      	movs	r2, #160	; 0xa0
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_I2C_IsDeviceReady+0x188>
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_I2C_IsDeviceReady+0x188>
 8002fde:	7dbb      	ldrb	r3, [r7, #22]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0cd      	beq.n	8002f80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d129      	bne.n	800304e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2319      	movs	r3, #25
 8003026:	2201      	movs	r2, #1
 8003028:	4921      	ldr	r1, [pc, #132]	; (80030b0 <HAL_I2C_IsDeviceReady+0x254>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9c2 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e036      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e02c      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003066:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2319      	movs	r3, #25
 800306e:	2201      	movs	r2, #1
 8003070:	490f      	ldr	r1, [pc, #60]	; (80030b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f99e 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e012      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3301      	adds	r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	f4ff af32 	bcc.w	8002ef6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	00100002 	.word	0x00100002
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f960 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d103      	bne.n	8003112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e05f      	b.n	80031d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	492d      	ldr	r1, [pc, #180]	; (80031e0 <I2C_RequestMemoryWrite+0x128>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f9bb 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e04c      	b.n	80031d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	6a39      	ldr	r1, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa46 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b04      	cmp	r3, #4
 8003168:	d107      	bne.n	800317a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02b      	b.n	80031d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d105      	bne.n	8003190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003184:	893b      	ldrh	r3, [r7, #8]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]
 800318e:	e021      	b.n	80031d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003190:	893b      	ldrh	r3, [r7, #8]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	b29b      	uxth	r3, r3
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	6a39      	ldr	r1, [r7, #32]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa20 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d107      	bne.n	80031c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e005      	b.n	80031d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ca:	893b      	ldrh	r3, [r7, #8]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00010002 	.word	0x00010002

080031e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	460b      	mov	r3, r1
 80031f8:	813b      	strh	r3, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2200      	movs	r2, #0
 8003226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f8c2 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d103      	bne.n	800324e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0aa      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	4952      	ldr	r1, [pc, #328]	; (80033b0 <I2C_RequestMemoryRead+0x1cc>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f91d 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e097      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f9a8 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e076      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e021      	b.n	8003310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f982 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e050      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f967 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e035      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2200      	movs	r2, #0
 8003354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f82b 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d103      	bne.n	800337c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e013      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003380:	897b      	ldrh	r3, [r7, #10]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	4906      	ldr	r1, [pc, #24]	; (80033b0 <I2C_RequestMemoryRead+0x1cc>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f886 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00010002 	.word	0x00010002

080033b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c4:	e048      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d044      	beq.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe fdf3 	bl	8001fb8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d139      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	e00c      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x70>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d116      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e023      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10d      	bne.n	800347e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	e00c      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	429a      	cmp	r2, r3
 800349c:	d093      	beq.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b6:	e071      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d123      	bne.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e067      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d041      	beq.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003518:	f7fe fd4e 	bl	8001fb8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d302      	bcc.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d136      	bne.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e00b      	b.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e021      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10c      	bne.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e00b      	b.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f af6d 	bne.w	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f8e3 	bl	80037c2 <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e034      	b.n	8003670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fcd3 	bl	8001fb8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11d      	bne.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b80      	cmp	r3, #128	; 0x80
 8003630:	d016      	beq.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d1c3      	bne.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f89b 	bl	80037c2 <I2C_IsAcknowledgeFailed>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e034      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d028      	beq.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fc8b 	bl	8001fb8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11d      	bne.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d016      	beq.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d1c3      	bne.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003714:	e049      	b.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d119      	bne.n	8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e030      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fc2e 	bl	8001fb8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11d      	bne.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d016      	beq.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e007      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d1ae      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d8:	d11b      	bne.n	8003812 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0204 	orr.w	r2, r3, #4
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
	...

08003820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e272      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003840:	4b92      	ldr	r3, [pc, #584]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b04      	cmp	r3, #4
 800384a:	d00c      	beq.n	8003866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800384c:	4b8f      	ldr	r3, [pc, #572]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
 8003858:	4b8c      	ldr	r3, [pc, #560]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b89      	ldr	r3, [pc, #548]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06c      	beq.n	800394c <HAL_RCC_OscConfig+0x12c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d168      	bne.n	800394c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e24c      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x76>
 8003888:	4b80      	ldr	r3, [pc, #512]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7f      	ldr	r2, [pc, #508]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b7b      	ldr	r3, [pc, #492]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7a      	ldr	r2, [pc, #488]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0xbc>
 80038c2:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a71      	ldr	r2, [pc, #452]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6e      	ldr	r2, [pc, #440]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038dc:	4b6b      	ldr	r3, [pc, #428]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a67      	ldr	r2, [pc, #412]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb5c 	bl	8001fb8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fb58 	bl	8001fb8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e200      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xe4>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe fb48 	bl	8001fb8 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe fb44 	bl	8001fb8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1ec      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x10c>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395a:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003966:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x18c>
 8003972:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x176>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1c0      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4939      	ldr	r1, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fe fafd 	bl	8001fb8 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe faf9 	bl	8001fb8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1a1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4927      	ldr	r1, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe fadc 	bl	8001fb8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe fad8 	bl	8001fb8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e180      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d03a      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d019      	beq.n	8003a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fabc 	bl	8001fb8 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe fab8 	bl	8001fb8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e160      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a62:	2001      	movs	r0, #1
 8003a64:	f000 faba 	bl	8003fdc <RCC_Delay>
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe faa2 	bl	8001fb8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a76:	e00f      	b.n	8003a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe fa9e 	bl	8001fb8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d908      	bls.n	8003a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e146      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	42420000 	.word	0x42420000
 8003a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	4b92      	ldr	r3, [pc, #584]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e9      	bne.n	8003a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a6 	beq.w	8003bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10d      	bne.n	8003ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4a87      	ldr	r2, [pc, #540]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	61d3      	str	r3, [r2, #28]
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7e      	ldr	r2, [pc, #504]	; (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fa5f 	bl	8001fb8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fe fa5b 	bl	8001fb8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	; 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e103      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b75      	ldr	r3, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x312>
 8003b24:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	e02d      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a66      	ldr	r2, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	e01c      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_OscConfig+0x356>
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a60      	ldr	r2, [pc, #384]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6213      	str	r3, [r2, #32]
 8003b74:	e00b      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a57      	ldr	r2, [pc, #348]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7fe fa0f 	bl	8001fb8 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe fa0b 	bl	8001fb8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0b1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ee      	beq.n	8003b9e <HAL_RCC_OscConfig+0x37e>
 8003bc0:	e014      	b.n	8003bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe f9f9 	bl	8001fb8 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe f9f5 	bl	8001fb8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e09b      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b3c      	ldr	r3, [pc, #240]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8087 	beq.w	8003d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d061      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d146      	bne.n	8003caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe f9c9 	bl	8001fb8 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe f9c5 	bl	8001fb8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e06d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c50:	d108      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4921      	ldr	r1, [pc, #132]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c64:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a19      	ldr	r1, [r3, #32]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	430b      	orrs	r3, r1
 8003c76:	491b      	ldr	r1, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe f999 	bl	8001fb8 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fe f995 	bl	8001fb8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x46a>
 8003ca8:	e035      	b.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f982 	bl	8001fb8 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe f97e 	bl	8001fb8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e026      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x498>
 8003cd6:	e01e      	b.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e019      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_OscConfig+0x500>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000

08003d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d0      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d910      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 0207 	bic.w	r2, r3, #7
 8003d4e:	4965      	ldr	r1, [pc, #404]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d040      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e073      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4936      	ldr	r1, [pc, #216]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fe f8d0 	bl	8001fb8 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe f8cc 	bl	8001fb8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e053      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	; (8003eec <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f82e 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08005688 	.word	0x08005688
 8003ef0:	20000000 	.word	0x20000000
 8003ef4:	20000004 	.word	0x20000004

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x30>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x36>
 8003f26:	e027      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f2a:	613b      	str	r3, [r7, #16]
      break;
 8003f2c:	e027      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0c9b      	lsrs	r3, r3, #18
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f38:	5cd3      	ldrb	r3, [r2, r3]
 8003f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d010      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	0c5b      	lsrs	r3, r3, #17
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f5a:	fb03 f202 	mul.w	r2, r3, r2
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e004      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	613b      	str	r3, [r7, #16]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	613b      	str	r3, [r7, #16]
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	693b      	ldr	r3, [r7, #16]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	080056a0 	.word	0x080056a0
 8003f98:	080056b0 	.word	0x080056b0
 8003f9c:	003d0900 	.word	0x003d0900

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb8:	f7ff fff2 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08005698 	.word	0x08005698

08003fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <RCC_Delay+0x34>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <RCC_Delay+0x38>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0a5b      	lsrs	r3, r3, #9
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ff8:	bf00      	nop
  }
  while (Delay --);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	60fa      	str	r2, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <RCC_Delay+0x1c>
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	20000000 	.word	0x20000000
 8004014:	10624dd3 	.word	0x10624dd3

08004018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e041      	b.n	80040ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd fec2 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f000 fa76 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e035      	b.n	800413c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIM_Base_Start_IT+0x90>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIM_Base_Start_IT+0x4e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d004      	beq.n	8004106 <HAL_TIM_Base_Start_IT+0x4e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_TIM_Base_Start_IT+0x94>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b06      	cmp	r3, #6
 8004116:	d010      	beq.n	800413a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	e007      	b.n	800413a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400

08004150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0202 	mvn.w	r2, #2
 800417c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9bd 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9b0 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f9bf 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0204 	mvn.w	r2, #4
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f993 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f986 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f995 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0208 	mvn.w	r2, #8
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f969 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f95c 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f96b 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0210 	mvn.w	r2, #16
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2208      	movs	r2, #8
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f93f 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f932 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f941 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10e      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0201 	mvn.w	r2, #1
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f90d 	bl	80044ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d10e      	bne.n	8004300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d107      	bne.n	8004300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa73 	bl	80047e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f905 	bl	8004536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b20      	cmp	r3, #32
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b20      	cmp	r3, #32
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0220 	mvn.w	r2, #32
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa3e 	bl	80047d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIM_ConfigClockSource+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e0b4      	b.n	80044e6 <HAL_TIM_ConfigClockSource+0x186>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800439a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b4:	d03e      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0xd4>
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ba:	f200 8087 	bhi.w	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c2:	f000 8086 	beq.w	80044d2 <HAL_TIM_ConfigClockSource+0x172>
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	d87f      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b70      	cmp	r3, #112	; 0x70
 80043ce:	d01a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xa6>
 80043d0:	2b70      	cmp	r3, #112	; 0x70
 80043d2:	d87b      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d050      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x11a>
 80043d8:	2b60      	cmp	r3, #96	; 0x60
 80043da:	d877      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b50      	cmp	r3, #80	; 0x50
 80043de:	d03c      	beq.n	800445a <HAL_TIM_ConfigClockSource+0xfa>
 80043e0:	2b50      	cmp	r3, #80	; 0x50
 80043e2:	d873      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d058      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x13a>
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d86f      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b30      	cmp	r3, #48	; 0x30
 80043ee:	d064      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 80043f0:	2b30      	cmp	r3, #48	; 0x30
 80043f2:	d86b      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d060      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d867      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05c      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 8004400:	2b10      	cmp	r3, #16
 8004402:	d05a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 8004404:	e062      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004416:	f000 f966 	bl	80046e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	609a      	str	r2, [r3, #8]
      break;
 8004432:	e04f      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004444:	f000 f94f 	bl	80046e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004456:	609a      	str	r2, [r3, #8]
      break;
 8004458:	e03c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004466:	461a      	mov	r2, r3
 8004468:	f000 f8c6 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2150      	movs	r1, #80	; 0x50
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f91d 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8004478:	e02c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004486:	461a      	mov	r2, r3
 8004488:	f000 f8e4 	bl	8004654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2160      	movs	r1, #96	; 0x60
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f90d 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8004498:	e01c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 f8a6 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2140      	movs	r1, #64	; 0x40
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8fd 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 f8f4 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <TIM_Base_SetConfig+0xa8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x28>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x28>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <TIM_Base_SetConfig+0xac>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <TIM_Base_SetConfig+0xa8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x52>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x52>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <TIM_Base_SetConfig+0xac>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <TIM_Base_SetConfig+0xa8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400

080045f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0201 	bic.w	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 030a 	bic.w	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0210 	bic.w	r2, r3, #16
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	031b      	lsls	r3, r3, #12
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004690:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f043 0307 	orr.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	021a      	lsls	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	431a      	orrs	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	609a      	str	r2, [r3, #8]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e041      	b.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d004      	beq.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10c      	bne.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40000400 	.word	0x40000400

080047d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <memset>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	4402      	add	r2, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <__errno>:
 8004808:	4b01      	ldr	r3, [pc, #4]	; (8004810 <__errno+0x8>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000058 	.word	0x20000058

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	2600      	movs	r6, #0
 8004818:	4d0c      	ldr	r5, [pc, #48]	; (800484c <__libc_init_array+0x38>)
 800481a:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <__libc_init_array+0x3c>)
 800481c:	1b64      	subs	r4, r4, r5
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	f000 ff22 	bl	800566c <_init>
 8004828:	2600      	movs	r6, #0
 800482a:	4d0a      	ldr	r5, [pc, #40]	; (8004854 <__libc_init_array+0x40>)
 800482c:	4c0a      	ldr	r4, [pc, #40]	; (8004858 <__libc_init_array+0x44>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	080056e8 	.word	0x080056e8
 8004850:	080056e8 	.word	0x080056e8
 8004854:	080056e8 	.word	0x080056e8
 8004858:	080056ec 	.word	0x080056ec

0800485c <pow>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	4680      	mov	r8, r0
 8004866:	4689      	mov	r9, r1
 8004868:	f000 f866 	bl	8004938 <__ieee754_pow>
 800486c:	4622      	mov	r2, r4
 800486e:	4606      	mov	r6, r0
 8004870:	460f      	mov	r7, r1
 8004872:	462b      	mov	r3, r5
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fc f8c0 	bl	80009fc <__aeabi_dcmpun>
 800487c:	bbc8      	cbnz	r0, 80048f2 <pow+0x96>
 800487e:	2200      	movs	r2, #0
 8004880:	2300      	movs	r3, #0
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fc f887 	bl	8000998 <__aeabi_dcmpeq>
 800488a:	b1b8      	cbz	r0, 80048bc <pow+0x60>
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fc f880 	bl	8000998 <__aeabi_dcmpeq>
 8004898:	2800      	cmp	r0, #0
 800489a:	d141      	bne.n	8004920 <pow+0xc4>
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f000 f844 	bl	800492c <finite>
 80048a4:	b328      	cbz	r0, 80048f2 <pow+0x96>
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	4620      	mov	r0, r4
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7fc f87d 	bl	80009ac <__aeabi_dcmplt>
 80048b2:	b1f0      	cbz	r0, 80048f2 <pow+0x96>
 80048b4:	f7ff ffa8 	bl	8004808 <__errno>
 80048b8:	2322      	movs	r3, #34	; 0x22
 80048ba:	e019      	b.n	80048f0 <pow+0x94>
 80048bc:	4630      	mov	r0, r6
 80048be:	4639      	mov	r1, r7
 80048c0:	f000 f834 	bl	800492c <finite>
 80048c4:	b9c8      	cbnz	r0, 80048fa <pow+0x9e>
 80048c6:	4640      	mov	r0, r8
 80048c8:	4649      	mov	r1, r9
 80048ca:	f000 f82f 	bl	800492c <finite>
 80048ce:	b1a0      	cbz	r0, 80048fa <pow+0x9e>
 80048d0:	4620      	mov	r0, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	f000 f82a 	bl	800492c <finite>
 80048d8:	b178      	cbz	r0, 80048fa <pow+0x9e>
 80048da:	4632      	mov	r2, r6
 80048dc:	463b      	mov	r3, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fc f88b 	bl	80009fc <__aeabi_dcmpun>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0e4      	beq.n	80048b4 <pow+0x58>
 80048ea:	f7ff ff8d 	bl	8004808 <__errno>
 80048ee:	2321      	movs	r3, #33	; 0x21
 80048f0:	6003      	str	r3, [r0, #0]
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fa:	2200      	movs	r2, #0
 80048fc:	2300      	movs	r3, #0
 80048fe:	4630      	mov	r0, r6
 8004900:	4639      	mov	r1, r7
 8004902:	f7fc f849 	bl	8000998 <__aeabi_dcmpeq>
 8004906:	2800      	cmp	r0, #0
 8004908:	d0f3      	beq.n	80048f2 <pow+0x96>
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f000 f80d 	bl	800492c <finite>
 8004912:	2800      	cmp	r0, #0
 8004914:	d0ed      	beq.n	80048f2 <pow+0x96>
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f000 f807 	bl	800492c <finite>
 800491e:	e7c8      	b.n	80048b2 <pow+0x56>
 8004920:	2600      	movs	r6, #0
 8004922:	4f01      	ldr	r7, [pc, #4]	; (8004928 <pow+0xcc>)
 8004924:	e7e5      	b.n	80048f2 <pow+0x96>
 8004926:	bf00      	nop
 8004928:	3ff00000 	.word	0x3ff00000

0800492c <finite>:
 800492c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004930:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004934:	0fc0      	lsrs	r0, r0, #31
 8004936:	4770      	bx	lr

08004938 <__ieee754_pow>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	b093      	sub	sp, #76	; 0x4c
 800493e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004942:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004946:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800494a:	4689      	mov	r9, r1
 800494c:	ea56 0102 	orrs.w	r1, r6, r2
 8004950:	4680      	mov	r8, r0
 8004952:	d111      	bne.n	8004978 <__ieee754_pow+0x40>
 8004954:	1803      	adds	r3, r0, r0
 8004956:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800495a:	4152      	adcs	r2, r2
 800495c:	4299      	cmp	r1, r3
 800495e:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <__ieee754_pow+0x230>)
 8004960:	4193      	sbcs	r3, r2
 8004962:	f080 84ba 	bcs.w	80052da <__ieee754_pow+0x9a2>
 8004966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fbf5 	bl	800015c <__adddf3>
 8004972:	4683      	mov	fp, r0
 8004974:	468c      	mov	ip, r1
 8004976:	e06f      	b.n	8004a58 <__ieee754_pow+0x120>
 8004978:	4b7c      	ldr	r3, [pc, #496]	; (8004b6c <__ieee754_pow+0x234>)
 800497a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800497e:	429c      	cmp	r4, r3
 8004980:	464d      	mov	r5, r9
 8004982:	4682      	mov	sl, r0
 8004984:	dc06      	bgt.n	8004994 <__ieee754_pow+0x5c>
 8004986:	d101      	bne.n	800498c <__ieee754_pow+0x54>
 8004988:	2800      	cmp	r0, #0
 800498a:	d1ec      	bne.n	8004966 <__ieee754_pow+0x2e>
 800498c:	429e      	cmp	r6, r3
 800498e:	dc01      	bgt.n	8004994 <__ieee754_pow+0x5c>
 8004990:	d10f      	bne.n	80049b2 <__ieee754_pow+0x7a>
 8004992:	b172      	cbz	r2, 80049b2 <__ieee754_pow+0x7a>
 8004994:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004998:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800499c:	ea55 050a 	orrs.w	r5, r5, sl
 80049a0:	d1e1      	bne.n	8004966 <__ieee754_pow+0x2e>
 80049a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80049a6:	18db      	adds	r3, r3, r3
 80049a8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80049ac:	4152      	adcs	r2, r2
 80049ae:	429d      	cmp	r5, r3
 80049b0:	e7d5      	b.n	800495e <__ieee754_pow+0x26>
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	da39      	bge.n	8004a2a <__ieee754_pow+0xf2>
 80049b6:	4b6e      	ldr	r3, [pc, #440]	; (8004b70 <__ieee754_pow+0x238>)
 80049b8:	429e      	cmp	r6, r3
 80049ba:	dc52      	bgt.n	8004a62 <__ieee754_pow+0x12a>
 80049bc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80049c0:	429e      	cmp	r6, r3
 80049c2:	f340 849d 	ble.w	8005300 <__ieee754_pow+0x9c8>
 80049c6:	1533      	asrs	r3, r6, #20
 80049c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80049cc:	2b14      	cmp	r3, #20
 80049ce:	dd0f      	ble.n	80049f0 <__ieee754_pow+0xb8>
 80049d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80049d4:	fa22 f103 	lsr.w	r1, r2, r3
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	4293      	cmp	r3, r2
 80049de:	f040 848f 	bne.w	8005300 <__ieee754_pow+0x9c8>
 80049e2:	f001 0101 	and.w	r1, r1, #1
 80049e6:	f1c1 0302 	rsb	r3, r1, #2
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	b182      	cbz	r2, 8004a10 <__ieee754_pow+0xd8>
 80049ee:	e05d      	b.n	8004aac <__ieee754_pow+0x174>
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	d159      	bne.n	8004aa8 <__ieee754_pow+0x170>
 80049f4:	f1c3 0314 	rsb	r3, r3, #20
 80049f8:	fa46 f103 	asr.w	r1, r6, r3
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	42b3      	cmp	r3, r6
 8004a02:	f040 847a 	bne.w	80052fa <__ieee754_pow+0x9c2>
 8004a06:	f001 0101 	and.w	r1, r1, #1
 8004a0a:	f1c1 0302 	rsb	r3, r1, #2
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4b58      	ldr	r3, [pc, #352]	; (8004b74 <__ieee754_pow+0x23c>)
 8004a12:	429e      	cmp	r6, r3
 8004a14:	d132      	bne.n	8004a7c <__ieee754_pow+0x144>
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	f280 846b 	bge.w	80052f2 <__ieee754_pow+0x9ba>
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	2000      	movs	r0, #0
 8004a22:	4954      	ldr	r1, [pc, #336]	; (8004b74 <__ieee754_pow+0x23c>)
 8004a24:	f7fb fe7a 	bl	800071c <__aeabi_ddiv>
 8004a28:	e7a3      	b.n	8004972 <__ieee754_pow+0x3a>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	d13c      	bne.n	8004aac <__ieee754_pow+0x174>
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <__ieee754_pow+0x234>)
 8004a34:	429e      	cmp	r6, r3
 8004a36:	d1eb      	bne.n	8004a10 <__ieee754_pow+0xd8>
 8004a38:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004a3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004a40:	ea53 030a 	orrs.w	r3, r3, sl
 8004a44:	f000 8449 	beq.w	80052da <__ieee754_pow+0x9a2>
 8004a48:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <__ieee754_pow+0x240>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	dd0b      	ble.n	8004a66 <__ieee754_pow+0x12e>
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	f2c0 8449 	blt.w	80052e6 <__ieee754_pow+0x9ae>
 8004a54:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004a58:	4658      	mov	r0, fp
 8004a5a:	4661      	mov	r1, ip
 8004a5c:	b013      	add	sp, #76	; 0x4c
 8004a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a62:	2302      	movs	r3, #2
 8004a64:	e7e2      	b.n	8004a2c <__ieee754_pow+0xf4>
 8004a66:	2f00      	cmp	r7, #0
 8004a68:	f04f 0b00 	mov.w	fp, #0
 8004a6c:	f04f 0c00 	mov.w	ip, #0
 8004a70:	daf2      	bge.n	8004a58 <__ieee754_pow+0x120>
 8004a72:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004a76:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004a7a:	e7ed      	b.n	8004a58 <__ieee754_pow+0x120>
 8004a7c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004a80:	d106      	bne.n	8004a90 <__ieee754_pow+0x158>
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fd1d 	bl	80004c8 <__aeabi_dmul>
 8004a8e:	e770      	b.n	8004972 <__ieee754_pow+0x3a>
 8004a90:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <__ieee754_pow+0x244>)
 8004a92:	429f      	cmp	r7, r3
 8004a94:	d10a      	bne.n	8004aac <__ieee754_pow+0x174>
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	db08      	blt.n	8004aac <__ieee754_pow+0x174>
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	b013      	add	sp, #76	; 0x4c
 8004aa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	f000 bd0a 	b.w	80054bc <__ieee754_sqrt>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f000 fc58 	bl	8005364 <fabs>
 8004ab4:	4683      	mov	fp, r0
 8004ab6:	468c      	mov	ip, r1
 8004ab8:	f1ba 0f00 	cmp.w	sl, #0
 8004abc:	d128      	bne.n	8004b10 <__ieee754_pow+0x1d8>
 8004abe:	b124      	cbz	r4, 8004aca <__ieee754_pow+0x192>
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <__ieee754_pow+0x23c>)
 8004ac2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d122      	bne.n	8004b10 <__ieee754_pow+0x1d8>
 8004aca:	2f00      	cmp	r7, #0
 8004acc:	da07      	bge.n	8004ade <__ieee754_pow+0x1a6>
 8004ace:	465a      	mov	r2, fp
 8004ad0:	4663      	mov	r3, ip
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	4927      	ldr	r1, [pc, #156]	; (8004b74 <__ieee754_pow+0x23c>)
 8004ad6:	f7fb fe21 	bl	800071c <__aeabi_ddiv>
 8004ada:	4683      	mov	fp, r0
 8004adc:	468c      	mov	ip, r1
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	daba      	bge.n	8004a58 <__ieee754_pow+0x120>
 8004ae2:	9b00      	ldr	r3, [sp, #0]
 8004ae4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004ae8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004aec:	431c      	orrs	r4, r3
 8004aee:	d108      	bne.n	8004b02 <__ieee754_pow+0x1ca>
 8004af0:	465a      	mov	r2, fp
 8004af2:	4663      	mov	r3, ip
 8004af4:	4658      	mov	r0, fp
 8004af6:	4661      	mov	r1, ip
 8004af8:	f7fb fb2e 	bl	8000158 <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	e790      	b.n	8004a24 <__ieee754_pow+0xec>
 8004b02:	9b00      	ldr	r3, [sp, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d1a7      	bne.n	8004a58 <__ieee754_pow+0x120>
 8004b08:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004b0c:	469c      	mov	ip, r3
 8004b0e:	e7a3      	b.n	8004a58 <__ieee754_pow+0x120>
 8004b10:	0feb      	lsrs	r3, r5, #31
 8004b12:	3b01      	subs	r3, #1
 8004b14:	930c      	str	r3, [sp, #48]	; 0x30
 8004b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b18:	9b00      	ldr	r3, [sp, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	d104      	bne.n	8004b28 <__ieee754_pow+0x1f0>
 8004b1e:	4642      	mov	r2, r8
 8004b20:	464b      	mov	r3, r9
 8004b22:	4640      	mov	r0, r8
 8004b24:	4649      	mov	r1, r9
 8004b26:	e7e7      	b.n	8004af8 <__ieee754_pow+0x1c0>
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <__ieee754_pow+0x248>)
 8004b2a:	429e      	cmp	r6, r3
 8004b2c:	f340 80f6 	ble.w	8004d1c <__ieee754_pow+0x3e4>
 8004b30:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004b34:	429e      	cmp	r6, r3
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <__ieee754_pow+0x240>)
 8004b38:	dd09      	ble.n	8004b4e <__ieee754_pow+0x216>
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	dc0c      	bgt.n	8004b58 <__ieee754_pow+0x220>
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	da0c      	bge.n	8004b5c <__ieee754_pow+0x224>
 8004b42:	2000      	movs	r0, #0
 8004b44:	b013      	add	sp, #76	; 0x4c
 8004b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4a:	f000 bcb2 	b.w	80054b2 <__math_oflow>
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	dbf5      	blt.n	8004b3e <__ieee754_pow+0x206>
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <__ieee754_pow+0x23c>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	dd15      	ble.n	8004b84 <__ieee754_pow+0x24c>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	dcf2      	bgt.n	8004b42 <__ieee754_pow+0x20a>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	b013      	add	sp, #76	; 0x4c
 8004b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	f000 bca0 	b.w	80054a8 <__math_uflow>
 8004b68:	fff00000 	.word	0xfff00000
 8004b6c:	7ff00000 	.word	0x7ff00000
 8004b70:	433fffff 	.word	0x433fffff
 8004b74:	3ff00000 	.word	0x3ff00000
 8004b78:	3fefffff 	.word	0x3fefffff
 8004b7c:	3fe00000 	.word	0x3fe00000
 8004b80:	41e00000 	.word	0x41e00000
 8004b84:	4661      	mov	r1, ip
 8004b86:	2200      	movs	r2, #0
 8004b88:	4658      	mov	r0, fp
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	; (8004d08 <__ieee754_pow+0x3d0>)
 8004b8c:	f7fb fae4 	bl	8000158 <__aeabi_dsub>
 8004b90:	a355      	add	r3, pc, #340	; (adr r3, 8004ce8 <__ieee754_pow+0x3b0>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	4604      	mov	r4, r0
 8004b98:	460d      	mov	r5, r1
 8004b9a:	f7fb fc95 	bl	80004c8 <__aeabi_dmul>
 8004b9e:	a354      	add	r3, pc, #336	; (adr r3, 8004cf0 <__ieee754_pow+0x3b8>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	460f      	mov	r7, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7fb fc8c 	bl	80004c8 <__aeabi_dmul>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4682      	mov	sl, r0
 8004bb4:	468b      	mov	fp, r1
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <__ieee754_pow+0x3d4>)
 8004bbc:	f7fb fc84 	bl	80004c8 <__aeabi_dmul>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	a14c      	add	r1, pc, #304	; (adr r1, 8004cf8 <__ieee754_pow+0x3c0>)
 8004bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bca:	f7fb fac5 	bl	8000158 <__aeabi_dsub>
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f7fb fc79 	bl	80004c8 <__aeabi_dmul>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	2000      	movs	r0, #0
 8004bdc:	494c      	ldr	r1, [pc, #304]	; (8004d10 <__ieee754_pow+0x3d8>)
 8004bde:	f7fb fabb 	bl	8000158 <__aeabi_dsub>
 8004be2:	4622      	mov	r2, r4
 8004be4:	462b      	mov	r3, r5
 8004be6:	4680      	mov	r8, r0
 8004be8:	4689      	mov	r9, r1
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7fb fc6b 	bl	80004c8 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	f7fb fc65 	bl	80004c8 <__aeabi_dmul>
 8004bfe:	a340      	add	r3, pc, #256	; (adr r3, 8004d00 <__ieee754_pow+0x3c8>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fc60 	bl	80004c8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4650      	mov	r0, sl
 8004c0e:	4659      	mov	r1, fp
 8004c10:	f7fb faa2 	bl	8000158 <__aeabi_dsub>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4604      	mov	r4, r0
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f7fb fa9c 	bl	800015c <__adddf3>
 8004c24:	2000      	movs	r0, #0
 8004c26:	4632      	mov	r2, r6
 8004c28:	463b      	mov	r3, r7
 8004c2a:	4682      	mov	sl, r0
 8004c2c:	468b      	mov	fp, r1
 8004c2e:	f7fb fa93 	bl	8000158 <__aeabi_dsub>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb fa8d 	bl	8000158 <__aeabi_dsub>
 8004c3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f04f 0600 	mov.w	r6, #0
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	4b2f      	ldreq	r3, [pc, #188]	; (8004d14 <__ieee754_pow+0x3dc>)
 8004c56:	4b2c      	ldrne	r3, [pc, #176]	; (8004d08 <__ieee754_pow+0x3d0>)
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c60:	e9cd 2300 	strd	r2, r3, [sp]
 8004c64:	4632      	mov	r2, r6
 8004c66:	463b      	mov	r3, r7
 8004c68:	f7fb fa76 	bl	8000158 <__aeabi_dsub>
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	465b      	mov	r3, fp
 8004c70:	f7fb fc2a 	bl	80004c8 <__aeabi_dmul>
 8004c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4689      	mov	r9, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fc22 	bl	80004c8 <__aeabi_dmul>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb fa66 	bl	800015c <__adddf3>
 8004c90:	4632      	mov	r2, r6
 8004c92:	463b      	mov	r3, r7
 8004c94:	4680      	mov	r8, r0
 8004c96:	4689      	mov	r9, r1
 8004c98:	4650      	mov	r0, sl
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	f7fb fc14 	bl	80004c8 <__aeabi_dmul>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4649      	mov	r1, r9
 8004caa:	4640      	mov	r0, r8
 8004cac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004cb0:	f7fb fa54 	bl	800015c <__adddf3>
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <__ieee754_pow+0x3e0>)
 8004cb6:	4682      	mov	sl, r0
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	460f      	mov	r7, r1
 8004cbc:	460e      	mov	r6, r1
 8004cbe:	f340 82e7 	ble.w	8005290 <__ieee754_pow+0x958>
 8004cc2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004cc6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004cca:	4303      	orrs	r3, r0
 8004ccc:	f000 81e2 	beq.w	8005094 <__ieee754_pow+0x75c>
 8004cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f7fb fe68 	bl	80009ac <__aeabi_dcmplt>
 8004cdc:	3800      	subs	r0, #0
 8004cde:	bf18      	it	ne
 8004ce0:	2001      	movne	r0, #1
 8004ce2:	e72f      	b.n	8004b44 <__ieee754_pow+0x20c>
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	60000000 	.word	0x60000000
 8004cec:	3ff71547 	.word	0x3ff71547
 8004cf0:	f85ddf44 	.word	0xf85ddf44
 8004cf4:	3e54ae0b 	.word	0x3e54ae0b
 8004cf8:	55555555 	.word	0x55555555
 8004cfc:	3fd55555 	.word	0x3fd55555
 8004d00:	652b82fe 	.word	0x652b82fe
 8004d04:	3ff71547 	.word	0x3ff71547
 8004d08:	3ff00000 	.word	0x3ff00000
 8004d0c:	3fd00000 	.word	0x3fd00000
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	bff00000 	.word	0xbff00000
 8004d18:	408fffff 	.word	0x408fffff
 8004d1c:	4bd4      	ldr	r3, [pc, #848]	; (8005070 <__ieee754_pow+0x738>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	402b      	ands	r3, r5
 8004d22:	b943      	cbnz	r3, 8004d36 <__ieee754_pow+0x3fe>
 8004d24:	4658      	mov	r0, fp
 8004d26:	4661      	mov	r1, ip
 8004d28:	4bd2      	ldr	r3, [pc, #840]	; (8005074 <__ieee754_pow+0x73c>)
 8004d2a:	f7fb fbcd 	bl	80004c8 <__aeabi_dmul>
 8004d2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004d32:	4683      	mov	fp, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	1523      	asrs	r3, r4, #20
 8004d38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d3c:	4413      	add	r3, r2
 8004d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d40:	4bcd      	ldr	r3, [pc, #820]	; (8005078 <__ieee754_pow+0x740>)
 8004d42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004d46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004d4a:	429c      	cmp	r4, r3
 8004d4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004d50:	dd08      	ble.n	8004d64 <__ieee754_pow+0x42c>
 8004d52:	4bca      	ldr	r3, [pc, #808]	; (800507c <__ieee754_pow+0x744>)
 8004d54:	429c      	cmp	r4, r3
 8004d56:	f340 8164 	ble.w	8005022 <__ieee754_pow+0x6ea>
 8004d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d5c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004d60:	3301      	adds	r3, #1
 8004d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d64:	2600      	movs	r6, #0
 8004d66:	00f3      	lsls	r3, r6, #3
 8004d68:	930d      	str	r3, [sp, #52]	; 0x34
 8004d6a:	4bc5      	ldr	r3, [pc, #788]	; (8005080 <__ieee754_pow+0x748>)
 8004d6c:	4658      	mov	r0, fp
 8004d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d76:	4629      	mov	r1, r5
 8004d78:	461a      	mov	r2, r3
 8004d7a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d7e:	4623      	mov	r3, r4
 8004d80:	f7fb f9ea 	bl	8000158 <__aeabi_dsub>
 8004d84:	46da      	mov	sl, fp
 8004d86:	462b      	mov	r3, r5
 8004d88:	4652      	mov	r2, sl
 8004d8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d92:	f7fb f9e3 	bl	800015c <__adddf3>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	49b9      	ldr	r1, [pc, #740]	; (8005084 <__ieee754_pow+0x74c>)
 8004d9e:	f7fb fcbd 	bl	800071c <__aeabi_ddiv>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004daa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004dae:	f7fb fb8b 	bl	80004c8 <__aeabi_dmul>
 8004db2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004db6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004dba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	46ab      	mov	fp, r5
 8004dc4:	106d      	asrs	r5, r5, #1
 8004dc6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004dd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004dd4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004dec:	f7fb f9b4 	bl	8000158 <__aeabi_dsub>
 8004df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004df4:	4606      	mov	r6, r0
 8004df6:	460f      	mov	r7, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb f9ac 	bl	8000158 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4650      	mov	r0, sl
 8004e06:	4659      	mov	r1, fp
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f7fb fb5a 	bl	80004c8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4630      	mov	r0, r6
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	f7fb f99c 	bl	8000158 <__aeabi_dsub>
 8004e20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e24:	f7fb fb50 	bl	80004c8 <__aeabi_dmul>
 8004e28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e2c:	4682      	mov	sl, r0
 8004e2e:	468b      	mov	fp, r1
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7fb fb48 	bl	80004c8 <__aeabi_dmul>
 8004e38:	a37b      	add	r3, pc, #492	; (adr r3, 8005028 <__ieee754_pow+0x6f0>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	4604      	mov	r4, r0
 8004e40:	460d      	mov	r5, r1
 8004e42:	f7fb fb41 	bl	80004c8 <__aeabi_dmul>
 8004e46:	a37a      	add	r3, pc, #488	; (adr r3, 8005030 <__ieee754_pow+0x6f8>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb f986 	bl	800015c <__adddf3>
 8004e50:	4622      	mov	r2, r4
 8004e52:	462b      	mov	r3, r5
 8004e54:	f7fb fb38 	bl	80004c8 <__aeabi_dmul>
 8004e58:	a377      	add	r3, pc, #476	; (adr r3, 8005038 <__ieee754_pow+0x700>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb f97d 	bl	800015c <__adddf3>
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	f7fb fb2f 	bl	80004c8 <__aeabi_dmul>
 8004e6a:	a375      	add	r3, pc, #468	; (adr r3, 8005040 <__ieee754_pow+0x708>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb f974 	bl	800015c <__adddf3>
 8004e74:	4622      	mov	r2, r4
 8004e76:	462b      	mov	r3, r5
 8004e78:	f7fb fb26 	bl	80004c8 <__aeabi_dmul>
 8004e7c:	a372      	add	r3, pc, #456	; (adr r3, 8005048 <__ieee754_pow+0x710>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb f96b 	bl	800015c <__adddf3>
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	f7fb fb1d 	bl	80004c8 <__aeabi_dmul>
 8004e8e:	a370      	add	r3, pc, #448	; (adr r3, 8005050 <__ieee754_pow+0x718>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f7fb f962 	bl	800015c <__adddf3>
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fb10 	bl	80004c8 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	f7fb f94c 	bl	800015c <__adddf3>
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	465b      	mov	r3, fp
 8004ec8:	f7fb fafe 	bl	80004c8 <__aeabi_dmul>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	462b      	mov	r3, r5
 8004ed0:	f7fb f944 	bl	800015c <__adddf3>
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	460f      	mov	r7, r1
 8004eda:	464b      	mov	r3, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	f7fb faf2 	bl	80004c8 <__aeabi_dmul>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004eec:	2200      	movs	r2, #0
 8004eee:	4b66      	ldr	r3, [pc, #408]	; (8005088 <__ieee754_pow+0x750>)
 8004ef0:	f7fb f934 	bl	800015c <__adddf3>
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	f7fb f930 	bl	800015c <__adddf3>
 8004efc:	2400      	movs	r4, #0
 8004efe:	460d      	mov	r5, r1
 8004f00:	4622      	mov	r2, r4
 8004f02:	460b      	mov	r3, r1
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb fade 	bl	80004c8 <__aeabi_dmul>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4680      	mov	r8, r0
 8004f10:	4689      	mov	r9, r1
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	4b5c      	ldr	r3, [pc, #368]	; (8005088 <__ieee754_pow+0x750>)
 8004f18:	f7fb f91e 	bl	8000158 <__aeabi_dsub>
 8004f1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f20:	f7fb f91a 	bl	8000158 <__aeabi_dsub>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4630      	mov	r0, r6
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f914 	bl	8000158 <__aeabi_dsub>
 8004f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f34:	f7fb fac8 	bl	80004c8 <__aeabi_dmul>
 8004f38:	4622      	mov	r2, r4
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460f      	mov	r7, r1
 8004f3e:	462b      	mov	r3, r5
 8004f40:	4650      	mov	r0, sl
 8004f42:	4659      	mov	r1, fp
 8004f44:	f7fb fac0 	bl	80004c8 <__aeabi_dmul>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb f904 	bl	800015c <__adddf3>
 8004f54:	2400      	movs	r4, #0
 8004f56:	4606      	mov	r6, r0
 8004f58:	460f      	mov	r7, r1
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f7fb f8fb 	bl	800015c <__adddf3>
 8004f66:	a33c      	add	r3, pc, #240	; (adr r3, 8005058 <__ieee754_pow+0x720>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	460d      	mov	r5, r1
 8004f70:	f7fb faaa 	bl	80004c8 <__aeabi_dmul>
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f8ea 	bl	8000158 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4630      	mov	r0, r6
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb f8e4 	bl	8000158 <__aeabi_dsub>
 8004f90:	a333      	add	r3, pc, #204	; (adr r3, 8005060 <__ieee754_pow+0x728>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb fa97 	bl	80004c8 <__aeabi_dmul>
 8004f9a:	a333      	add	r3, pc, #204	; (adr r3, 8005068 <__ieee754_pow+0x730>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	460f      	mov	r7, r1
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7fb fa8e 	bl	80004c8 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb f8d2 	bl	800015c <__adddf3>
 8004fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fba:	4b34      	ldr	r3, [pc, #208]	; (800508c <__ieee754_pow+0x754>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb f8cb 	bl	800015c <__adddf3>
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fca:	4689      	mov	r9, r1
 8004fcc:	f7fb fa12 	bl	80003f4 <__aeabi_i2d>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fda:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <__ieee754_pow+0x758>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	f7fb f8b9 	bl	800015c <__adddf3>
 8004fea:	4632      	mov	r2, r6
 8004fec:	463b      	mov	r3, r7
 8004fee:	f7fb f8b5 	bl	800015c <__adddf3>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb f8b1 	bl	800015c <__adddf3>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	462b      	mov	r3, r5
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	f7fb f8a8 	bl	8000158 <__aeabi_dsub>
 8005008:	4632      	mov	r2, r6
 800500a:	463b      	mov	r3, r7
 800500c:	f7fb f8a4 	bl	8000158 <__aeabi_dsub>
 8005010:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005014:	f7fb f8a0 	bl	8000158 <__aeabi_dsub>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4640      	mov	r0, r8
 800501e:	4649      	mov	r1, r9
 8005020:	e60b      	b.n	8004c3a <__ieee754_pow+0x302>
 8005022:	2601      	movs	r6, #1
 8005024:	e69f      	b.n	8004d66 <__ieee754_pow+0x42e>
 8005026:	bf00      	nop
 8005028:	4a454eef 	.word	0x4a454eef
 800502c:	3fca7e28 	.word	0x3fca7e28
 8005030:	93c9db65 	.word	0x93c9db65
 8005034:	3fcd864a 	.word	0x3fcd864a
 8005038:	a91d4101 	.word	0xa91d4101
 800503c:	3fd17460 	.word	0x3fd17460
 8005040:	518f264d 	.word	0x518f264d
 8005044:	3fd55555 	.word	0x3fd55555
 8005048:	db6fabff 	.word	0xdb6fabff
 800504c:	3fdb6db6 	.word	0x3fdb6db6
 8005050:	33333303 	.word	0x33333303
 8005054:	3fe33333 	.word	0x3fe33333
 8005058:	e0000000 	.word	0xe0000000
 800505c:	3feec709 	.word	0x3feec709
 8005060:	dc3a03fd 	.word	0xdc3a03fd
 8005064:	3feec709 	.word	0x3feec709
 8005068:	145b01f5 	.word	0x145b01f5
 800506c:	be3e2fe0 	.word	0xbe3e2fe0
 8005070:	7ff00000 	.word	0x7ff00000
 8005074:	43400000 	.word	0x43400000
 8005078:	0003988e 	.word	0x0003988e
 800507c:	000bb679 	.word	0x000bb679
 8005080:	080056b8 	.word	0x080056b8
 8005084:	3ff00000 	.word	0x3ff00000
 8005088:	40080000 	.word	0x40080000
 800508c:	080056d8 	.word	0x080056d8
 8005090:	080056c8 	.word	0x080056c8
 8005094:	a39c      	add	r3, pc, #624	; (adr r3, 8005308 <__ieee754_pow+0x9d0>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	4640      	mov	r0, r8
 800509c:	4649      	mov	r1, r9
 800509e:	f7fb f85d 	bl	800015c <__adddf3>
 80050a2:	4622      	mov	r2, r4
 80050a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050a8:	462b      	mov	r3, r5
 80050aa:	4650      	mov	r0, sl
 80050ac:	4639      	mov	r1, r7
 80050ae:	f7fb f853 	bl	8000158 <__aeabi_dsub>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ba:	f7fb fc95 	bl	80009e8 <__aeabi_dcmpgt>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f47f ae06 	bne.w	8004cd0 <__ieee754_pow+0x398>
 80050c4:	4aa2      	ldr	r2, [pc, #648]	; (8005350 <__ieee754_pow+0xa18>)
 80050c6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80050ca:	4293      	cmp	r3, r2
 80050cc:	f340 8100 	ble.w	80052d0 <__ieee754_pow+0x998>
 80050d0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80050d4:	151b      	asrs	r3, r3, #20
 80050d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80050da:	fa4a fa03 	asr.w	sl, sl, r3
 80050de:	44b2      	add	sl, r6
 80050e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80050e4:	489b      	ldr	r0, [pc, #620]	; (8005354 <__ieee754_pow+0xa1c>)
 80050e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80050ea:	4108      	asrs	r0, r1
 80050ec:	ea00 030a 	and.w	r3, r0, sl
 80050f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80050f4:	f1c1 0114 	rsb	r1, r1, #20
 80050f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80050fc:	fa4a fa01 	asr.w	sl, sl, r1
 8005100:	2e00      	cmp	r6, #0
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	bfb8      	it	lt
 800510c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005110:	f7fb f822 	bl	8000158 <__aeabi_dsub>
 8005114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511c:	2400      	movs	r4, #0
 800511e:	4642      	mov	r2, r8
 8005120:	464b      	mov	r3, r9
 8005122:	f7fb f81b 	bl	800015c <__adddf3>
 8005126:	a37a      	add	r3, pc, #488	; (adr r3, 8005310 <__ieee754_pow+0x9d8>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	4620      	mov	r0, r4
 800512e:	460d      	mov	r5, r1
 8005130:	f7fb f9ca 	bl	80004c8 <__aeabi_dmul>
 8005134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005138:	4606      	mov	r6, r0
 800513a:	460f      	mov	r7, r1
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f80a 	bl	8000158 <__aeabi_dsub>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb f804 	bl	8000158 <__aeabi_dsub>
 8005150:	a371      	add	r3, pc, #452	; (adr r3, 8005318 <__ieee754_pow+0x9e0>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f7fb f9b7 	bl	80004c8 <__aeabi_dmul>
 800515a:	a371      	add	r3, pc, #452	; (adr r3, 8005320 <__ieee754_pow+0x9e8>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	4680      	mov	r8, r0
 8005162:	4689      	mov	r9, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f9ae 	bl	80004c8 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fa fff2 	bl	800015c <__adddf3>
 8005178:	4604      	mov	r4, r0
 800517a:	460d      	mov	r5, r1
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4630      	mov	r0, r6
 8005182:	4639      	mov	r1, r7
 8005184:	f7fa ffea 	bl	800015c <__adddf3>
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4680      	mov	r8, r0
 800518e:	4689      	mov	r9, r1
 8005190:	f7fa ffe2 	bl	8000158 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4620      	mov	r0, r4
 800519a:	4629      	mov	r1, r5
 800519c:	f7fa ffdc 	bl	8000158 <__aeabi_dsub>
 80051a0:	4642      	mov	r2, r8
 80051a2:	4606      	mov	r6, r0
 80051a4:	460f      	mov	r7, r1
 80051a6:	464b      	mov	r3, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb f98c 	bl	80004c8 <__aeabi_dmul>
 80051b0:	a35d      	add	r3, pc, #372	; (adr r3, 8005328 <__ieee754_pow+0x9f0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	4604      	mov	r4, r0
 80051b8:	460d      	mov	r5, r1
 80051ba:	f7fb f985 	bl	80004c8 <__aeabi_dmul>
 80051be:	a35c      	add	r3, pc, #368	; (adr r3, 8005330 <__ieee754_pow+0x9f8>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fa ffc8 	bl	8000158 <__aeabi_dsub>
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	f7fb f97c 	bl	80004c8 <__aeabi_dmul>
 80051d0:	a359      	add	r3, pc, #356	; (adr r3, 8005338 <__ieee754_pow+0xa00>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fa ffc1 	bl	800015c <__adddf3>
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	f7fb f973 	bl	80004c8 <__aeabi_dmul>
 80051e2:	a357      	add	r3, pc, #348	; (adr r3, 8005340 <__ieee754_pow+0xa08>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fa ffb6 	bl	8000158 <__aeabi_dsub>
 80051ec:	4622      	mov	r2, r4
 80051ee:	462b      	mov	r3, r5
 80051f0:	f7fb f96a 	bl	80004c8 <__aeabi_dmul>
 80051f4:	a354      	add	r3, pc, #336	; (adr r3, 8005348 <__ieee754_pow+0xa10>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fa ffaf 	bl	800015c <__adddf3>
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	f7fb f961 	bl	80004c8 <__aeabi_dmul>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4640      	mov	r0, r8
 800520c:	4649      	mov	r1, r9
 800520e:	f7fa ffa3 	bl	8000158 <__aeabi_dsub>
 8005212:	4604      	mov	r4, r0
 8005214:	460d      	mov	r5, r1
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4640      	mov	r0, r8
 800521c:	4649      	mov	r1, r9
 800521e:	f7fb f953 	bl	80004c8 <__aeabi_dmul>
 8005222:	2200      	movs	r2, #0
 8005224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fa ff92 	bl	8000158 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523c:	f7fb fa6e 	bl	800071c <__aeabi_ddiv>
 8005240:	4632      	mov	r2, r6
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
 8005246:	463b      	mov	r3, r7
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	f7fb f93c 	bl	80004c8 <__aeabi_dmul>
 8005250:	4632      	mov	r2, r6
 8005252:	463b      	mov	r3, r7
 8005254:	f7fa ff82 	bl	800015c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fa ff7a 	bl	8000158 <__aeabi_dsub>
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	f7fa ff76 	bl	8000158 <__aeabi_dsub>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	2000      	movs	r0, #0
 8005272:	4939      	ldr	r1, [pc, #228]	; (8005358 <__ieee754_pow+0xa20>)
 8005274:	f7fa ff70 	bl	8000158 <__aeabi_dsub>
 8005278:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800527c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005280:	da29      	bge.n	80052d6 <__ieee754_pow+0x99e>
 8005282:	4652      	mov	r2, sl
 8005284:	f000 f874 	bl	8005370 <scalbn>
 8005288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800528c:	f7ff bbfd 	b.w	8004a8a <__ieee754_pow+0x152>
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <__ieee754_pow+0xa24>)
 8005292:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005296:	429f      	cmp	r7, r3
 8005298:	f77f af14 	ble.w	80050c4 <__ieee754_pow+0x78c>
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <__ieee754_pow+0xa28>)
 800529e:	440b      	add	r3, r1
 80052a0:	4303      	orrs	r3, r0
 80052a2:	d009      	beq.n	80052b8 <__ieee754_pow+0x980>
 80052a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	f7fb fb7e 	bl	80009ac <__aeabi_dcmplt>
 80052b0:	3800      	subs	r0, #0
 80052b2:	bf18      	it	ne
 80052b4:	2001      	movne	r0, #1
 80052b6:	e452      	b.n	8004b5e <__ieee754_pow+0x226>
 80052b8:	4622      	mov	r2, r4
 80052ba:	462b      	mov	r3, r5
 80052bc:	f7fa ff4c 	bl	8000158 <__aeabi_dsub>
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	f7fb fb86 	bl	80009d4 <__aeabi_dcmpge>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	f43f aefb 	beq.w	80050c4 <__ieee754_pow+0x78c>
 80052ce:	e7e9      	b.n	80052a4 <__ieee754_pow+0x96c>
 80052d0:	f04f 0a00 	mov.w	sl, #0
 80052d4:	e720      	b.n	8005118 <__ieee754_pow+0x7e0>
 80052d6:	4621      	mov	r1, r4
 80052d8:	e7d6      	b.n	8005288 <__ieee754_pow+0x950>
 80052da:	f04f 0b00 	mov.w	fp, #0
 80052de:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005358 <__ieee754_pow+0xa20>
 80052e2:	f7ff bbb9 	b.w	8004a58 <__ieee754_pow+0x120>
 80052e6:	f04f 0b00 	mov.w	fp, #0
 80052ea:	f04f 0c00 	mov.w	ip, #0
 80052ee:	f7ff bbb3 	b.w	8004a58 <__ieee754_pow+0x120>
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7ff bb3c 	b.w	8004972 <__ieee754_pow+0x3a>
 80052fa:	9200      	str	r2, [sp, #0]
 80052fc:	f7ff bb88 	b.w	8004a10 <__ieee754_pow+0xd8>
 8005300:	2300      	movs	r3, #0
 8005302:	f7ff bb72 	b.w	80049ea <__ieee754_pow+0xb2>
 8005306:	bf00      	nop
 8005308:	652b82fe 	.word	0x652b82fe
 800530c:	3c971547 	.word	0x3c971547
 8005310:	00000000 	.word	0x00000000
 8005314:	3fe62e43 	.word	0x3fe62e43
 8005318:	fefa39ef 	.word	0xfefa39ef
 800531c:	3fe62e42 	.word	0x3fe62e42
 8005320:	0ca86c39 	.word	0x0ca86c39
 8005324:	be205c61 	.word	0xbe205c61
 8005328:	72bea4d0 	.word	0x72bea4d0
 800532c:	3e663769 	.word	0x3e663769
 8005330:	c5d26bf1 	.word	0xc5d26bf1
 8005334:	3ebbbd41 	.word	0x3ebbbd41
 8005338:	af25de2c 	.word	0xaf25de2c
 800533c:	3f11566a 	.word	0x3f11566a
 8005340:	16bebd93 	.word	0x16bebd93
 8005344:	3f66c16c 	.word	0x3f66c16c
 8005348:	5555553e 	.word	0x5555553e
 800534c:	3fc55555 	.word	0x3fc55555
 8005350:	3fe00000 	.word	0x3fe00000
 8005354:	fff00000 	.word	0xfff00000
 8005358:	3ff00000 	.word	0x3ff00000
 800535c:	4090cbff 	.word	0x4090cbff
 8005360:	3f6f3400 	.word	0x3f6f3400

08005364 <fabs>:
 8005364:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005368:	4619      	mov	r1, r3
 800536a:	4770      	bx	lr
 800536c:	0000      	movs	r0, r0
	...

08005370 <scalbn>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	4616      	mov	r6, r2
 8005374:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005378:	4604      	mov	r4, r0
 800537a:	460d      	mov	r5, r1
 800537c:	460b      	mov	r3, r1
 800537e:	b992      	cbnz	r2, 80053a6 <scalbn+0x36>
 8005380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005384:	4303      	orrs	r3, r0
 8005386:	d03c      	beq.n	8005402 <scalbn+0x92>
 8005388:	4b31      	ldr	r3, [pc, #196]	; (8005450 <scalbn+0xe0>)
 800538a:	2200      	movs	r2, #0
 800538c:	f7fb f89c 	bl	80004c8 <__aeabi_dmul>
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <scalbn+0xe4>)
 8005392:	4604      	mov	r4, r0
 8005394:	429e      	cmp	r6, r3
 8005396:	460d      	mov	r5, r1
 8005398:	da0f      	bge.n	80053ba <scalbn+0x4a>
 800539a:	a329      	add	r3, pc, #164	; (adr r3, 8005440 <scalbn+0xd0>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fb f892 	bl	80004c8 <__aeabi_dmul>
 80053a4:	e006      	b.n	80053b4 <scalbn+0x44>
 80053a6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80053aa:	42ba      	cmp	r2, r7
 80053ac:	d109      	bne.n	80053c2 <scalbn+0x52>
 80053ae:	4602      	mov	r2, r0
 80053b0:	f7fa fed4 	bl	800015c <__adddf3>
 80053b4:	4604      	mov	r4, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	e023      	b.n	8005402 <scalbn+0x92>
 80053ba:	460b      	mov	r3, r1
 80053bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053c0:	3a36      	subs	r2, #54	; 0x36
 80053c2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80053c6:	428e      	cmp	r6, r1
 80053c8:	dd0e      	ble.n	80053e8 <scalbn+0x78>
 80053ca:	a31f      	add	r3, pc, #124	; (adr r3, 8005448 <scalbn+0xd8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053d4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80053d8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80053dc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80053e0:	481d      	ldr	r0, [pc, #116]	; (8005458 <scalbn+0xe8>)
 80053e2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80053e6:	e7db      	b.n	80053a0 <scalbn+0x30>
 80053e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80053ec:	4432      	add	r2, r6
 80053ee:	428a      	cmp	r2, r1
 80053f0:	dceb      	bgt.n	80053ca <scalbn+0x5a>
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	dd08      	ble.n	8005408 <scalbn+0x98>
 80053f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005408:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800540c:	da0c      	bge.n	8005428 <scalbn+0xb8>
 800540e:	a30c      	add	r3, pc, #48	; (adr r3, 8005440 <scalbn+0xd0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005418:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800541c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005420:	480e      	ldr	r0, [pc, #56]	; (800545c <scalbn+0xec>)
 8005422:	f041 011f 	orr.w	r1, r1, #31
 8005426:	e7bb      	b.n	80053a0 <scalbn+0x30>
 8005428:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800542c:	3236      	adds	r2, #54	; 0x36
 800542e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005432:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	2200      	movs	r2, #0
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <scalbn+0xf0>)
 800543e:	e7af      	b.n	80053a0 <scalbn+0x30>
 8005440:	c2f8f359 	.word	0xc2f8f359
 8005444:	01a56e1f 	.word	0x01a56e1f
 8005448:	8800759c 	.word	0x8800759c
 800544c:	7e37e43c 	.word	0x7e37e43c
 8005450:	43500000 	.word	0x43500000
 8005454:	ffff3cb0 	.word	0xffff3cb0
 8005458:	8800759c 	.word	0x8800759c
 800545c:	c2f8f359 	.word	0xc2f8f359
 8005460:	3c900000 	.word	0x3c900000

08005464 <with_errno>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4604      	mov	r4, r0
 8005468:	460d      	mov	r5, r1
 800546a:	4616      	mov	r6, r2
 800546c:	f7ff f9cc 	bl	8004808 <__errno>
 8005470:	4629      	mov	r1, r5
 8005472:	6006      	str	r6, [r0, #0]
 8005474:	4620      	mov	r0, r4
 8005476:	bd70      	pop	{r4, r5, r6, pc}

08005478 <xflow>:
 8005478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800547a:	4615      	mov	r5, r2
 800547c:	461c      	mov	r4, r3
 800547e:	b180      	cbz	r0, 80054a2 <xflow+0x2a>
 8005480:	4610      	mov	r0, r2
 8005482:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005486:	e9cd 0100 	strd	r0, r1, [sp]
 800548a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800548e:	4628      	mov	r0, r5
 8005490:	4621      	mov	r1, r4
 8005492:	f7fb f819 	bl	80004c8 <__aeabi_dmul>
 8005496:	2222      	movs	r2, #34	; 0x22
 8005498:	b003      	add	sp, #12
 800549a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800549e:	f7ff bfe1 	b.w	8005464 <with_errno>
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	e7ee      	b.n	8005486 <xflow+0xe>

080054a8 <__math_uflow>:
 80054a8:	2200      	movs	r2, #0
 80054aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054ae:	f7ff bfe3 	b.w	8005478 <xflow>

080054b2 <__math_oflow>:
 80054b2:	2200      	movs	r2, #0
 80054b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80054b8:	f7ff bfde 	b.w	8005478 <xflow>

080054bc <__ieee754_sqrt>:
 80054bc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005660 <__ieee754_sqrt+0x1a4>
 80054c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80054c8:	460b      	mov	r3, r1
 80054ca:	4606      	mov	r6, r0
 80054cc:	460d      	mov	r5, r1
 80054ce:	460a      	mov	r2, r1
 80054d0:	4604      	mov	r4, r0
 80054d2:	d10e      	bne.n	80054f2 <__ieee754_sqrt+0x36>
 80054d4:	4602      	mov	r2, r0
 80054d6:	f7fa fff7 	bl	80004c8 <__aeabi_dmul>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4630      	mov	r0, r6
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fa fe3b 	bl	800015c <__adddf3>
 80054e6:	4606      	mov	r6, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	4630      	mov	r0, r6
 80054ec:	4629      	mov	r1, r5
 80054ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f2:	2900      	cmp	r1, #0
 80054f4:	dc0d      	bgt.n	8005512 <__ieee754_sqrt+0x56>
 80054f6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80054fa:	ea5c 0c00 	orrs.w	ip, ip, r0
 80054fe:	d0f4      	beq.n	80054ea <__ieee754_sqrt+0x2e>
 8005500:	b139      	cbz	r1, 8005512 <__ieee754_sqrt+0x56>
 8005502:	4602      	mov	r2, r0
 8005504:	f7fa fe28 	bl	8000158 <__aeabi_dsub>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	f7fb f906 	bl	800071c <__aeabi_ddiv>
 8005510:	e7e9      	b.n	80054e6 <__ieee754_sqrt+0x2a>
 8005512:	1512      	asrs	r2, r2, #20
 8005514:	f000 8089 	beq.w	800562a <__ieee754_sqrt+0x16e>
 8005518:	2500      	movs	r5, #0
 800551a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800551e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	07d2      	lsls	r2, r2, #31
 8005528:	bf5c      	itt	pl
 800552a:	005b      	lslpl	r3, r3, #1
 800552c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005530:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005534:	bf58      	it	pl
 8005536:	0064      	lslpl	r4, r4, #1
 8005538:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800553c:	0062      	lsls	r2, r4, #1
 800553e:	2016      	movs	r0, #22
 8005540:	4629      	mov	r1, r5
 8005542:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8005546:	1076      	asrs	r6, r6, #1
 8005548:	190f      	adds	r7, r1, r4
 800554a:	429f      	cmp	r7, r3
 800554c:	bfde      	ittt	le
 800554e:	1bdb      	suble	r3, r3, r7
 8005550:	1939      	addle	r1, r7, r4
 8005552:	192d      	addle	r5, r5, r4
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	3801      	subs	r0, #1
 8005558:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800555c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005560:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005564:	d1f0      	bne.n	8005548 <__ieee754_sqrt+0x8c>
 8005566:	4604      	mov	r4, r0
 8005568:	2720      	movs	r7, #32
 800556a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800556e:	428b      	cmp	r3, r1
 8005570:	eb0c 0e00 	add.w	lr, ip, r0
 8005574:	dc02      	bgt.n	800557c <__ieee754_sqrt+0xc0>
 8005576:	d113      	bne.n	80055a0 <__ieee754_sqrt+0xe4>
 8005578:	4596      	cmp	lr, r2
 800557a:	d811      	bhi.n	80055a0 <__ieee754_sqrt+0xe4>
 800557c:	f1be 0f00 	cmp.w	lr, #0
 8005580:	eb0e 000c 	add.w	r0, lr, ip
 8005584:	da56      	bge.n	8005634 <__ieee754_sqrt+0x178>
 8005586:	2800      	cmp	r0, #0
 8005588:	db54      	blt.n	8005634 <__ieee754_sqrt+0x178>
 800558a:	f101 0801 	add.w	r8, r1, #1
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	4641      	mov	r1, r8
 8005592:	4596      	cmp	lr, r2
 8005594:	bf88      	it	hi
 8005596:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800559a:	eba2 020e 	sub.w	r2, r2, lr
 800559e:	4464      	add	r4, ip
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	3f01      	subs	r7, #1
 80055a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80055a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80055ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80055b0:	d1dd      	bne.n	800556e <__ieee754_sqrt+0xb2>
 80055b2:	4313      	orrs	r3, r2
 80055b4:	d01b      	beq.n	80055ee <__ieee754_sqrt+0x132>
 80055b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005664 <__ieee754_sqrt+0x1a8>
 80055ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005668 <__ieee754_sqrt+0x1ac>
 80055be:	e9da 0100 	ldrd	r0, r1, [sl]
 80055c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80055c6:	f7fa fdc7 	bl	8000158 <__aeabi_dsub>
 80055ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fb f9f3 	bl	80009c0 <__aeabi_dcmple>
 80055da:	b140      	cbz	r0, 80055ee <__ieee754_sqrt+0x132>
 80055dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80055e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80055e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80055e8:	d126      	bne.n	8005638 <__ieee754_sqrt+0x17c>
 80055ea:	463c      	mov	r4, r7
 80055ec:	3501      	adds	r5, #1
 80055ee:	106b      	asrs	r3, r5, #1
 80055f0:	0864      	lsrs	r4, r4, #1
 80055f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80055f6:	07ea      	lsls	r2, r5, #31
 80055f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80055fc:	bf48      	it	mi
 80055fe:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005602:	4620      	mov	r0, r4
 8005604:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005608:	e76d      	b.n	80054e6 <__ieee754_sqrt+0x2a>
 800560a:	0ae3      	lsrs	r3, r4, #11
 800560c:	3915      	subs	r1, #21
 800560e:	0564      	lsls	r4, r4, #21
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0fa      	beq.n	800560a <__ieee754_sqrt+0x14e>
 8005614:	02d8      	lsls	r0, r3, #11
 8005616:	d50a      	bpl.n	800562e <__ieee754_sqrt+0x172>
 8005618:	f1c2 0020 	rsb	r0, r2, #32
 800561c:	fa24 f000 	lsr.w	r0, r4, r0
 8005620:	1e55      	subs	r5, r2, #1
 8005622:	4094      	lsls	r4, r2
 8005624:	4303      	orrs	r3, r0
 8005626:	1b4a      	subs	r2, r1, r5
 8005628:	e776      	b.n	8005518 <__ieee754_sqrt+0x5c>
 800562a:	4611      	mov	r1, r2
 800562c:	e7f0      	b.n	8005610 <__ieee754_sqrt+0x154>
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	3201      	adds	r2, #1
 8005632:	e7ef      	b.n	8005614 <__ieee754_sqrt+0x158>
 8005634:	4688      	mov	r8, r1
 8005636:	e7aa      	b.n	800558e <__ieee754_sqrt+0xd2>
 8005638:	f7fa fd90 	bl	800015c <__adddf3>
 800563c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fb f9b0 	bl	80009ac <__aeabi_dcmplt>
 800564c:	b120      	cbz	r0, 8005658 <__ieee754_sqrt+0x19c>
 800564e:	1ca1      	adds	r1, r4, #2
 8005650:	bf08      	it	eq
 8005652:	3501      	addeq	r5, #1
 8005654:	3402      	adds	r4, #2
 8005656:	e7ca      	b.n	80055ee <__ieee754_sqrt+0x132>
 8005658:	3401      	adds	r4, #1
 800565a:	f024 0401 	bic.w	r4, r4, #1
 800565e:	e7c6      	b.n	80055ee <__ieee754_sqrt+0x132>
 8005660:	7ff00000 	.word	0x7ff00000
 8005664:	20000060 	.word	0x20000060
 8005668:	20000068 	.word	0x20000068

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
