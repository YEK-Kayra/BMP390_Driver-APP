
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001520  08001520  00011520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800154c  0800154c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800154c  0800154c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800154c  0800154c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800154c  0800154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001550  08001550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001560  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001560  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059e9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011d2  00000000  00000000  00025a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00026c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000507  00000000  00000000  000272c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f1f  00000000  00000000  000277cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008550  00000000  00000000  000286ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c1b7  00000000  00000000  00030c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a14  00000000  00000000  000acdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000ae80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001508 	.word	0x08001508

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001508 	.word	0x08001508

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f994 	bl	800047c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f86c 	bl	8000234 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f83c 	bl	80001d8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	b090      	sub	sp, #64	; 0x40
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0318 	add.w	r3, r7, #24
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f001 f99d 	bl	80014b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]
 8000180:	60da      	str	r2, [r3, #12]
 8000182:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000184:	2302      	movs	r3, #2
 8000186:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000188:	2301      	movs	r3, #1
 800018a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018c:	2310      	movs	r3, #16
 800018e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000190:	2300      	movs	r3, #0
 8000192:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000194:	f107 0318 	add.w	r3, r7, #24
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fd8d 	bl	8000cb8 <HAL_RCC_OscConfig>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001a4:	f000 f89e 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001a8:	230f      	movs	r3, #15
 80001aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ac:	2300      	movs	r3, #0
 80001ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fffb 	bl	80011bc <HAL_RCC_ClockConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001cc:	f000 f88a 	bl	80002e4 <Error_Handler>
  }
}
 80001d0:	bf00      	nop
 80001d2:	3740      	adds	r7, #64	; 0x40
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_I2C1_Init+0x50>)
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <MX_I2C1_Init+0x54>)
 80001e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_I2C1_Init+0x50>)
 80001e4:	4a12      	ldr	r2, [pc, #72]	; (8000230 <MX_I2C1_Init+0x58>)
 80001e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_I2C1_Init+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <MX_I2C1_Init+0x50>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <MX_I2C1_Init+0x50>)
 80001f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <MX_I2C1_Init+0x50>)
 800020a:	2200      	movs	r2, #0
 800020c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <MX_I2C1_Init+0x50>)
 8000210:	2200      	movs	r2, #0
 8000212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <MX_I2C1_Init+0x50>)
 8000216:	f000 fc0b 	bl	8000a30 <HAL_I2C_Init>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000220:	f000 f860 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000028 	.word	0x20000028
 800022c:	40005400 	.word	0x40005400
 8000230:	000186a0 	.word	0x000186a0

08000234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <MX_GPIO_Init+0xa8>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a23      	ldr	r2, [pc, #140]	; (80002dc <MX_GPIO_Init+0xa8>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0310 	and.w	r3, r3, #16
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_GPIO_Init+0xa8>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	60bb      	str	r3, [r7, #8]
 8000276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_GPIO_Init+0xa8>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <MX_GPIO_Init+0xa8>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000296:	f043 0308 	orr.w	r3, r3, #8
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_GPIO_Init+0xa8>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0308 	and.w	r3, r3, #8
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_GPIO_Init+0xac>)
 80002b0:	f000 fba6 	bl	8000a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4619      	mov	r1, r3
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_GPIO_Init+0xac>)
 80002ce:	f000 fa1b 	bl	8000708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40011000 	.word	0x40011000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <HAL_I2C_MspInit+0x74>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d125      	bne.n	80003c0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_I2C_MspInit+0x78>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a14      	ldr	r2, [pc, #80]	; (80003cc <HAL_I2C_MspInit+0x78>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_I2C_MspInit+0x78>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800038c:	23c0      	movs	r3, #192	; 0xc0
 800038e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000390:	2312      	movs	r3, #18
 8000392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <HAL_I2C_MspInit+0x7c>)
 80003a4:	f000 f9b0 	bl	8000708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <HAL_I2C_MspInit+0x78>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_I2C_MspInit+0x78>)
 80003ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b2:	61d3      	str	r3, [r2, #28]
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <HAL_I2C_MspInit+0x78>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40005400 	.word	0x40005400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <NMI_Handler+0x4>

080003da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <MemManage_Handler+0x4>

080003e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <BusFault_Handler+0x4>

080003ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <UsageFault_Handler+0x4>

080003f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041a:	f000 f875 	bl	8000508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000430:	f7ff fff7 	bl	8000422 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000436:	490c      	ldr	r1, [pc, #48]	; (8000468 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000438:	4a0c      	ldr	r2, [pc, #48]	; (800046c <LoopFillZerobss+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800044c:	4c09      	ldr	r4, [pc, #36]	; (8000474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800045a:	f001 f831 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff fe75 	bl	800014c <main>
  bx lr
 8000462:	4770      	bx	lr
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800046c:	08001554 	.word	0x08001554
  ldr r2, =_sbss
 8000470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000474:	20000080 	.word	0x20000080

08000478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC1_2_IRQHandler>
	...

0800047c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_Init+0x28>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <HAL_Init+0x28>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800048c:	2003      	movs	r0, #3
 800048e:	f000 f907 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000492:	200f      	movs	r0, #15
 8000494:	f000 f808 	bl	80004a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000498:	f7ff ff2a 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40022000 	.word	0x40022000

080004a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_InitTick+0x54>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_InitTick+0x58>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004be:	fbb3 f3f1 	udiv	r3, r3, r1
 80004c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f911 	bl	80006ee <HAL_SYSTICK_Config>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e00e      	b.n	80004f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b0f      	cmp	r3, #15
 80004da:	d80a      	bhi.n	80004f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004dc:	2200      	movs	r2, #0
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295
 80004e4:	f000 f8e7 	bl	80006b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <HAL_InitTick+0x5c>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e000      	b.n	80004f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000008 	.word	0x20000008
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_IncTick+0x1c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_IncTick+0x20>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4413      	add	r3, r2
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <HAL_IncTick+0x20>)
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	20000008 	.word	0x20000008
 8000528:	2000007c 	.word	0x2000007c

0800052c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <HAL_GetTick+0x10>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	2000007c 	.word	0x2000007c

08000540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__NVIC_SetPriorityGrouping+0x44>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000572:	4a04      	ldr	r2, [pc, #16]	; (8000584 <__NVIC_SetPriorityGrouping+0x44>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	60d3      	str	r3, [r2, #12]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__NVIC_GetPriorityGrouping+0x18>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	f003 0307 	and.w	r3, r3, #7
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	db0a      	blt.n	80005ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	490c      	ldr	r1, [pc, #48]	; (80005f0 <__NVIC_SetPriority+0x4c>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	0112      	lsls	r2, r2, #4
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	440b      	add	r3, r1
 80005c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005cc:	e00a      	b.n	80005e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4908      	ldr	r1, [pc, #32]	; (80005f4 <__NVIC_SetPriority+0x50>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f003 030f 	and.w	r3, r3, #15
 80005da:	3b04      	subs	r3, #4
 80005dc:	0112      	lsls	r2, r2, #4
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	440b      	add	r3, r1
 80005e2:	761a      	strb	r2, [r3, #24]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	f1c3 0307 	rsb	r3, r3, #7
 8000612:	2b04      	cmp	r3, #4
 8000614:	bf28      	it	cs
 8000616:	2304      	movcs	r3, #4
 8000618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3304      	adds	r3, #4
 800061e:	2b06      	cmp	r3, #6
 8000620:	d902      	bls.n	8000628 <NVIC_EncodePriority+0x30>
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3b03      	subs	r3, #3
 8000626:	e000      	b.n	800062a <NVIC_EncodePriority+0x32>
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 32ff 	mov.w	r2, #4294967295
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	43da      	mvns	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	401a      	ands	r2, r3
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000640:	f04f 31ff 	mov.w	r1, #4294967295
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	43d9      	mvns	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	4313      	orrs	r3, r2
         );
}
 8000652:	4618      	mov	r0, r3
 8000654:	3724      	adds	r7, #36	; 0x24
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800066c:	d301      	bcc.n	8000672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2301      	movs	r3, #1
 8000670:	e00f      	b.n	8000692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SysTick_Config+0x40>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067a:	210f      	movs	r1, #15
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f7ff ff90 	bl	80005a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SysTick_Config+0x40>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SysTick_Config+0x40>)
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff49 	bl	8000540 <__NVIC_SetPriorityGrouping>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006c8:	f7ff ff5e 	bl	8000588 <__NVIC_GetPriorityGrouping>
 80006cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff90 	bl	80005f8 <NVIC_EncodePriority>
 80006d8:	4602      	mov	r2, r0
 80006da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff5f 	bl	80005a4 <__NVIC_SetPriority>
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ffb0 	bl	800065c <SysTick_Config>
 80006fc:	4603      	mov	r3, r0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000708:	b480      	push	{r7}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071a:	e161      	b.n	80009e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800071c:	2201      	movs	r2, #1
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4013      	ands	r3, r2
 800072e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	429a      	cmp	r2, r3
 8000736:	f040 8150 	bne.w	80009da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a97      	ldr	r2, [pc, #604]	; (800099c <HAL_GPIO_Init+0x294>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d05e      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
 8000744:	4a95      	ldr	r2, [pc, #596]	; (800099c <HAL_GPIO_Init+0x294>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d875      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 800074a:	4a95      	ldr	r2, [pc, #596]	; (80009a0 <HAL_GPIO_Init+0x298>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d058      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
 8000750:	4a93      	ldr	r2, [pc, #588]	; (80009a0 <HAL_GPIO_Init+0x298>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d86f      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 8000756:	4a93      	ldr	r2, [pc, #588]	; (80009a4 <HAL_GPIO_Init+0x29c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d052      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
 800075c:	4a91      	ldr	r2, [pc, #580]	; (80009a4 <HAL_GPIO_Init+0x29c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d869      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 8000762:	4a91      	ldr	r2, [pc, #580]	; (80009a8 <HAL_GPIO_Init+0x2a0>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d04c      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
 8000768:	4a8f      	ldr	r2, [pc, #572]	; (80009a8 <HAL_GPIO_Init+0x2a0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d863      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 800076e:	4a8f      	ldr	r2, [pc, #572]	; (80009ac <HAL_GPIO_Init+0x2a4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d046      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
 8000774:	4a8d      	ldr	r2, [pc, #564]	; (80009ac <HAL_GPIO_Init+0x2a4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d85d      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 800077a:	2b12      	cmp	r3, #18
 800077c:	d82a      	bhi.n	80007d4 <HAL_GPIO_Init+0xcc>
 800077e:	2b12      	cmp	r3, #18
 8000780:	d859      	bhi.n	8000836 <HAL_GPIO_Init+0x12e>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <HAL_GPIO_Init+0x80>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000803 	.word	0x08000803
 800078c:	080007dd 	.word	0x080007dd
 8000790:	080007ef 	.word	0x080007ef
 8000794:	08000831 	.word	0x08000831
 8000798:	08000837 	.word	0x08000837
 800079c:	08000837 	.word	0x08000837
 80007a0:	08000837 	.word	0x08000837
 80007a4:	08000837 	.word	0x08000837
 80007a8:	08000837 	.word	0x08000837
 80007ac:	08000837 	.word	0x08000837
 80007b0:	08000837 	.word	0x08000837
 80007b4:	08000837 	.word	0x08000837
 80007b8:	08000837 	.word	0x08000837
 80007bc:	08000837 	.word	0x08000837
 80007c0:	08000837 	.word	0x08000837
 80007c4:	08000837 	.word	0x08000837
 80007c8:	08000837 	.word	0x08000837
 80007cc:	080007e5 	.word	0x080007e5
 80007d0:	080007f9 	.word	0x080007f9
 80007d4:	4a76      	ldr	r2, [pc, #472]	; (80009b0 <HAL_GPIO_Init+0x2a8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d013      	beq.n	8000802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007da:	e02c      	b.n	8000836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	623b      	str	r3, [r7, #32]
          break;
 80007e2:	e029      	b.n	8000838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	3304      	adds	r3, #4
 80007ea:	623b      	str	r3, [r7, #32]
          break;
 80007ec:	e024      	b.n	8000838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	3308      	adds	r3, #8
 80007f4:	623b      	str	r3, [r7, #32]
          break;
 80007f6:	e01f      	b.n	8000838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	330c      	adds	r3, #12
 80007fe:	623b      	str	r3, [r7, #32]
          break;
 8000800:	e01a      	b.n	8000838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800080a:	2304      	movs	r3, #4
 800080c:	623b      	str	r3, [r7, #32]
          break;
 800080e:	e013      	b.n	8000838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d105      	bne.n	8000824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000818:	2308      	movs	r3, #8
 800081a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	69fa      	ldr	r2, [r7, #28]
 8000820:	611a      	str	r2, [r3, #16]
          break;
 8000822:	e009      	b.n	8000838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000824:	2308      	movs	r3, #8
 8000826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	615a      	str	r2, [r3, #20]
          break;
 800082e:	e003      	b.n	8000838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
          break;
 8000834:	e000      	b.n	8000838 <HAL_GPIO_Init+0x130>
          break;
 8000836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	2bff      	cmp	r3, #255	; 0xff
 800083c:	d801      	bhi.n	8000842 <HAL_GPIO_Init+0x13a>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	e001      	b.n	8000846 <HAL_GPIO_Init+0x13e>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3304      	adds	r3, #4
 8000846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2bff      	cmp	r3, #255	; 0xff
 800084c:	d802      	bhi.n	8000854 <HAL_GPIO_Init+0x14c>
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	e002      	b.n	800085a <HAL_GPIO_Init+0x152>
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	3b08      	subs	r3, #8
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	210f      	movs	r1, #15
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	401a      	ands	r2, r3
 800086c:	6a39      	ldr	r1, [r7, #32]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	431a      	orrs	r2, r3
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80a9 	beq.w	80009da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000888:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <HAL_GPIO_Init+0x2ac>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <HAL_GPIO_Init+0x2ac>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <HAL_GPIO_Init+0x2ac>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008a0:	4a45      	ldr	r2, [pc, #276]	; (80009b8 <HAL_GPIO_Init+0x2b0>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	3302      	adds	r3, #2
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	220f      	movs	r2, #15
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <HAL_GPIO_Init+0x2b4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d00d      	beq.n	80008e8 <HAL_GPIO_Init+0x1e0>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a3c      	ldr	r2, [pc, #240]	; (80009c0 <HAL_GPIO_Init+0x2b8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d007      	beq.n	80008e4 <HAL_GPIO_Init+0x1dc>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <HAL_GPIO_Init+0x2bc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d101      	bne.n	80008e0 <HAL_GPIO_Init+0x1d8>
 80008dc:	2302      	movs	r3, #2
 80008de:	e004      	b.n	80008ea <HAL_GPIO_Init+0x1e2>
 80008e0:	2303      	movs	r3, #3
 80008e2:	e002      	b.n	80008ea <HAL_GPIO_Init+0x1e2>
 80008e4:	2301      	movs	r3, #1
 80008e6:	e000      	b.n	80008ea <HAL_GPIO_Init+0x1e2>
 80008e8:	2300      	movs	r3, #0
 80008ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ec:	f002 0203 	and.w	r2, r2, #3
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	4093      	lsls	r3, r2
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008fa:	492f      	ldr	r1, [pc, #188]	; (80009b8 <HAL_GPIO_Init+0x2b0>)
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	3302      	adds	r3, #2
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	492b      	ldr	r1, [pc, #172]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	608b      	str	r3, [r1, #8]
 8000920:	e006      	b.n	8000930 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	43db      	mvns	r3, r3
 800092a:	4927      	ldr	r1, [pc, #156]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800092c:	4013      	ands	r3, r2
 800092e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	4921      	ldr	r1, [pc, #132]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	4313      	orrs	r3, r2
 8000946:	60cb      	str	r3, [r1, #12]
 8000948:	e006      	b.n	8000958 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800094c:	68da      	ldr	r2, [r3, #12]
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	43db      	mvns	r3, r3
 8000952:	491d      	ldr	r1, [pc, #116]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000954:	4013      	ands	r3, r2
 8000956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4917      	ldr	r1, [pc, #92]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4313      	orrs	r3, r2
 800096e:	604b      	str	r3, [r1, #4]
 8000970:	e006      	b.n	8000980 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	43db      	mvns	r3, r3
 800097a:	4913      	ldr	r1, [pc, #76]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800097c:	4013      	ands	r3, r2
 800097e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d01f      	beq.n	80009cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	490d      	ldr	r1, [pc, #52]	; (80009c8 <HAL_GPIO_Init+0x2c0>)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	600b      	str	r3, [r1, #0]
 8000998:	e01f      	b.n	80009da <HAL_GPIO_Init+0x2d2>
 800099a:	bf00      	nop
 800099c:	10320000 	.word	0x10320000
 80009a0:	10310000 	.word	0x10310000
 80009a4:	10220000 	.word	0x10220000
 80009a8:	10210000 	.word	0x10210000
 80009ac:	10120000 	.word	0x10120000
 80009b0:	10110000 	.word	0x10110000
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_GPIO_Init+0x2f4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4909      	ldr	r1, [pc, #36]	; (80009fc <HAL_GPIO_Init+0x2f4>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f47f ae96 	bne.w	800071c <HAL_GPIO_Init+0x14>
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	372c      	adds	r7, #44	; 0x2c
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40010400 	.word	0x40010400

08000a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a10:	787b      	ldrb	r3, [r7, #1]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a16:	887a      	ldrh	r2, [r7, #2]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a1c:	e003      	b.n	8000a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	041a      	lsls	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	611a      	str	r2, [r3, #16]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e12b      	b.n	8000c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fc7c 	bl	8000354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2224      	movs	r2, #36	; 0x24
 8000a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000a94:	f000 fcda 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8000a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a81      	ldr	r2, [pc, #516]	; (8000ca4 <HAL_I2C_Init+0x274>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d807      	bhi.n	8000ab4 <HAL_I2C_Init+0x84>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4a80      	ldr	r2, [pc, #512]	; (8000ca8 <HAL_I2C_Init+0x278>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	bf94      	ite	ls
 8000aac:	2301      	movls	r3, #1
 8000aae:	2300      	movhi	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	e006      	b.n	8000ac2 <HAL_I2C_Init+0x92>
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4a7d      	ldr	r2, [pc, #500]	; (8000cac <HAL_I2C_Init+0x27c>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	bf94      	ite	ls
 8000abc:	2301      	movls	r3, #1
 8000abe:	2300      	movhi	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e0e7      	b.n	8000c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4a78      	ldr	r2, [pc, #480]	; (8000cb0 <HAL_I2C_Init+0x280>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0c9b      	lsrs	r3, r3, #18
 8000ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a6a      	ldr	r2, [pc, #424]	; (8000ca4 <HAL_I2C_Init+0x274>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d802      	bhi.n	8000b04 <HAL_I2C_Init+0xd4>
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	e009      	b.n	8000b18 <HAL_I2C_Init+0xe8>
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	4a69      	ldr	r2, [pc, #420]	; (8000cb4 <HAL_I2C_Init+0x284>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	099b      	lsrs	r3, r3, #6
 8000b16:	3301      	adds	r3, #1
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	495c      	ldr	r1, [pc, #368]	; (8000ca4 <HAL_I2C_Init+0x274>)
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d819      	bhi.n	8000b6c <HAL_I2C_Init+0x13c>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	1e59      	subs	r1, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000b4c:	400b      	ands	r3, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00a      	beq.n	8000b68 <HAL_I2C_Init+0x138>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1e59      	subs	r1, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b66:	e051      	b.n	8000c0c <HAL_I2C_Init+0x1dc>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e04f      	b.n	8000c0c <HAL_I2C_Init+0x1dc>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <HAL_I2C_Init+0x168>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	1e58      	subs	r0, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6859      	ldr	r1, [r3, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	440b      	add	r3, r1
 8000b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b86:	3301      	adds	r3, #1
 8000b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	e012      	b.n	8000bbe <HAL_I2C_Init+0x18e>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	1e58      	subs	r0, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	0099      	lsls	r1, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_I2C_Init+0x196>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e022      	b.n	8000c0c <HAL_I2C_Init+0x1dc>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10e      	bne.n	8000bec <HAL_I2C_Init+0x1bc>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6859      	ldr	r1, [r3, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	440b      	add	r3, r1
 8000bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bea:	e00f      	b.n	8000c0c <HAL_I2C_Init+0x1dc>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	1e58      	subs	r0, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6859      	ldr	r1, [r3, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	0099      	lsls	r1, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	6809      	ldr	r1, [r1, #0]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6911      	ldr	r1, [r2, #16]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68d2      	ldr	r2, [r2, #12]
 8000c46:	4311      	orrs	r1, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0201 	orr.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2220      	movs	r2, #32
 8000c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	000186a0 	.word	0x000186a0
 8000ca8:	001e847f 	.word	0x001e847f
 8000cac:	003d08ff 	.word	0x003d08ff
 8000cb0:	431bde83 	.word	0x431bde83
 8000cb4:	10624dd3 	.word	0x10624dd3

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e272      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8087 	beq.w	8000de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd8:	4b92      	ldr	r3, [pc, #584]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce4:	4b8f      	ldr	r3, [pc, #572]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d112      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
 8000cf0:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d10b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d06c      	beq.n	8000de4 <HAL_RCC_OscConfig+0x12c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d168      	bne.n	8000de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e24c      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x76>
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a7f      	ldr	r2, [pc, #508]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e02e      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x98>
 8000d36:	4b7b      	ldr	r3, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a7a      	ldr	r2, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a77      	ldr	r2, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e01d      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0xbc>
 8000d5a:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a71      	ldr	r2, [pc, #452]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b6f      	ldr	r3, [pc, #444]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a6e      	ldr	r2, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d74:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a6a      	ldr	r2, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a67      	ldr	r2, [pc, #412]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fbca 	bl	800052c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fbc6 	bl	800052c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e200      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe4>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fbb6 	bl	800052c <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fbb2 	bl	800052c <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1ec      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x10c>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d063      	beq.n	8000eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
 8000e0a:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e1c0      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4939      	ldr	r1, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	e03a      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d020      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fb6b 	bl	800052c <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fb67 	bl	800052c <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1a1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4927      	ldr	r1, [pc, #156]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fb4a 	bl	800052c <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fb46 	bl	800052c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e180      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03a      	beq.n	8000f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d019      	beq.n	8000f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fb2a 	bl	800052c <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fb26 	bl	800052c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e160      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 faba 	bl	8001474 <RCC_Delay>
 8000f00:	e01c      	b.n	8000f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fb10 	bl	800052c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e00f      	b.n	8000f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fb0c 	bl	800052c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d908      	bls.n	8000f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e146      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42420000 	.word	0x42420000
 8000f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e9      	bne.n	8000f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a6 	beq.w	8001096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b88      	ldr	r3, [pc, #544]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a87      	ldr	r2, [pc, #540]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b85      	ldr	r3, [pc, #532]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	4b82      	ldr	r3, [pc, #520]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f82:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7e      	ldr	r2, [pc, #504]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff facd 	bl	800052c <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f96:	f7ff fac9 	bl	800052c <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e103      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b75      	ldr	r3, [pc, #468]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x312>
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a6e      	ldr	r2, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e02d      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x334>
 8000fd2:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a69      	ldr	r2, [pc, #420]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a66      	ldr	r2, [pc, #408]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e01c      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x356>
 8000ff4:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a60      	ldr	r2, [pc, #384]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e00b      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a5a      	ldr	r2, [pc, #360]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b58      	ldr	r3, [pc, #352]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a57      	ldr	r2, [pc, #348]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fa7d 	bl	800052c <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fa79 	bl	800052c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0b1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ee      	beq.n	8001036 <HAL_RCC_OscConfig+0x37e>
 8001058:	e014      	b.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fa67 	bl	800052c <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fa63 	bl	800052c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e09b      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ee      	bne.n	8001062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d105      	bne.n	8001096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d061      	beq.n	8001170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d146      	bne.n	8001142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fa37 	bl	800052c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fa33 	bl	800052c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e06d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d108      	bne.n	80010fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4921      	ldr	r1, [pc, #132]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a19      	ldr	r1, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	430b      	orrs	r3, r1
 800110e:	491b      	ldr	r1, [pc, #108]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fa07 	bl	800052c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fa03 	bl	800052c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e03d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x46a>
 8001140:	e035      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff f9f0 	bl	800052c <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff f9ec 	bl	800052c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e026      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x498>
 800116e:	e01e      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d107      	bne.n	8001188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e019      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
 8001184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_OscConfig+0x500>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0d0      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d910      	bls.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0207 	bic.w	r2, r3, #7
 80011e6:	4965      	ldr	r1, [pc, #404]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800123a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d040      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d115      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e073      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06b      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4936      	ldr	r1, [pc, #216]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff f93e 	bl	800052c <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff f93a 	bl	800052c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e053      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d210      	bcs.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 0207 	bic.w	r2, r3, #7
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f821 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1cc>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1d0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f89c 	bl	80004a8 <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	40021000 	.word	0x40021000
 8001384:	08001520 	.word	0x08001520
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x36>
 80013be:	e027      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	e027      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0c5b      	lsrs	r3, r3, #17
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	fb03 f202 	mul.w	r2, r3, r2
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e004      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	693b      	ldr	r3, [r7, #16]
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	007a1200 	.word	0x007a1200
 800142c:	08001538 	.word	0x08001538
 8001430:	08001548 	.word	0x08001548
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	08001530 	.word	0x08001530

08001474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <RCC_Delay+0x34>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <RCC_Delay+0x38>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a5b      	lsrs	r3, r3, #9
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001490:	bf00      	nop
  }
  while (Delay --);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	60fa      	str	r2, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <RCC_Delay+0x1c>
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000
 80014ac:	10624dd3 	.word	0x10624dd3

080014b0 <memset>:
 80014b0:	4603      	mov	r3, r0
 80014b2:	4402      	add	r2, r0
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d100      	bne.n	80014ba <memset+0xa>
 80014b8:	4770      	bx	lr
 80014ba:	f803 1b01 	strb.w	r1, [r3], #1
 80014be:	e7f9      	b.n	80014b4 <memset+0x4>

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2600      	movs	r6, #0
 80014c4:	4d0c      	ldr	r5, [pc, #48]	; (80014f8 <__libc_init_array+0x38>)
 80014c6:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c8:	1b64      	subs	r4, r4, r5
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	42a6      	cmp	r6, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	f000 f81a 	bl	8001508 <_init>
 80014d4:	2600      	movs	r6, #0
 80014d6:	4d0a      	ldr	r5, [pc, #40]	; (8001500 <__libc_init_array+0x40>)
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <__libc_init_array+0x44>)
 80014da:	1b64      	subs	r4, r4, r5
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e8:	4798      	blx	r3
 80014ea:	3601      	adds	r6, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f2:	4798      	blx	r3
 80014f4:	3601      	adds	r6, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	0800154c 	.word	0x0800154c
 80014fc:	0800154c 	.word	0x0800154c
 8001500:	0800154c 	.word	0x0800154c
 8001504:	08001550 	.word	0x08001550

08001508 <_init>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr

08001514 <_fini>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr
