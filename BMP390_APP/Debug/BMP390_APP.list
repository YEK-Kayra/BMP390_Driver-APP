
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003430  08003430  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003430  08003430  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003444  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003444  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000700b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013b7  00000000  00000000  00027083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  00028440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052f  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016699  00000000  00000000  00029037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090cd  00000000  00000000  0003f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000803c8  00000000  00000000  0004879d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001be4  00000000  00000000  000c8b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000ca74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033ec 	.word	0x080033ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080033ec 	.word	0x080033ec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <BMP390_Init>:
 * NOTE ==> if our sensor does soft reset. All params of the sensor are cleared. We have to init our sensor properly again.
 */

#include "bmp390.h"

_Bool BMP390_Init(BMP390_HandleTypeDef *BMP390){
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af04      	add	r7, sp, #16
 800098e:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, 10, 1000) != HAL_OK){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	69d8      	ldr	r0, [r3, #28]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8b19      	ldrh	r1, [r3, #24]
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	220a      	movs	r2, #10
 800099e:	f001 fc1b 	bl	80021d8 <HAL_I2C_IsDeviceReady>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <BMP390_Init+0x2c>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <BMP390_Init+0x120>)
 80009b0:	f000 ff54 	bl	800185c <HAL_GPIO_WritePin>

	 }

	 BMP390_Get_RawCalibCoeff(BMP390);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f879 	bl	8000aac <BMP390_Get_RawCalibCoeff>

	 BMP390_Calc_PrcsdCalibrationCoeff(BMP390);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f97a 	bl	8000cb4 <BMP390_Calc_PrcsdCalibrationCoeff>

	 BMP390_Set_DefaultParams(BMP390);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fabf 	bl	8000f44 <BMP390_Set_DefaultParams>

	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	799b      	ldrb	r3, [r3, #6]
 80009d2:	005b      	lsls	r3, r3, #1
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_press)<<0);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	795b      	ldrb	r3, [r3, #5]
 80009de:	b25b      	sxtb	r3, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	b2da      	uxtb	r2, r3
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73


	 BMP390->CONFIG = ((BMP390->Params.filtercoef)<<1);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	 BMP390->ODR 	= (BMP390->Params.odr);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	785a      	ldrb	r2, [r3, #1]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	78db      	ldrb	r3, [r3, #3]
 8000a08:	b25a      	sxtb	r2, r3
			 	   ((BMP390->Params.temp_osrs)<<3);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	00db      	lsls	r3, r3, #3
	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_PWR_CTRL , 1, &BMP390->PWR_CTRL, 1, 1000);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69d8      	ldr	r0, [r3, #28]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	8b19      	ldrh	r1, [r3, #24]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3373      	adds	r3, #115	; 0x73
 8000a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2e:	9202      	str	r2, [sp, #8]
 8000a30:	2201      	movs	r2, #1
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	221b      	movs	r2, #27
 8000a3a:	f001 f86b 	bl	8001b14 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_CONFIG , 1, &BMP390->CONFIG, 1, 1000);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69d8      	ldr	r0, [r3, #28]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	8b19      	ldrh	r1, [r3, #24]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3370      	adds	r3, #112	; 0x70
 8000a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	2201      	movs	r2, #1
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	221f      	movs	r2, #31
 8000a5a:	f001 f85b 	bl	8001b14 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_ODR , 1, &BMP390->ODR, 1, 1000);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69d8      	ldr	r0, [r3, #28]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8b19      	ldrh	r1, [r3, #24]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3371      	adds	r3, #113	; 0x71
 8000a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6e:	9202      	str	r2, [sp, #8]
 8000a70:	2201      	movs	r2, #1
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	221d      	movs	r2, #29
 8000a7a:	f001 f84b 	bl	8001b14 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_OSR , 1, &BMP390->OSR, 1, 1000);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69d8      	ldr	r0, [r3, #28]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	8b19      	ldrh	r1, [r3, #24]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3372      	adds	r3, #114	; 0x72
 8000a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8e:	9202      	str	r2, [sp, #8]
 8000a90:	2201      	movs	r2, #1
 8000a92:	9201      	str	r2, [sp, #4]
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	221c      	movs	r2, #28
 8000a9a:	f001 f83b 	bl	8001b14 <HAL_I2C_Mem_Write>

return true;
 8000a9e:	2301      	movs	r3, #1

}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40011000 	.word	0x40011000

08000aac <BMP390_Get_RawCalibCoeff>:

_Bool BMP390_Get_RawCalibCoeff(BMP390_HandleTypeDef *BMP390){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	6078      	str	r0, [r7, #4]

	uint8_t BMP390_CalibCoeff[21];
	uint8_t cnt = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_CalibCoeff, 1, &BMP390_CalibCoeff[0], 21, 1000);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69d8      	ldr	r0, [r3, #28]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	8b19      	ldrh	r1, [r3, #24]
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2315      	movs	r3, #21
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2231      	movs	r2, #49	; 0x31
 8000ad4:	f001 f918 	bl	8001d08 <HAL_I2C_Mem_Read>

	BMP390->Raw_NVM.NVM_PAR_T1  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3320      	adds	r3, #32
 8000adc:	443b      	add	r3, r7
 8000ade:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	3320      	adds	r3, #32
 8000aea:	443b      	add	r3, r7
 8000aec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	841a      	strh	r2, [r3, #32]
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3302      	adds	r3, #2
 8000b02:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_T2  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	3320      	adds	r3, #32
 8000b08:	443b      	add	r3, r7
 8000b0a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	7ffb      	ldrb	r3, [r7, #31]
 8000b12:	3301      	adds	r3, #1
 8000b14:	3320      	adds	r3, #32
 8000b16:	443b      	add	r3, r7
 8000b18:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	845a      	strh	r2, [r3, #34]	; 0x22
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_T3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	3320      	adds	r3, #32
 8000b34:	443b      	add	r3, r7
 8000b36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b3a:	b25a      	sxtb	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b42:	7ffb      	ldrb	r3, [r7, #31]
 8000b44:	3301      	adds	r3, #1
 8000b46:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P1  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000b48:	7ffb      	ldrb	r3, [r7, #31]
 8000b4a:	3320      	adds	r3, #32
 8000b4c:	443b      	add	r3, r7
 8000b4e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7ffb      	ldrb	r3, [r7, #31]
 8000b56:	3301      	adds	r3, #1
 8000b58:	3320      	adds	r3, #32
 8000b5a:	443b      	add	r3, r7
 8000b5c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	84da      	strh	r2, [r3, #38]	; 0x26
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	3302      	adds	r3, #2
 8000b70:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P2  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	3320      	adds	r3, #32
 8000b76:	443b      	add	r3, r7
 8000b78:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	3301      	adds	r3, #1
 8000b82:	3320      	adds	r3, #32
 8000b84:	443b      	add	r3, r7
 8000b86:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	851a      	strh	r2, [r3, #40]	; 0x28
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	3320      	adds	r3, #32
 8000ba0:	443b      	add	r3, r7
 8000ba2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P4  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000bb4:	7ffb      	ldrb	r3, [r7, #31]
 8000bb6:	3320      	adds	r3, #32
 8000bb8:	443b      	add	r3, r7
 8000bba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000bc6:	7ffb      	ldrb	r3, [r7, #31]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P5  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000bcc:	7ffb      	ldrb	r3, [r7, #31]
 8000bce:	3320      	adds	r3, #32
 8000bd0:	443b      	add	r3, r7
 8000bd2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	3320      	adds	r3, #32
 8000bde:	443b      	add	r3, r7
 8000be0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P6  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	3320      	adds	r3, #32
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	7ffb      	ldrb	r3, [r7, #31]
 8000c06:	3301      	adds	r3, #1
 8000c08:	3320      	adds	r3, #32
 8000c0a:	443b      	add	r3, r7
 8000c0c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000c1e:	7ffb      	ldrb	r3, [r7, #31]
 8000c20:	3302      	adds	r3, #2
 8000c22:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P7  = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	3320      	adds	r3, #32
 8000c28:	443b      	add	r3, r7
 8000c2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c2e:	b25a      	sxtb	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c36:	7ffb      	ldrb	r3, [r7, #31]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P8  = (int8_t)((BMP390_CalibCoeff[cnt]));  									 cnt+=1;
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	3320      	adds	r3, #32
 8000c40:	443b      	add	r3, r7
 8000c42:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c46:	b25a      	sxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000c4e:	7ffb      	ldrb	r3, [r7, #31]
 8000c50:	3301      	adds	r3, #1
 8000c52:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P9  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	3320      	adds	r3, #32
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	7ffb      	ldrb	r3, [r7, #31]
 8000c62:	3301      	adds	r3, #1
 8000c64:	3320      	adds	r3, #32
 8000c66:	443b      	add	r3, r7
 8000c68:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	865a      	strh	r2, [r3, #50]	; 0x32
 8000c78:	7ffb      	ldrb	r3, [r7, #31]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P10 = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 8000c7e:	7ffb      	ldrb	r3, [r7, #31]
 8000c80:	3320      	adds	r3, #32
 8000c82:	443b      	add	r3, r7
 8000c84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000c90:	7ffb      	ldrb	r3, [r7, #31]
 8000c92:	3301      	adds	r3, #1
 8000c94:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.NVM_PAR_P11 = (int8_t)((BMP390_CalibCoeff[cnt]));
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	3320      	adds	r3, #32
 8000c9a:	443b      	add	r3, r7
 8000c9c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ca0:	b25a      	sxtb	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

return true;
 8000ca8:	2301      	movs	r3, #1

}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <BMP390_Calc_PrcsdCalibrationCoeff>:

_Bool BMP390_Calc_PrcsdCalibrationCoeff(BMP390_HandleTypeDef *BMP390){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	BMP390->Prcsd_NVM.PAR_T1 = (BMP390->Raw_NVM.NVM_PAR_T1 / pow(2,-8));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	8c1b      	ldrh	r3, [r3, #32]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb95 	bl	80003f0 <__aeabi_i2d>
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	4b93      	ldr	r3, [pc, #588]	; (8000f18 <BMP390_Calc_PrcsdCalibrationCoeff+0x264>)
 8000ccc:	f7ff fd24 	bl	8000718 <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fe06 	bl	80008e8 <__aeabi_d2f>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
	BMP390->Prcsd_NVM.PAR_T2 = (BMP390->Raw_NVM.NVM_PAR_T2 / pow(2,30));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb82 	bl	80003f0 <__aeabi_i2d>
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <BMP390_Calc_PrcsdCalibrationCoeff+0x268>)
 8000cf2:	f7ff fd11 	bl	8000718 <__aeabi_ddiv>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff fdf3 	bl	80008e8 <__aeabi_d2f>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
	BMP390->Prcsd_NVM.PAR_T3 = (BMP390->Raw_NVM.NVM_PAR_T3 / pow(2,48));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb6e 	bl	80003f0 <__aeabi_i2d>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b81      	ldr	r3, [pc, #516]	; (8000f20 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8000d1a:	f7ff fcfd 	bl	8000718 <__aeabi_ddiv>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fddf 	bl	80008e8 <__aeabi_d2f>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
	BMP390->Prcsd_NVM.PAR_P1 = ((BMP390->Raw_NVM.NVM_PAR_P1 - pow(2,14)) / pow(2,20));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb5a 	bl	80003f0 <__aeabi_i2d>
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 8000d42:	f7ff fa07 	bl	8000154 <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b75      	ldr	r3, [pc, #468]	; (8000f28 <BMP390_Calc_PrcsdCalibrationCoeff+0x274>)
 8000d54:	f7ff fce0 	bl	8000718 <__aeabi_ddiv>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff fdc2 	bl	80008e8 <__aeabi_d2f>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	645a      	str	r2, [r3, #68]	; 0x44
	BMP390->Prcsd_NVM.PAR_P2 = ((BMP390->Raw_NVM.NVM_PAR_P2 - pow(2,14)) / pow(2,29));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3d 	bl	80003f0 <__aeabi_i2d>
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 8000d7c:	f7ff f9ea 	bl	8000154 <__aeabi_dsub>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b67      	ldr	r3, [pc, #412]	; (8000f2c <BMP390_Calc_PrcsdCalibrationCoeff+0x278>)
 8000d8e:	f7ff fcc3 	bl	8000718 <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fda5 	bl	80008e8 <__aeabi_d2f>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	649a      	str	r2, [r3, #72]	; 0x48
	BMP390->Prcsd_NVM.PAR_P3 = (BMP390->Raw_NVM.NVM_PAR_P3 / pow(2,32));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb20 	bl	80003f0 <__aeabi_i2d>
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <BMP390_Calc_PrcsdCalibrationCoeff+0x27c>)
 8000db6:	f7ff fcaf 	bl	8000718 <__aeabi_ddiv>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f7ff fd91 	bl	80008e8 <__aeabi_d2f>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	64da      	str	r2, [r3, #76]	; 0x4c
	BMP390->Prcsd_NVM.PAR_P4 = (BMP390->Raw_NVM.NVM_PAR_P4 / pow(2,37));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f993 302b 	ldrsb.w	r3, [r3, #43]	; 0x2b
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb0c 	bl	80003f0 <__aeabi_i2d>
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <BMP390_Calc_PrcsdCalibrationCoeff+0x280>)
 8000dde:	f7ff fc9b 	bl	8000718 <__aeabi_ddiv>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff fd7d 	bl	80008e8 <__aeabi_d2f>
 8000dee:	4602      	mov	r2, r0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	651a      	str	r2, [r3, #80]	; 0x50
	BMP390->Prcsd_NVM.PAR_P5 = (BMP390->Raw_NVM.NVM_PAR_P5 / pow(2,-3));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff faf9 	bl	80003f0 <__aeabi_i2d>
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000e06:	f7ff fc87 	bl	8000718 <__aeabi_ddiv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f7ff fd69 	bl	80008e8 <__aeabi_d2f>
 8000e16:	4602      	mov	r2, r0
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	655a      	str	r2, [r3, #84]	; 0x54
	BMP390->Prcsd_NVM.PAR_P6 = (BMP390->Raw_NVM.NVM_PAR_P6 / pow(2,6));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fae5 	bl	80003f0 <__aeabi_i2d>
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <BMP390_Calc_PrcsdCalibrationCoeff+0x284>)
 8000e2c:	f7ff fc74 	bl	8000718 <__aeabi_ddiv>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fd56 	bl	80008e8 <__aeabi_d2f>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	659a      	str	r2, [r3, #88]	; 0x58
	BMP390->Prcsd_NVM.PAR_P7 = (BMP390->Raw_NVM.NVM_PAR_P7 / pow(2,8));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fad1 	bl	80003f0 <__aeabi_i2d>
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <BMP390_Calc_PrcsdCalibrationCoeff+0x288>)
 8000e54:	f7ff fc60 	bl	8000718 <__aeabi_ddiv>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fd42 	bl	80008e8 <__aeabi_d2f>
 8000e64:	4602      	mov	r2, r0
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	65da      	str	r2, [r3, #92]	; 0x5c
	BMP390->Prcsd_NVM.PAR_P8 = (BMP390->Raw_NVM.NVM_PAR_P8 / pow(2,15));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fabd 	bl	80003f0 <__aeabi_i2d>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <BMP390_Calc_PrcsdCalibrationCoeff+0x28c>)
 8000e7c:	f7ff fc4c 	bl	8000718 <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fd2e 	bl	80008e8 <__aeabi_d2f>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	661a      	str	r2, [r3, #96]	; 0x60
	BMP390->Prcsd_NVM.PAR_P9 = (BMP390->Raw_NVM.NVM_PAR_P9 / pow(2,48));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff faa9 	bl	80003f0 <__aeabi_i2d>
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8000ea4:	f7ff fc38 	bl	8000718 <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fd1a 	bl	80008e8 <__aeabi_d2f>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	665a      	str	r2, [r3, #100]	; 0x64
	BMP390->Prcsd_NVM.PAR_P10 = (BMP390->Raw_NVM.NVM_PAR_P10 / pow(2,48));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fa95 	bl	80003f0 <__aeabi_i2d>
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8000ecc:	f7ff fc24 	bl	8000718 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd06 	bl	80008e8 <__aeabi_d2f>
 8000edc:	4602      	mov	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	669a      	str	r2, [r3, #104]	; 0x68
	BMP390->Prcsd_NVM.PAR_P11 = (BMP390->Raw_NVM.NVM_PAR_P11 / pow(2,65));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fa81 	bl	80003f0 <__aeabi_i2d>
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8000ef6:	f7ff fc0f 	bl	8000718 <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fcf1 	bl	80008e8 <__aeabi_d2f>
 8000f06:	4602      	mov	r2, r0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	66da      	str	r2, [r3, #108]	; 0x6c

return true;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	3f700000 	.word	0x3f700000
 8000f1c:	41d00000 	.word	0x41d00000
 8000f20:	42f00000 	.word	0x42f00000
 8000f24:	40d00000 	.word	0x40d00000
 8000f28:	41300000 	.word	0x41300000
 8000f2c:	41c00000 	.word	0x41c00000
 8000f30:	41f00000 	.word	0x41f00000
 8000f34:	42400000 	.word	0x42400000
 8000f38:	40500000 	.word	0x40500000
 8000f3c:	40700000 	.word	0x40700000
 8000f40:	40e00000 	.word	0x40e00000

08000f44 <BMP390_Set_DefaultParams>:

_Bool BMP390_Set_DefaultParams(BMP390_HandleTypeDef *BMP390){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	BMP390->Params.mode = BMP390_Mode_Normal;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	701a      	strb	r2, [r3, #0]
	BMP390->Params.stat_meas_press = Enable;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	715a      	strb	r2, [r3, #5]
	BMP390->Params.stat_meas_temp = Enable;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	719a      	strb	r2, [r3, #6]
	BMP390->Params.press_osrs = BMP390_Oversampling_X8 ;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	70da      	strb	r2, [r3, #3]
	BMP390->Params.temp_osrs= BMP390_Oversampling_X2 ;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	711a      	strb	r2, [r3, #4]
	BMP390->Params.filtercoef = BMP390_Filter_Coef_3;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	709a      	strb	r2, [r3, #2]
	BMP390->Params.odr = BMP390_ODR_50;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	705a      	strb	r2, [r3, #1]

return true;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 f9a6 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f816 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 f87e 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f94:	f000 f84e 	bl	8001034 <MX_I2C1_Init>

  /**
   * Ref_Alt_Sel is a selection; false value : it sets the reference altitude to the current location (0 meters)
   * 							 true value  : it sets the reference altitude to sea level
   */
  BMP390.BMP390_I2C_ADDRESS = BMP390_I2C_ADDRESS_L;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <main+0x30>)
 8000f9a:	2276      	movs	r2, #118	; 0x76
 8000f9c:	831a      	strh	r2, [r3, #24]
  BMP390.i2c = &hi2c1;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <main+0x30>)
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <main+0x34>)
 8000fa2:	61da      	str	r2, [r3, #28]
  BMP390.Ref_Alt_Sel = false;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <main+0x30>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  BMP390_Init(&BMP390);
 8000fac:	4801      	ldr	r0, [pc, #4]	; (8000fb4 <main+0x30>)
 8000fae:	f7ff fceb 	bl	8000988 <BMP390_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x2e>
 8000fb4:	2000007c 	.word	0x2000007c
 8000fb8:	20000028 	.word	0x20000028

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b090      	sub	sp, #64	; 0x40
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 f9e2 	bl	8003394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fdd2 	bl	8002b9c <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ffe:	f000 f89f 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f840 	bl	80030a0 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001026:	f000 f88b 	bl	8001140 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3740      	adds	r7, #64	; 0x40
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f000 fc0b 	bl	800188c <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f860 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000028 	.word	0x20000028
 8001088:	40005400 	.word	0x40005400
 800108c:	000186a0 	.word	0x000186a0

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_GPIO_Init+0xa8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0xac>)
 800110c:	f000 fba6 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_GPIO_Init+0xac>)
 800112a:	f000 fa1b 	bl	8001564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_MspInit+0x5c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x5c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_MspInit+0x60>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_MspInit+0x60>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_I2C_MspInit+0x74>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d125      	bne.n	800121c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_I2C_MspInit+0x78>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_I2C_MspInit+0x78>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_I2C_MspInit+0x78>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e8:	23c0      	movs	r3, #192	; 0xc0
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_I2C_MspInit+0x7c>)
 8001200:	f000 f9b0 	bl	8001564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0x78>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0x78>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0x78>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f875 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fff7 	bl	800127e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001292:	490c      	ldr	r1, [pc, #48]	; (80012c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a8:	4c09      	ldr	r4, [pc, #36]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 f875 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fe63 	bl	8000f84 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c8:	08003438 	.word	0x08003438
  ldr r2, =_sbss
 80012cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d0:	200000fc 	.word	0x200000fc

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f907 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff ff2a 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f911 	bl	800154a <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f8e7 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000008 	.word	0x20000008
 8001384:	200000f8 	.word	0x200000f8

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	200000f8 	.word	0x200000f8

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff90 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff49 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff5e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffb0 	bl	80014b8 <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001576:	e161      	b.n	800183c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001578:	2201      	movs	r2, #1
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8150 	bne.w	8001836 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a97      	ldr	r2, [pc, #604]	; (80017f8 <HAL_GPIO_Init+0x294>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d05e      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015a0:	4a95      	ldr	r2, [pc, #596]	; (80017f8 <HAL_GPIO_Init+0x294>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d875      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015a6:	4a95      	ldr	r2, [pc, #596]	; (80017fc <HAL_GPIO_Init+0x298>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d058      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015ac:	4a93      	ldr	r2, [pc, #588]	; (80017fc <HAL_GPIO_Init+0x298>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d86f      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015b2:	4a93      	ldr	r2, [pc, #588]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d052      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015b8:	4a91      	ldr	r2, [pc, #580]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d869      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015be:	4a91      	ldr	r2, [pc, #580]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04c      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015c4:	4a8f      	ldr	r2, [pc, #572]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d863      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015ca:	4a8f      	ldr	r2, [pc, #572]	; (8001808 <HAL_GPIO_Init+0x2a4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d046      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015d0:	4a8d      	ldr	r2, [pc, #564]	; (8001808 <HAL_GPIO_Init+0x2a4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d85d      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015d6:	2b12      	cmp	r3, #18
 80015d8:	d82a      	bhi.n	8001630 <HAL_GPIO_Init+0xcc>
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d859      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <HAL_GPIO_Init+0x80>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	08001639 	.word	0x08001639
 80015ec:	0800164b 	.word	0x0800164b
 80015f0:	0800168d 	.word	0x0800168d
 80015f4:	08001693 	.word	0x08001693
 80015f8:	08001693 	.word	0x08001693
 80015fc:	08001693 	.word	0x08001693
 8001600:	08001693 	.word	0x08001693
 8001604:	08001693 	.word	0x08001693
 8001608:	08001693 	.word	0x08001693
 800160c:	08001693 	.word	0x08001693
 8001610:	08001693 	.word	0x08001693
 8001614:	08001693 	.word	0x08001693
 8001618:	08001693 	.word	0x08001693
 800161c:	08001693 	.word	0x08001693
 8001620:	08001693 	.word	0x08001693
 8001624:	08001693 	.word	0x08001693
 8001628:	08001641 	.word	0x08001641
 800162c:	08001655 	.word	0x08001655
 8001630:	4a76      	ldr	r2, [pc, #472]	; (800180c <HAL_GPIO_Init+0x2a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001636:	e02c      	b.n	8001692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e029      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	3304      	adds	r3, #4
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e024      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	3308      	adds	r3, #8
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e01f      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	330c      	adds	r3, #12
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e01a      	b.n	8001694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001666:	2304      	movs	r3, #4
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e013      	b.n	8001694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	611a      	str	r2, [r3, #16]
          break;
 800167e:	e009      	b.n	8001694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001680:	2308      	movs	r3, #8
 8001682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	615a      	str	r2, [r3, #20]
          break;
 800168a:	e003      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x130>
          break;
 8001692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d801      	bhi.n	800169e <HAL_GPIO_Init+0x13a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_Init+0x13e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d802      	bhi.n	80016b0 <HAL_GPIO_Init+0x14c>
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_Init+0x152>
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3b08      	subs	r3, #8
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	210f      	movs	r1, #15
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	6a39      	ldr	r1, [r7, #32]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a9 	beq.w	8001836 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <HAL_GPIO_Init+0x2b4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1e0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <HAL_GPIO_Init+0x2b8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x2bc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1d8>
 8001738:	2302      	movs	r3, #2
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 800173c:	2303      	movs	r3, #3
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 8001744:	2300      	movs	r3, #0
 8001746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001756:	492f      	ldr	r1, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	492b      	ldr	r1, [pc, #172]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001788:	4013      	ands	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4921      	ldr	r1, [pc, #132]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	491d      	ldr	r1, [pc, #116]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4917      	ldr	r1, [pc, #92]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4913      	ldr	r1, [pc, #76]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01f      	beq.n	8001828 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	490d      	ldr	r1, [pc, #52]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e01f      	b.n	8001836 <HAL_GPIO_Init+0x2d2>
 80017f6:	bf00      	nop
 80017f8:	10320000 	.word	0x10320000
 80017fc:	10310000 	.word	0x10310000
 8001800:	10220000 	.word	0x10220000
 8001804:	10210000 	.word	0x10210000
 8001808:	10120000 	.word	0x10120000
 800180c:	10110000 	.word	0x10110000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_GPIO_Init+0x2f4>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	4909      	ldr	r1, [pc, #36]	; (8001858 <HAL_GPIO_Init+0x2f4>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae96 	bne.w	8001578 <HAL_GPIO_Init+0x14>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	372c      	adds	r7, #44	; 0x2c
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e12b      	b.n	8001af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fc7c 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f0:	f001 fd1e 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80018f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a81      	ldr	r2, [pc, #516]	; (8001b00 <HAL_I2C_Init+0x274>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d807      	bhi.n	8001910 <HAL_I2C_Init+0x84>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a80      	ldr	r2, [pc, #512]	; (8001b04 <HAL_I2C_Init+0x278>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e006      	b.n	800191e <HAL_I2C_Init+0x92>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <HAL_I2C_Init+0x27c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	bf94      	ite	ls
 8001918:	2301      	movls	r3, #1
 800191a:	2300      	movhi	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0e7      	b.n	8001af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4a78      	ldr	r2, [pc, #480]	; (8001b0c <HAL_I2C_Init+0x280>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a6a      	ldr	r2, [pc, #424]	; (8001b00 <HAL_I2C_Init+0x274>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d802      	bhi.n	8001960 <HAL_I2C_Init+0xd4>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3301      	adds	r3, #1
 800195e:	e009      	b.n	8001974 <HAL_I2C_Init+0xe8>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4a69      	ldr	r2, [pc, #420]	; (8001b10 <HAL_I2C_Init+0x284>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	3301      	adds	r3, #1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	430b      	orrs	r3, r1
 800197a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	495c      	ldr	r1, [pc, #368]	; (8001b00 <HAL_I2C_Init+0x274>)
 8001990:	428b      	cmp	r3, r1
 8001992:	d819      	bhi.n	80019c8 <HAL_I2C_Init+0x13c>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e59      	subs	r1, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019a8:	400b      	ands	r3, r1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <HAL_I2C_Init+0x138>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1e59      	subs	r1, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c2:	e051      	b.n	8001a68 <HAL_I2C_Init+0x1dc>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e04f      	b.n	8001a68 <HAL_I2C_Init+0x1dc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d111      	bne.n	80019f4 <HAL_I2C_Init+0x168>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	440b      	add	r3, r1
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e012      	b.n	8001a1a <HAL_I2C_Init+0x18e>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	0099      	lsls	r1, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Init+0x196>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e022      	b.n	8001a68 <HAL_I2C_Init+0x1dc>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10e      	bne.n	8001a48 <HAL_I2C_Init+0x1bc>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e58      	subs	r0, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	460b      	mov	r3, r1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	440b      	add	r3, r1
 8001a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a46:	e00f      	b.n	8001a68 <HAL_I2C_Init+0x1dc>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e58      	subs	r0, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	0099      	lsls	r1, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	6809      	ldr	r1, [r1, #0]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6911      	ldr	r1, [r2, #16]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68d2      	ldr	r2, [r2, #12]
 8001aa2:	4311      	orrs	r1, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	000186a0 	.word	0x000186a0
 8001b04:	001e847f 	.word	0x001e847f
 8001b08:	003d08ff 	.word	0x003d08ff
 8001b0c:	431bde83 	.word	0x431bde83
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	817b      	strh	r3, [r7, #10]
 8001b26:	460b      	mov	r3, r1
 8001b28:	813b      	strh	r3, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b2e:	f7ff fc2b 	bl	8001388 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	f040 80d9 	bne.w	8001cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2319      	movs	r3, #25
 8001b48:	2201      	movs	r2, #1
 8001b4a:	496d      	ldr	r1, [pc, #436]	; (8001d00 <HAL_I2C_Mem_Write+0x1ec>)
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fdef 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e0cc      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Mem_Write+0x56>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e0c5      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d007      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2221      	movs	r2, #33	; 0x21
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_I2C_Mem_Write+0x1f0>)
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bd2:	88f8      	ldrh	r0, [r7, #6]
 8001bd4:	893a      	ldrh	r2, [r7, #8]
 8001bd6:	8979      	ldrh	r1, [r7, #10]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4603      	mov	r3, r0
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fc26 	bl	8002434 <I2C_RequestMemoryWrite>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d052      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e081      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 feb4 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00d      	beq.n	8001c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d107      	bne.n	8001c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d11b      	bne.n	8001c94 <HAL_I2C_Mem_Write+0x180>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d017      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1aa      	bne.n	8001bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fea7 	bl	80029f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00d      	beq.n	8001cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d107      	bne.n	8001cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e016      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	00100002 	.word	0x00100002
 8001d04:	ffff0000 	.word	0xffff0000

08001d08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	817b      	strh	r3, [r7, #10]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	813b      	strh	r3, [r7, #8]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d26:	f7ff fb2f 	bl	8001388 <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	f040 8244 	bne.w	80021c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2319      	movs	r3, #25
 8001d40:	2201      	movs	r2, #1
 8001d42:	4982      	ldr	r1, [pc, #520]	; (8001f4c <HAL_I2C_Mem_Read+0x244>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fcf3 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	e237      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Mem_Read+0x5a>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e230      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d007      	beq.n	8001d88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2222      	movs	r2, #34	; 0x22
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a62      	ldr	r2, [pc, #392]	; (8001f50 <HAL_I2C_Mem_Read+0x248>)
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dca:	88f8      	ldrh	r0, [r7, #6]
 8001dcc:	893a      	ldrh	r2, [r7, #8]
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fbc0 	bl	8002560 <I2C_RequestMemoryRead>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1ec      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e1c0      	b.n	800219c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d11e      	bne.n	8001e60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e32:	b672      	cpsid	i
}
 8001e34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e5c:	b662      	cpsie	i
}
 8001e5e:	e035      	b.n	8001ecc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d11e      	bne.n	8001ea6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ea2:	b662      	cpsie	i
}
 8001ea4:	e012      	b.n	8001ecc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ecc:	e166      	b.n	800219c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	f200 811f 	bhi.w	8002116 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d123      	bne.n	8001f28 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fdcd 	bl	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e167      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f26:	e139      	b.n	800219c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d152      	bne.n	8001fd6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	2200      	movs	r2, #0
 8001f38:	4906      	ldr	r1, [pc, #24]	; (8001f54 <HAL_I2C_Mem_Read+0x24c>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fbf8 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e13c      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
 8001f4a:	bf00      	nop
 8001f4c:	00100002 	.word	0x00100002
 8001f50:	ffff0000 	.word	0xffff0000
 8001f54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f9e:	b662      	cpsie	i
}
 8001fa0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd4:	e0e2      	b.n	800219c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	2200      	movs	r2, #0
 8001fde:	497b      	ldr	r1, [pc, #492]	; (80021cc <HAL_I2C_Mem_Read+0x4c4>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fba5 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0e9      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002036:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_I2C_Mem_Read+0x4c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_I2C_Mem_Read+0x4cc>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0a1a      	lsrs	r2, r3, #8
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00da      	lsls	r2, r3, #3
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	3b01      	subs	r3, #1
 8002054:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d118      	bne.n	800208e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800207e:	b662      	cpsie	i
}
 8002080:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e09a      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b04      	cmp	r3, #4
 800209a:	d1d9      	bne.n	8002050 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020de:	b662      	cpsie	i
}
 80020e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002114:	e042      	b.n	800219c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fcb2 	bl	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e04c      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d118      	bne.n	800219c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f ae94 	bne.w	8001ece <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	00010004 	.word	0x00010004
 80021d0:	20000000 	.word	0x20000000
 80021d4:	14f8b589 	.word	0x14f8b589

080021d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff f8ce 	bl	8001388 <HAL_GetTick>
 80021ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	f040 8111 	bne.w	8002422 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2319      	movs	r3, #25
 8002206:	2201      	movs	r2, #1
 8002208:	4988      	ldr	r1, [pc, #544]	; (800242c <HAL_I2C_IsDeviceReady+0x254>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fa90 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	e104      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2C_IsDeviceReady+0x50>
 8002224:	2302      	movs	r3, #2
 8002226:	e0fd      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d007      	beq.n	800224e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2224      	movs	r2, #36	; 0x24
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a70      	ldr	r2, [pc, #448]	; (8002430 <HAL_I2C_IsDeviceReady+0x258>)
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002280:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa4e 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	d103      	bne.n	80022b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0b6      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f85f 	bl	8001388 <HAL_GetTick>
 80022ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022fa:	e025      	b.n	8002348 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7ff f844 	bl	8001388 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <HAL_I2C_IsDeviceReady+0x13a>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22a0      	movs	r2, #160	; 0xa0
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2ba0      	cmp	r3, #160	; 0xa0
 8002352:	d005      	beq.n	8002360 <HAL_I2C_IsDeviceReady+0x188>
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_I2C_IsDeviceReady+0x188>
 800235a:	7dbb      	ldrb	r3, [r7, #22]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0cd      	beq.n	80022fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d129      	bne.n	80023ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002384:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2319      	movs	r3, #25
 80023a2:	2201      	movs	r2, #1
 80023a4:	4921      	ldr	r1, [pc, #132]	; (800242c <HAL_I2C_IsDeviceReady+0x254>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f9c2 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e02c      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	490f      	ldr	r1, [pc, #60]	; (800242c <HAL_I2C_IsDeviceReady+0x254>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f99e 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e012      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	3301      	adds	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	f4ff af32 	bcc.w	8002272 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	00100002 	.word	0x00100002
 8002430:	ffff0000 	.word	0xffff0000

08002434 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	2200      	movs	r2, #0
 8002466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f960 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002484:	d103      	bne.n	800248e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e05f      	b.n	8002552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002492:	897b      	ldrh	r3, [r7, #10]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	492d      	ldr	r1, [pc, #180]	; (800255c <I2C_RequestMemoryWrite+0x128>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9bb 	bl	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e04c      	b.n	8002552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa46 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e02b      	b.n	8002552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002500:	893b      	ldrh	r3, [r7, #8]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	e021      	b.n	8002550 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29b      	uxth	r3, r3
 8002512:	b2da      	uxtb	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	6a39      	ldr	r1, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa20 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e005      	b.n	8002552 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002546:	893b      	ldrh	r3, [r7, #8]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	00010002 	.word	0x00010002

08002560 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	460b      	mov	r3, r1
 8002574:	813b      	strh	r3, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8c2 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d103      	bne.n	80025ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0aa      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	4952      	ldr	r1, [pc, #328]	; (800272c <I2C_RequestMemoryRead+0x1cc>)
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f91d 	bl	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e097      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	6a39      	ldr	r1, [r7, #32]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f9a8 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e076      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263c:	893b      	ldrh	r3, [r7, #8]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	e021      	b.n	800268c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002648:	893b      	ldrh	r3, [r7, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f982 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e050      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f967 	bl	8002964 <I2C_WaitOnTXEFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e035      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f82b 	bl	8002730 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ee:	d103      	bne.n	80026f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e013      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026fc:	897b      	ldrh	r3, [r7, #10]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	6a3a      	ldr	r2, [r7, #32]
 8002710:	4906      	ldr	r1, [pc, #24]	; (800272c <I2C_RequestMemoryRead+0x1cc>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f886 	bl	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010002 	.word	0x00010002

08002730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002740:	e048      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d044      	beq.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fe1d 	bl	8001388 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d139      	bne.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10d      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x56>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	e00c      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d116      	bne.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e023      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10d      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	43da      	mvns	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	e00c      	b.n	8002814 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	429a      	cmp	r2, r3
 8002818:	d093      	beq.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002832:	e071      	b.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d123      	bne.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e067      	b.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d041      	beq.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe fd78 	bl	8001388 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d136      	bne.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10c      	bne.n	80028ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e00b      	b.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e021      	b.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0c1b      	lsrs	r3, r3, #16
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10c      	bne.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	43da      	mvns	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e00b      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf14      	ite	ne
 800294e:	2301      	movne	r3, #1
 8002950:	2300      	moveq	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af6d 	bne.w	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002970:	e034      	b.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f8e3 	bl	8002b3e <I2C_IsAcknowledgeFailed>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e034      	b.n	80029ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d028      	beq.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fcfd 	bl	8001388 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11d      	bne.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d016      	beq.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d1c3      	bne.n	8002972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a00:	e034      	b.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f89b 	bl	8002b3e <I2C_IsAcknowledgeFailed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e034      	b.n	8002a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d028      	beq.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fcb5 	bl	8001388 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11d      	bne.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d016      	beq.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d1c3      	bne.n	8002a02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a90:	e049      	b.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d119      	bne.n	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0210 	mvn.w	r2, #16
 8002aa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e030      	b.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad4:	f7fe fc58 	bl	8001388 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11d      	bne.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d016      	beq.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d1ae      	bne.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d11b      	bne.n	8002b8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0204 	orr.w	r2, r3, #4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e272      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e24c      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76>
 8002c04:	4b80      	ldr	r3, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xbc>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a71      	ldr	r2, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb86 	bl	8001388 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fb82 	bl	8001388 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e200      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe4>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb72 	bl	8001388 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fb6e 	bl	8001388 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1ec      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x10c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1c0      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4939      	ldr	r1, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fb27 	bl	8001388 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fb23 	bl	8001388 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1a1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4927      	ldr	r1, [pc, #156]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fb06 	bl	8001388 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fb02 	bl	8001388 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e180      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03a      	beq.n	8002e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7fe fae6 	bl	8001388 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fae2 	bl	8001388 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e160      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 faba 	bl	8003358 <RCC_Delay>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe facc 	bl	8001388 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fac8 	bl	8001388 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e146      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	42420000 	.word	0x42420000
 8002e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fa89 	bl	8001388 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe fa85 	bl	8001388 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e103      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x356>
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fa39 	bl	8001388 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fa35 	bl	8001388 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0b1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x37e>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fa23 	bl	8001388 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fa1f 	bl	8001388 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e09b      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8087 	beq.w	8003092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d061      	beq.n	8003054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d146      	bne.n	8003026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f9f3 	bl	8001388 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f9ef 	bl	8001388 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e06d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4921      	ldr	r1, [pc, #132]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a19      	ldr	r1, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	491b      	ldr	r1, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f9c3 	bl	8001388 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe f9bf 	bl	8001388 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
 8003024:	e035      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe f9ac 	bl	8001388 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe f9a8 	bl	8001388 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e026      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
 8003052:	e01e      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e019      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x500>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d0      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4965      	ldr	r1, [pc, #404]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	4b59      	ldr	r3, [pc, #356]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d040      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d115      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e073      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4936      	ldr	r1, [pc, #216]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe f8fa 	bl	8001388 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe f8f6 	bl	8001388 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e053      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d210      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322e:	f000 f821 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8003232:	4602      	mov	r2, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	490a      	ldr	r1, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	5ccb      	ldrb	r3, [r1, r3]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1cc>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe f858 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	08003404 	.word	0x08003404
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCC_GetSysClockFreq+0x94>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x30>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x36>
 80032a2:	e027      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_GetSysClockFreq+0x98>)
 80032a6:	613b      	str	r3, [r7, #16]
      break;
 80032a8:	e027      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0c9b      	lsrs	r3, r3, #18
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0c5b      	lsrs	r3, r3, #17
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	fb03 f202 	mul.w	r2, r3, r2
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e004      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	613b      	str	r3, [r7, #16]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetSysClockFreq+0x98>)
 80032f6:	613b      	str	r3, [r7, #16]
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	693b      	ldr	r3, [r7, #16]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	007a1200 	.word	0x007a1200
 8003310:	0800341c 	.word	0x0800341c
 8003314:	0800342c 	.word	0x0800342c
 8003318:	003d0900 	.word	0x003d0900

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	08003414 	.word	0x08003414

08003358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <RCC_Delay+0x34>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <RCC_Delay+0x38>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0a5b      	lsrs	r3, r3, #9
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003374:	bf00      	nop
  }
  while (Delay --);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	60fa      	str	r2, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f9      	bne.n	8003374 <RCC_Delay+0x1c>
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000000 	.word	0x20000000
 8003390:	10624dd3 	.word	0x10624dd3

08003394 <memset>:
 8003394:	4603      	mov	r3, r0
 8003396:	4402      	add	r2, r0
 8003398:	4293      	cmp	r3, r2
 800339a:	d100      	bne.n	800339e <memset+0xa>
 800339c:	4770      	bx	lr
 800339e:	f803 1b01 	strb.w	r1, [r3], #1
 80033a2:	e7f9      	b.n	8003398 <memset+0x4>

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4d0c      	ldr	r5, [pc, #48]	; (80033dc <__libc_init_array+0x38>)
 80033aa:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	f000 f81a 	bl	80033ec <_init>
 80033b8:	2600      	movs	r6, #0
 80033ba:	4d0a      	ldr	r5, [pc, #40]	; (80033e4 <__libc_init_array+0x40>)
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	08003430 	.word	0x08003430
 80033e0:	08003430 	.word	0x08003430
 80033e4:	08003430 	.word	0x08003430
 80033e8:	08003434 	.word	0x08003434

080033ec <_init>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr

080033f8 <_fini>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr
