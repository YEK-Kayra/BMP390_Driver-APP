
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005638  08005638  00015638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005698  08005698  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005698  08005698  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005698  08005698  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08005710  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005710  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc8b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af0  00000000  00000000  0002cd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bb  00000000  00000000  0002f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001748c  00000000  00000000  0002fe73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e42d  00000000  00000000  000472ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008889f  00000000  00000000  0005572c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad4  00000000  00000000  000ddfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e1aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800561c 	.word	0x0800561c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800561c 	.word	0x0800561c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <BMP390_Init>:
 * NOTE ==> if our sensor does soft reset. All params of the sensor are cleared. We have to init our sensor properly again.
 */

#include "bmp390.h"

_Bool BMP390_Init(BMP390_HandleTypeDef *BMP390){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, 10, 1000) != HAL_OK){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69d8      	ldr	r0, [r3, #28]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8b19      	ldrh	r1, [r3, #24]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	220a      	movs	r2, #10
 8000f9a:	f001 ff35 	bl	8002e08 <HAL_I2C_IsDeviceReady>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <BMP390_Init+0x2c>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4857      	ldr	r0, [pc, #348]	; (8001108 <BMP390_Init+0x184>)
 8000fac:	f001 fa6e 	bl	800248c <HAL_GPIO_WritePin>

	 }

	 BMP390_Get_RawCalibCoeff(BMP390);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8ad 	bl	8001110 <BMP390_Get_RawCalibCoeff>

	 BMP390_Calc_PrcsdCalibrationCoeff(BMP390);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9ae 	bl	8001318 <BMP390_Calc_PrcsdCalibrationCoeff>

	 BMP390_Set_DefaultParams(BMP390);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 faf3 	bl	80015a8 <BMP390_Set_DefaultParams>



	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	799b      	ldrb	r3, [r3, #6]
 8000fce:	005b      	lsls	r3, r3, #1
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_press)<<0);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	b25b      	sxtb	r3, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2da      	uxtb	r2, r3
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	 BMP390->CONFIG = ((BMP390->Params.filtercoef)<<1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	 BMP390->ODR 	= (BMP390->Params.odr);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	785a      	ldrb	r2, [r3, #1]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	78db      	ldrb	r3, [r3, #3]
 8001004:	b25a      	sxtb	r2, r3
			 	   ((BMP390->Params.temp_osrs)<<3);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	00db      	lsls	r3, r3, #3
	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 800100c:	b25b      	sxtb	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b25b      	sxtb	r3, r3
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_PWR_CTRL , 1, &BMP390->PWR_CTRL, 1, 1000);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69d8      	ldr	r0, [r3, #28]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	8b19      	ldrh	r1, [r3, #24]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	338f      	adds	r3, #143	; 0x8f
 8001026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102a:	9202      	str	r2, [sp, #8]
 800102c:	2201      	movs	r2, #1
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	221b      	movs	r2, #27
 8001036:	f001 fb85 	bl	8002744 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_CONFIG , 1, &BMP390->CONFIG, 1, 1000);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69d8      	ldr	r0, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	8b19      	ldrh	r1, [r3, #24]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	338c      	adds	r3, #140	; 0x8c
 8001046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104a:	9202      	str	r2, [sp, #8]
 800104c:	2201      	movs	r2, #1
 800104e:	9201      	str	r2, [sp, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	221f      	movs	r2, #31
 8001056:	f001 fb75 	bl	8002744 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_ODR , 1, &BMP390->ODR, 1, 1000);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69d8      	ldr	r0, [r3, #28]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8b19      	ldrh	r1, [r3, #24]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	338d      	adds	r3, #141	; 0x8d
 8001066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106a:	9202      	str	r2, [sp, #8]
 800106c:	2201      	movs	r2, #1
 800106e:	9201      	str	r2, [sp, #4]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	221d      	movs	r2, #29
 8001076:	f001 fb65 	bl	8002744 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_OSR , 1, &BMP390->OSR, 1, 1000);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69d8      	ldr	r0, [r3, #28]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8b19      	ldrh	r1, [r3, #24]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	338e      	adds	r3, #142	; 0x8e
 8001086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	2201      	movs	r2, #1
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	221c      	movs	r2, #28
 8001096:	f001 fb55 	bl	8002744 <HAL_I2C_Mem_Write>

	 //İlk değerlerini sıfıra eşitleriz ki referans olsun bir sonraki gelecekler için
	 BMP390->DeltaData.alt0 = 0.0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	671a      	str	r2, [r3, #112]	; 0x70
	 BMP390->DeltaData.spd0 = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	 BMP390->DeltaData.acc0 = 0.0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	679a      	str	r2, [r3, #120]	; 0x78
	 BMP390->DeltaData.cnt 	+= 1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88


	 if(BMP390->Ref_Alt_Sel == 'm'){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80010ca:	2b6d      	cmp	r3, #109	; 0x6d
 80010cc:	d10d      	bne.n	80010ea <BMP390_Init+0x166>

		 BMP390->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		 BMP390->FixedAltitude = BMP390_Calc_TemporaryAltitude(BMP390, &BMP390_VertAlt);
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <BMP390_Init+0x188>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fc38 	bl	8001950 <BMP390_Calc_TemporaryAltitude>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80010e8:	e009      	b.n	80010fe <BMP390_Init+0x17a>

	 }
	 else if(BMP390->Ref_Alt_Sel == 'M'){
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80010f0:	2b4d      	cmp	r3, #77	; 0x4d
 80010f2:	d104      	bne.n	80010fe <BMP390_Init+0x17a>

		 BMP390->FixedAltitude = 0.0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	 }




return true;
 80010fe:	2301      	movs	r3, #1

}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40011000 	.word	0x40011000
 800110c:	200001cc 	.word	0x200001cc

08001110 <BMP390_Get_RawCalibCoeff>:

_Bool BMP390_Get_RawCalibCoeff(BMP390_HandleTypeDef *BMP390){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]

	uint8_t BMP390_CalibCoeff[21];
	uint8_t cnt = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_CalibCoeff, 1, &BMP390_CalibCoeff[0], 21, 1000);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69d8      	ldr	r0, [r3, #28]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	8b19      	ldrh	r1, [r3, #24]
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2315      	movs	r3, #21
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	2231      	movs	r2, #49	; 0x31
 8001138:	f001 fbfe 	bl	8002938 <HAL_I2C_Mem_Read>

	BMP390->Raw_NVM.T1  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	3320      	adds	r3, #32
 8001140:	443b      	add	r3, r7
 8001142:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001146:	b21a      	sxth	r2, r3
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	3301      	adds	r3, #1
 800114c:	3320      	adds	r3, #32
 800114e:	443b      	add	r3, r7
 8001150:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21b      	sxth	r3, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	841a      	strh	r2, [r3, #32]
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	3302      	adds	r3, #2
 8001166:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T2  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	3320      	adds	r3, #32
 800116c:	443b      	add	r3, r7
 800116e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001172:	b21a      	sxth	r2, r3
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	3301      	adds	r3, #1
 8001178:	3320      	adds	r3, #32
 800117a:	443b      	add	r3, r7
 800117c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	845a      	strh	r2, [r3, #34]	; 0x22
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	3302      	adds	r3, #2
 8001192:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	3320      	adds	r3, #32
 8001198:	443b      	add	r3, r7
 800119a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	3301      	adds	r3, #1
 80011aa:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P1  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	3320      	adds	r3, #32
 80011b0:	443b      	add	r3, r7
 80011b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	3301      	adds	r3, #1
 80011bc:	3320      	adds	r3, #32
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	84da      	strh	r2, [r3, #38]	; 0x26
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	3302      	adds	r3, #2
 80011d4:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P2  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3320      	adds	r3, #32
 80011da:	443b      	add	r3, r7
 80011dc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	3301      	adds	r3, #1
 80011e6:	3320      	adds	r3, #32
 80011e8:	443b      	add	r3, r7
 80011ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	3302      	adds	r3, #2
 80011fe:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	3320      	adds	r3, #32
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800120a:	b25a      	sxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	3301      	adds	r3, #1
 8001216:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P4  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3320      	adds	r3, #32
 800121c:	443b      	add	r3, r7
 800121e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001222:	b25a      	sxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P5  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	3320      	adds	r3, #32
 8001234:	443b      	add	r3, r7
 8001236:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800123a:	b21a      	sxth	r2, r3
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	3301      	adds	r3, #1
 8001240:	3320      	adds	r3, #32
 8001242:	443b      	add	r3, r7
 8001244:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	3302      	adds	r3, #2
 800125a:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P6  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	3320      	adds	r3, #32
 8001260:	443b      	add	r3, r7
 8001262:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001266:	b21a      	sxth	r2, r3
 8001268:	7ffb      	ldrb	r3, [r7, #31]
 800126a:	3301      	adds	r3, #1
 800126c:	3320      	adds	r3, #32
 800126e:	443b      	add	r3, r7
 8001270:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21b      	sxth	r3, r3
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	85da      	strh	r2, [r3, #46]	; 0x2e
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	3302      	adds	r3, #2
 8001286:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P7  = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	3320      	adds	r3, #32
 800128c:	443b      	add	r3, r7
 800128e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001292:	b25a      	sxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3301      	adds	r3, #1
 800129e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P8  = (int8_t)((BMP390_CalibCoeff[cnt]));  									 cnt+=1;
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	3320      	adds	r3, #32
 80012a4:	443b      	add	r3, r7
 80012a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012aa:	b25a      	sxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	3301      	adds	r3, #1
 80012b6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P9  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	3320      	adds	r3, #32
 80012bc:	443b      	add	r3, r7
 80012be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	3301      	adds	r3, #1
 80012c8:	3320      	adds	r3, #32
 80012ca:	443b      	add	r3, r7
 80012cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	865a      	strh	r2, [r3, #50]	; 0x32
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	3302      	adds	r3, #2
 80012e0:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P10 = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3320      	adds	r3, #32
 80012e6:	443b      	add	r3, r7
 80012e8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
 80012f6:	3301      	adds	r3, #1
 80012f8:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P11 = (int8_t)((BMP390_CalibCoeff[cnt]));
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	3320      	adds	r3, #32
 80012fe:	443b      	add	r3, r7
 8001300:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001304:	b25a      	sxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

return true;
 800130c:	2301      	movs	r3, #1

}
 800130e:	4618      	mov	r0, r3
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <BMP390_Calc_PrcsdCalibrationCoeff>:

_Bool BMP390_Calc_PrcsdCalibrationCoeff(BMP390_HandleTypeDef *BMP390){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	BMP390->Prcsd_NVM.T1 = (BMP390->Raw_NVM.T1 / pow(2,-8));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	8c1b      	ldrh	r3, [r3, #32]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f865 	bl	80003f4 <__aeabi_i2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <BMP390_Calc_PrcsdCalibrationCoeff+0x264>)
 8001330:	f7ff f9f4 	bl	800071c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fb74 	bl	8000a28 <__aeabi_d2f>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
	BMP390->Prcsd_NVM.T2 = (BMP390->Raw_NVM.T2 / pow(2,30));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f852 	bl	80003f4 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <BMP390_Calc_PrcsdCalibrationCoeff+0x268>)
 8001356:	f7ff f9e1 	bl	800071c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fb61 	bl	8000a28 <__aeabi_d2f>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
	BMP390->Prcsd_NVM.T3 = (BMP390->Raw_NVM.T3 / pow(2,48));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f83e 	bl	80003f4 <__aeabi_i2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b81      	ldr	r3, [pc, #516]	; (8001584 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 800137e:	f7ff f9cd 	bl	800071c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fb4d 	bl	8000a28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
	BMP390->Prcsd_NVM.P1 = ((BMP390->Raw_NVM.P1 - pow(2,14)) / pow(2,20));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f82a 	bl	80003f4 <__aeabi_i2d>
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	4b78      	ldr	r3, [pc, #480]	; (8001588 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013a6:	f7fe fed7 	bl	8000158 <__aeabi_dsub>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <BMP390_Calc_PrcsdCalibrationCoeff+0x274>)
 80013b8:	f7ff f9b0 	bl	800071c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fb30 	bl	8000a28 <__aeabi_d2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
	BMP390->Prcsd_NVM.P2 = ((BMP390->Raw_NVM.P2 - pow(2,14)) / pow(2,29));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f80d 	bl	80003f4 <__aeabi_i2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80013e0:	f7fe feba 	bl	8000158 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b67      	ldr	r3, [pc, #412]	; (8001590 <BMP390_Calc_PrcsdCalibrationCoeff+0x278>)
 80013f2:	f7ff f993 	bl	800071c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb13 	bl	8000a28 <__aeabi_d2f>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	649a      	str	r2, [r3, #72]	; 0x48
	BMP390->Prcsd_NVM.P3 = (BMP390->Raw_NVM.P3 / pow(2,32));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fff0 	bl	80003f4 <__aeabi_i2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <BMP390_Calc_PrcsdCalibrationCoeff+0x27c>)
 800141a:	f7ff f97f 	bl	800071c <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff faff 	bl	8000a28 <__aeabi_d2f>
 800142a:	4602      	mov	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	64da      	str	r2, [r3, #76]	; 0x4c
	BMP390->Prcsd_NVM.P4 = (BMP390->Raw_NVM.P4 / pow(2,37));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f993 302b 	ldrsb.w	r3, [r3, #43]	; 0x2b
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ffdc 	bl	80003f4 <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <BMP390_Calc_PrcsdCalibrationCoeff+0x280>)
 8001442:	f7ff f96b 	bl	800071c <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff faeb 	bl	8000a28 <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	651a      	str	r2, [r3, #80]	; 0x50
	BMP390->Prcsd_NVM.P5 = (BMP390->Raw_NVM.P5 / pow(2,-3));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffc9 	bl	80003f4 <__aeabi_i2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800146a:	f7ff f957 	bl	800071c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fad7 	bl	8000a28 <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
	BMP390->Prcsd_NVM.P6 = (BMP390->Raw_NVM.P6 / pow(2,6));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffb5 	bl	80003f4 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <BMP390_Calc_PrcsdCalibrationCoeff+0x284>)
 8001490:	f7ff f944 	bl	800071c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fac4 	bl	8000a28 <__aeabi_d2f>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58
	BMP390->Prcsd_NVM.P7 = (BMP390->Raw_NVM.P7 / pow(2,8));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffa1 	bl	80003f4 <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <BMP390_Calc_PrcsdCalibrationCoeff+0x288>)
 80014b8:	f7ff f930 	bl	800071c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fab0 	bl	8000a28 <__aeabi_d2f>
 80014c8:	4602      	mov	r2, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	65da      	str	r2, [r3, #92]	; 0x5c
	BMP390->Prcsd_NVM.P8 = (BMP390->Raw_NVM.P8 / pow(2,15));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff8d 	bl	80003f4 <__aeabi_i2d>
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x28c>)
 80014e0:	f7ff f91c 	bl	800071c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fa9c 	bl	8000a28 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	661a      	str	r2, [r3, #96]	; 0x60
	BMP390->Prcsd_NVM.P9 = (BMP390->Raw_NVM.P9 / pow(2,48));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff79 	bl	80003f4 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001508:	f7ff f908 	bl	800071c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fa88 	bl	8000a28 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	665a      	str	r2, [r3, #100]	; 0x64
	BMP390->Prcsd_NVM.P10 = (BMP390->Raw_NVM.P10 / pow(2,48));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff65 	bl	80003f4 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001530:	f7ff f8f4 	bl	800071c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fa74 	bl	8000a28 <__aeabi_d2f>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	669a      	str	r2, [r3, #104]	; 0x68
	BMP390->Prcsd_NVM.P11 = (BMP390->Raw_NVM.P11 / pow(2,65));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff51 	bl	80003f4 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800155a:	f7ff f8df 	bl	800071c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa5f 	bl	8000a28 <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	66da      	str	r2, [r3, #108]	; 0x6c

return true;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	3f700000 	.word	0x3f700000
 8001580:	41d00000 	.word	0x41d00000
 8001584:	42f00000 	.word	0x42f00000
 8001588:	40d00000 	.word	0x40d00000
 800158c:	41300000 	.word	0x41300000
 8001590:	41c00000 	.word	0x41c00000
 8001594:	41f00000 	.word	0x41f00000
 8001598:	42400000 	.word	0x42400000
 800159c:	40500000 	.word	0x40500000
 80015a0:	40700000 	.word	0x40700000
 80015a4:	40e00000 	.word	0x40e00000

080015a8 <BMP390_Set_DefaultParams>:

_Bool BMP390_Set_DefaultParams(BMP390_HandleTypeDef *BMP390){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	BMP390->Params.mode = BMP390_Mode_Normal;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	701a      	strb	r2, [r3, #0]
	BMP390->Params.stat_meas_press = Enable;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	715a      	strb	r2, [r3, #5]
	BMP390->Params.stat_meas_temp = Enable;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	719a      	strb	r2, [r3, #6]
	BMP390->Params.press_osrs = BMP390_Oversampling_X8 ;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	70da      	strb	r2, [r3, #3]
	BMP390->Params.temp_osrs= BMP390_Oversampling_X2 ;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	711a      	strb	r2, [r3, #4]
	BMP390->Params.filtercoef = BMP390_Filter_Coef_3;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	709a      	strb	r2, [r3, #2]
	BMP390->Params.odr = BMP390_ODR_50;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	705a      	strb	r2, [r3, #1]

return true;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <BMP390_Get_SensorValues>:


_Bool BMP390_Get_SensorValues(BMP390_HandleTypeDef *BMP390, float *BMP390_Press,
							 float *BMP390_Temp,float *BMP390_VertAlt,
							 float *BMP390_VertAcc, float *BMP390_VertSpd,
							 float *BMP390_gForce){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b08c      	sub	sp, #48	; 0x30
 80015ea:	af04      	add	r7, sp, #16
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]

	uint32_t rawPress;
	uint32_t rawTemp;
	uint8_t MSB_LSB_XLSB_PT[6] = {0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	2300      	movs	r3, #0
 80015fa:	82bb      	strh	r3, [r7, #20]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_MSB_LSB_XLSB_PT, 1, &MSB_LSB_XLSB_PT[6], 6, 10000);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	69d8      	ldr	r0, [r3, #28]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8b19      	ldrh	r1, [r3, #24]
 8001604:	f242 7310 	movw	r3, #10000	; 0x2710
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2306      	movs	r3, #6
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	3306      	adds	r3, #6
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	2204      	movs	r2, #4
 800161a:	f001 f98d 	bl	8002938 <HAL_I2C_Mem_Read>

	rawPress = ((MSB_LSB_XLSB_PT[2])<<16)  | ((MSB_LSB_XLSB_PT[1])<<8) | ((MSB_LSB_XLSB_PT[0])<<0);
 800161e:	7cbb      	ldrb	r3, [r7, #18]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	7c7b      	ldrb	r3, [r7, #17]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4313      	orrs	r3, r2
 8001628:	7c3a      	ldrb	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61fb      	str	r3, [r7, #28]
	rawTemp  = ((MSB_LSB_XLSB_PT[5])<<16)  | ((MSB_LSB_XLSB_PT[4])<<8) | ((MSB_LSB_XLSB_PT[3])<<0);
 800162e:	7d7b      	ldrb	r3, [r7, #21]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	4313      	orrs	r3, r2
 8001638:	7cfa      	ldrb	r2, [r7, #19]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]


	*BMP390_Temp  	= BMP390_Calc_PrcsdTemp(BMP390,rawTemp);
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f817 	bl	8001674 <BMP390_Calc_PrcsdTemp>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	601a      	str	r2, [r3, #0]
	*BMP390_Press 	= BMP390_Calc_PrcsdPress(BMP390,rawPress,BMP390_Temp);
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	69f9      	ldr	r1, [r7, #28]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f83e 	bl	80016d2 <BMP390_Calc_PrcsdPress>
 8001656:	4602      	mov	r2, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	601a      	str	r2, [r3, #0]
	*BMP390_VertAlt = BMP390_Calc_VertAlt(BMP390, BMP390_Press);
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f92a 	bl	80018b8 <BMP390_Calc_VertAlt>
 8001664:	4602      	mov	r2, r0
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
	//*BMP390_VertAcc = BMP390_Calc_VertAcc();
	//*BMP390_VertSpd = BMP390_Calc_VertSpd();
	//*BMP390_gForce	= BMP390_Calc_gForce();


return true;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <BMP390_Calc_PrcsdTemp>:


float BMP390_Calc_PrcsdTemp(BMP390_HandleTypeDef *BMP390, uint32_t rawTemp){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]

	float partial_data1;
	float partial_data2;


	partial_data1 = (float)(rawTemp - BMP390->Prcsd_NVM.T1);
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f7ff fad8 	bl	8000c34 <__aeabi_ui2f>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f7ff fa1f 	bl	8000ad0 <__aeabi_fsub>
 8001692:	4603      	mov	r3, r0
 8001694:	60fb      	str	r3, [r7, #12]
	partial_data2 = (float)(partial_data1 * BMP390->Prcsd_NVM.T2);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	4619      	mov	r1, r3
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fb21 	bl	8000ce4 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	60bb      	str	r3, [r7, #8]

	return (partial_data2 + (partial_data1 * partial_data1) * BMP390->Prcsd_NVM.T3);
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fb1b 	bl	8000ce4 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fb13 	bl	8000ce4 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa06 	bl	8000ad4 <__addsf3>
 80016c8:	4603      	mov	r3, r0

}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <BMP390_Calc_PrcsdPress>:

float BMP390_Calc_PrcsdPress(BMP390_HandleTypeDef *BMP390, uint32_t rawPress, float *BMP390_Temp){
 80016d2:	b590      	push	{r4, r7, lr}
 80016d4:	b08b      	sub	sp, #44	; 0x2c
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = BMP390->Prcsd_NVM.P6 * (*(BMP390_Temp));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fafb 	bl	8000ce4 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P7 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4610      	mov	r0, r2
 8001702:	f7ff faef 	bl	8000ce4 <__aeabi_fmul>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff faea 	bl	8000ce4 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P8 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f7ff fade 	bl	8000ce4 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7ff fad6 	bl	8000ce4 <__aeabi_fmul>
 8001738:	4603      	mov	r3, r0
 800173a:	4619      	mov	r1, r3
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fad1 	bl	8000ce4 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	61fb      	str	r3, [r7, #28]
	partial_out1 =  BMP390->Prcsd_NVM.P5 + partial_data1 + partial_data2 + partial_data3;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f9c1 	bl	8000ad4 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9bc 	bl	8000ad4 <__addsf3>
 800175c:	4603      	mov	r3, r0
 800175e:	4619      	mov	r1, r3
 8001760:	69f8      	ldr	r0, [r7, #28]
 8001762:	f7ff f9b7 	bl	8000ad4 <__addsf3>
 8001766:	4603      	mov	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
	partial_data1 = BMP390->Prcsd_NVM.P2 * (*(BMP390_Temp));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f7ff fab5 	bl	8000ce4 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P3 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f7ff faa9 	bl	8000ce4 <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
 8001794:	4619      	mov	r1, r3
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff faa4 	bl	8000ce4 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P4 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f7ff fa98 	bl	8000ce4 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f7ff fa90 	bl	8000ce4 <__aeabi_fmul>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff fa8b 	bl	8000ce4 <__aeabi_fmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)rawPress * (BMP390->Prcsd_NVM.P1 + partial_data1 + partial_data2 + partial_data3);
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff fa2e 	bl	8000c34 <__aeabi_ui2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f977 	bl	8000ad4 <__addsf3>
 80017e6:	4603      	mov	r3, r0
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f972 	bl	8000ad4 <__addsf3>
 80017f0:	4603      	mov	r3, r0
 80017f2:	69f9      	ldr	r1, [r7, #28]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f96d 	bl	8000ad4 <__addsf3>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff fa70 	bl	8000ce4 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	617b      	str	r3, [r7, #20]
	partial_data1 = (float)rawPress * (float)rawPress;
 8001808:	68b8      	ldr	r0, [r7, #8]
 800180a:	f7ff fa13 	bl	8000c34 <__aeabi_ui2f>
 800180e:	4604      	mov	r4, r0
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f7ff fa0f 	bl	8000c34 <__aeabi_ui2f>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff fa62 	bl	8000ce4 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P9 + BMP390->Prcsd_NVM.P10 * (*(BMP390_Temp));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff fa56 	bl	8000ce4 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff f949 	bl	8000ad4 <__addsf3>
 8001842:	4603      	mov	r3, r0
 8001844:	623b      	str	r3, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800184a:	f7ff fa4b 	bl	8000ce4 <__aeabi_fmul>
 800184e:	4603      	mov	r3, r0
 8001850:	61fb      	str	r3, [r7, #28]
	partial_data4 = partial_data3 + ((float)rawPress * (float)rawPress * (float)rawPress) * BMP390->Prcsd_NVM.P11;
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f7ff f9ee 	bl	8000c34 <__aeabi_ui2f>
 8001858:	4604      	mov	r4, r0
 800185a:	68b8      	ldr	r0, [r7, #8]
 800185c:	f7ff f9ea 	bl	8000c34 <__aeabi_ui2f>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fa3d 	bl	8000ce4 <__aeabi_fmul>
 800186a:	4603      	mov	r3, r0
 800186c:	461c      	mov	r4, r3
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff f9e0 	bl	8000c34 <__aeabi_ui2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4619      	mov	r1, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fa33 	bl	8000ce4 <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7ff fa2b 	bl	8000ce4 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	69f8      	ldr	r0, [r7, #28]
 8001894:	f7ff f91e 	bl	8000ad4 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	613b      	str	r3, [r7, #16]

	return partial_out1 + partial_out2 + partial_data4;
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	69b8      	ldr	r0, [r7, #24]
 80018a0:	f7ff f918 	bl	8000ad4 <__addsf3>
 80018a4:	4603      	mov	r3, r0
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f913 	bl	8000ad4 <__addsf3>
 80018ae:	4603      	mov	r3, r0

}
 80018b0:	4618      	mov	r0, r3
 80018b2:	372c      	adds	r7, #44	; 0x2c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <BMP390_Calc_VertAlt>:


float BMP390_Calc_VertAlt(BMP390_HandleTypeDef *BMP390, float *BMP390_Press){
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]

	return (((SeaLevelTemp / GradientTemp)
			* (1 - pow((*BMP390_Press / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel))))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4920      	ldr	r1, [pc, #128]	; (8001948 <BMP390_Calc_VertAlt+0x90>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fabf 	bl	8000e4c <__aeabi_fdiv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fda1 	bl	8000418 <__aeabi_f2d>
 80018d6:	a318      	add	r3, pc, #96	; (adr r3, 8001938 <BMP390_Calc_VertAlt+0x80>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f002 ff94 	bl	8004808 <pow>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	4918      	ldr	r1, [pc, #96]	; (800194c <BMP390_Calc_VertAlt+0x94>)
 80018ea:	f7fe fc35 	bl	8000158 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	a312      	add	r3, pc, #72	; (adr r3, 8001940 <BMP390_Calc_VertAlt+0x88>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fde4 	bl	80004c8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
			- (BMP390->FixedAltitude));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd82 	bl	8000418 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7fe fc1c 	bl	8000158 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f87e 	bl	8000a28 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0

}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bdb0      	pop	{r4, r5, r7, pc}
 8001936:	bf00      	nop
 8001938:	a0829b73 	.word	0xa0829b73
 800193c:	3fc85a7a 	.word	0x3fc85a7a
 8001940:	9d89d89d 	.word	0x9d89d89d
 8001944:	40e5a558 	.word	0x40e5a558
 8001948:	47c5e680 	.word	0x47c5e680
 800194c:	3ff00000 	.word	0x3ff00000

08001950 <BMP390_Calc_TemporaryAltitude>:


float BMP390_Calc_TemporaryAltitude(BMP390_HandleTypeDef *BMP390, float *BMP390_VertAlt){
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af04      	add	r7, sp, #16
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

	 float tempAltitude = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	e025      	b.n	80019b2 <BMP390_Calc_TemporaryAltitude+0x62>

		 BMP390_Get_SensorValues(BMP390, &BMP390_Press,
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <BMP390_Calc_TemporaryAltitude+0x80>)
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <BMP390_Calc_TemporaryAltitude+0x84>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <BMP390_Calc_TemporaryAltitude+0x88>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <BMP390_Calc_TemporaryAltitude+0x8c>)
 8001976:	491a      	ldr	r1, [pc, #104]	; (80019e0 <BMP390_Calc_TemporaryAltitude+0x90>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fe34 	bl	80015e6 <BMP390_Get_SensorValues>
			  		  	  	  	 &BMP390_Temp, BMP390_VertAlt,
			  					 &BMP390_VertAcc, &BMP390_VertSpd,
			  					 &BMP390_gForce);

		 tempAltitude = (float)(tempAltitude + (float)((*BMP390_VertAlt) * (0.05)));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd48 	bl	8000418 <__aeabi_f2d>
 8001988:	a30f      	add	r3, pc, #60	; (adr r3, 80019c8 <BMP390_Calc_TemporaryAltitude+0x78>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fd9b 	bl	80004c8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f845 	bl	8000a28 <__aeabi_d2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff f896 	bl	8000ad4 <__addsf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	60fb      	str	r3, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b13      	cmp	r3, #19
 80019b6:	ddd6      	ble.n	8001966 <BMP390_Calc_TemporaryAltitude+0x16>

	  }

	 return tempAltitude;
 80019b8:	68fb      	ldr	r3, [r7, #12]

}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fa99999 	.word	0x3fa99999
 80019d0:	200001d8 	.word	0x200001d8
 80019d4:	200001d4 	.word	0x200001d4
 80019d8:	200001d0 	.word	0x200001d0
 80019dc:	200001c8 	.word	0x200001c8
 80019e0:	200001c4 	.word	0x200001c4

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ea:	f000 fa63 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ee:	f000 f835 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f2:	f000 f8ef 	bl	8001bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019f6:	f000 f86d 	bl	8001ad4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80019fa:	f000 f899 	bl	8001b30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start_IT(&htim1);
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <main+0x54>)
 8001a00:	f002 fb30 	bl	8004064 <HAL_TIM_Base_Start_IT>

  /**
   * Ref_Alt_Sel is a selection;  For 'm' : it sets the reference altitude to the current location (0 meters)
   * 							  For 'M' : it sets the reference altitude to sea level
   */
  BMP390.BMP390_I2C_ADDRESS = BMP390_I2C_ADDRESS_L;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <main+0x58>)
 8001a06:	2276      	movs	r2, #118	; 0x76
 8001a08:	831a      	strh	r2, [r3, #24]
  BMP390.i2c = &hi2c1;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <main+0x58>)
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <main+0x5c>)
 8001a0e:	61da      	str	r2, [r3, #28]
  BMP390.Ref_Alt_Sel = 'm';
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <main+0x58>)
 8001a12:	226d      	movs	r2, #109	; 0x6d
 8001a14:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  BMP390_Init(&BMP390);
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <main+0x58>)
 8001a1a:	f7ff fab3 	bl	8000f84 <BMP390_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <main+0x60>)
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <main+0x64>)
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <main+0x68>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <main+0x6c>)
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <main+0x70>)
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <main+0x74>)
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <main+0x58>)
 8001a32:	f7ff fdd8 	bl	80015e6 <BMP390_Get_SensorValues>
 8001a36:	e7f2      	b.n	8001a1e <main+0x3a>
 8001a38:	200000e0 	.word	0x200000e0
 8001a3c:	20000128 	.word	0x20000128
 8001a40:	2000008c 	.word	0x2000008c
 8001a44:	200001d8 	.word	0x200001d8
 8001a48:	200001d4 	.word	0x200001d4
 8001a4c:	200001d0 	.word	0x200001d0
 8001a50:	200001cc 	.word	0x200001cc
 8001a54:	200001c8 	.word	0x200001c8
 8001a58:	200001c4 	.word	0x200001c4

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b090      	sub	sp, #64	; 0x40
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0318 	add.w	r3, r7, #24
 8001a66:	2228      	movs	r2, #40	; 0x28
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fe9a 	bl	80047a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a86:	2310      	movs	r3, #16
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fe9a 	bl	80037cc <HAL_RCC_OscConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f8f1 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 f908 	bl	8003cd0 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f8dd 	bl	8001c84 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3740      	adds	r7, #64	; 0x40
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <MX_I2C1_Init+0x54>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MX_I2C1_Init+0x58>)
 8001ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_I2C1_Init+0x50>)
 8001b12:	f000 fcd3 	bl	80024bc <HAL_I2C_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b1c:	f000 f8b2 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000008c 	.word	0x2000008c
 8001b28:	40005400 	.word	0x40005400
 8001b2c:	000186a0 	.word	0x000186a0

08001b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b4e:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <MX_TIM1_Init+0xa0>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b54:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b7c:	f002 fa22 	bl	8003fc4 <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b86:	f000 f87d 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001b98:	f002 fbb8 	bl	800430c <HAL_TIM_ConfigClockSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ba2:	f000 f86f 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <MX_TIM1_Init+0x9c>)
 8001bb4:	f002 fd8c 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bbe:	f000 f861 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000e0 	.word	0x200000e0
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_GPIO_Init+0xa8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c50:	f000 fc1c 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c6e:	f000 fa91 	bl	8002194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c72:	bf00      	nop
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40011000 	.word	0x40011000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_MspInit+0x5c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x5c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_I2C_MspInit+0x74>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d125      	bne.n	8001d60 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <HAL_I2C_MspInit+0x7c>)
 8001d44:	f000 fa26 	bl	8002194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_I2C_MspInit+0x78>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d113      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_TIM_Base_MspInit+0x48>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_TIM_Base_MspInit+0x48>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d90:	6193      	str	r3, [r2, #24]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_TIM_Base_MspInit+0x48>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2019      	movs	r0, #25
 8001da4:	f000 f9bf 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001da8:	2019      	movs	r0, #25
 8001daa:	f000 f9d8 	bl	800215e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e06:	f000 f89b 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <TIM1_UP_IRQHandler+0x2c>)
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <TIM1_UP_IRQHandler+0x30>)
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <TIM1_UP_IRQHandler+0x34>)
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <TIM1_UP_IRQHandler+0x38>)
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <TIM1_UP_IRQHandler+0x3c>)
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <TIM1_UP_IRQHandler+0x40>)
 8001e28:	480a      	ldr	r0, [pc, #40]	; (8001e54 <TIM1_UP_IRQHandler+0x44>)
 8001e2a:	f7ff fbdc 	bl	80015e6 <BMP390_Get_SensorValues>
		  		  	  	  	  	  &BMP390_Temp, &BMP390_VertAlt,
		  						  &BMP390_VertAcc, &BMP390_VertSpd,
		  						  &BMP390_gForce);

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <TIM1_UP_IRQHandler+0x48>)
 8001e30:	f002 f964 	bl	80040fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001d8 	.word	0x200001d8
 8001e40:	200001d4 	.word	0x200001d4
 8001e44:	200001d0 	.word	0x200001d0
 8001e48:	200001cc 	.word	0x200001cc
 8001e4c:	200001c8 	.word	0x200001c8
 8001e50:	200001c4 	.word	0x200001c4
 8001e54:	20000128 	.word	0x20000128
 8001e58:	200000e0 	.word	0x200000e0

08001e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e68:	f7ff fff8 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480b      	ldr	r0, [pc, #44]	; (8001e9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e6e:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e84:	4c09      	ldr	r4, [pc, #36]	; (8001eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f002 fc95 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e96:	f7ff fda5 	bl	80019e4 <main>
  bx lr
 8001e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ea4:	080056a0 	.word	0x080056a0
  ldr r2, =_sbss
 8001ea8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eac:	20000318 	.word	0x20000318

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x28>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f923 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	200f      	movs	r0, #15
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fede 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f93b 	bl	800217a <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 f903 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x20>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_IncTick+0x20>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	200001dc 	.word	0x200001dc

08001f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_GetTick+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	200001dc 	.word	0x200001dc

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4906      	ldr	r1, [pc, #24]	; (8002010 <__NVIC_EnableIRQ+0x34>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff90 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff2d 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff42 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff90 	bl	8002068 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5f 	bl	8002014 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff35 	bl	8001fdc <__NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffa2 	bl	80020cc <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	e161      	b.n	800246c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a8:	2201      	movs	r2, #1
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8150 	bne.w	8002466 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a97      	ldr	r2, [pc, #604]	; (8002428 <HAL_GPIO_Init+0x294>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d05e      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021d0:	4a95      	ldr	r2, [pc, #596]	; (8002428 <HAL_GPIO_Init+0x294>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d875      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021d6:	4a95      	ldr	r2, [pc, #596]	; (800242c <HAL_GPIO_Init+0x298>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d058      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021dc:	4a93      	ldr	r2, [pc, #588]	; (800242c <HAL_GPIO_Init+0x298>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d86f      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021e2:	4a93      	ldr	r2, [pc, #588]	; (8002430 <HAL_GPIO_Init+0x29c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d052      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021e8:	4a91      	ldr	r2, [pc, #580]	; (8002430 <HAL_GPIO_Init+0x29c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d869      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021ee:	4a91      	ldr	r2, [pc, #580]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04c      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021f4:	4a8f      	ldr	r2, [pc, #572]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d863      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021fa:	4a8f      	ldr	r2, [pc, #572]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d046      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 8002200:	4a8d      	ldr	r2, [pc, #564]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d85d      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 8002206:	2b12      	cmp	r3, #18
 8002208:	d82a      	bhi.n	8002260 <HAL_GPIO_Init+0xcc>
 800220a:	2b12      	cmp	r3, #18
 800220c:	d859      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_GPIO_Init+0x80>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	0800228f 	.word	0x0800228f
 8002218:	08002269 	.word	0x08002269
 800221c:	0800227b 	.word	0x0800227b
 8002220:	080022bd 	.word	0x080022bd
 8002224:	080022c3 	.word	0x080022c3
 8002228:	080022c3 	.word	0x080022c3
 800222c:	080022c3 	.word	0x080022c3
 8002230:	080022c3 	.word	0x080022c3
 8002234:	080022c3 	.word	0x080022c3
 8002238:	080022c3 	.word	0x080022c3
 800223c:	080022c3 	.word	0x080022c3
 8002240:	080022c3 	.word	0x080022c3
 8002244:	080022c3 	.word	0x080022c3
 8002248:	080022c3 	.word	0x080022c3
 800224c:	080022c3 	.word	0x080022c3
 8002250:	080022c3 	.word	0x080022c3
 8002254:	080022c3 	.word	0x080022c3
 8002258:	08002271 	.word	0x08002271
 800225c:	08002285 	.word	0x08002285
 8002260:	4a76      	ldr	r2, [pc, #472]	; (800243c <HAL_GPIO_Init+0x2a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002266:	e02c      	b.n	80022c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e029      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	3304      	adds	r3, #4
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e024      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	3308      	adds	r3, #8
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e01f      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	330c      	adds	r3, #12
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e01a      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002296:	2304      	movs	r3, #4
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e013      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a4:	2308      	movs	r3, #8
 80022a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	611a      	str	r2, [r3, #16]
          break;
 80022ae:	e009      	b.n	80022c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b0:	2308      	movs	r3, #8
 80022b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	615a      	str	r2, [r3, #20]
          break;
 80022ba:	e003      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          break;
 80022c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d801      	bhi.n	80022ce <HAL_GPIO_Init+0x13a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_Init+0x13e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d802      	bhi.n	80022e0 <HAL_GPIO_Init+0x14c>
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x152>
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	3b08      	subs	r3, #8
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	210f      	movs	r1, #15
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	6a39      	ldr	r1, [r7, #32]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a9 	beq.w	8002466 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_GPIO_Init+0x2b4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00d      	beq.n	8002374 <HAL_GPIO_Init+0x1e0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3c      	ldr	r2, [pc, #240]	; (800244c <HAL_GPIO_Init+0x2b8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x1dc>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <HAL_GPIO_Init+0x2bc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_GPIO_Init+0x1d8>
 8002368:	2302      	movs	r3, #2
 800236a:	e004      	b.n	8002376 <HAL_GPIO_Init+0x1e2>
 800236c:	2303      	movs	r3, #3
 800236e:	e002      	b.n	8002376 <HAL_GPIO_Init+0x1e2>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_GPIO_Init+0x1e2>
 8002374:	2300      	movs	r3, #0
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002386:	492f      	ldr	r1, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	492b      	ldr	r1, [pc, #172]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4927      	ldr	r1, [pc, #156]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4921      	ldr	r1, [pc, #132]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	491d      	ldr	r1, [pc, #116]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4917      	ldr	r1, [pc, #92]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	4913      	ldr	r1, [pc, #76]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 8002408:	4013      	ands	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01f      	beq.n	8002458 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	490d      	ldr	r1, [pc, #52]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e01f      	b.n	8002466 <HAL_GPIO_Init+0x2d2>
 8002426:	bf00      	nop
 8002428:	10320000 	.word	0x10320000
 800242c:	10310000 	.word	0x10310000
 8002430:	10220000 	.word	0x10220000
 8002434:	10210000 	.word	0x10210000
 8002438:	10120000 	.word	0x10120000
 800243c:	10110000 	.word	0x10110000
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	40010800 	.word	0x40010800
 800244c:	40010c00 	.word	0x40010c00
 8002450:	40011000 	.word	0x40011000
 8002454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_GPIO_Init+0x2f4>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4909      	ldr	r1, [pc, #36]	; (8002488 <HAL_GPIO_Init+0x2f4>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae96 	bne.w	80021a8 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	372c      	adds	r7, #44	; 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a8:	e003      	b.n	80024b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e12b      	b.n	8002726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fc06 	bl	8001cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002520:	f001 fd1e 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8002524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a81      	ldr	r2, [pc, #516]	; (8002730 <HAL_I2C_Init+0x274>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d807      	bhi.n	8002540 <HAL_I2C_Init+0x84>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_I2C_Init+0x278>)
 8002534:	4293      	cmp	r3, r2
 8002536:	bf94      	ite	ls
 8002538:	2301      	movls	r3, #1
 800253a:	2300      	movhi	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e006      	b.n	800254e <HAL_I2C_Init+0x92>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a7d      	ldr	r2, [pc, #500]	; (8002738 <HAL_I2C_Init+0x27c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	bf94      	ite	ls
 8002548:	2301      	movls	r3, #1
 800254a:	2300      	movhi	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0e7      	b.n	8002726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a78      	ldr	r2, [pc, #480]	; (800273c <HAL_I2C_Init+0x280>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_I2C_Init+0x274>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d802      	bhi.n	8002590 <HAL_I2C_Init+0xd4>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3301      	adds	r3, #1
 800258e:	e009      	b.n	80025a4 <HAL_I2C_Init+0xe8>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_I2C_Init+0x284>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	3301      	adds	r3, #1
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	495c      	ldr	r1, [pc, #368]	; (8002730 <HAL_I2C_Init+0x274>)
 80025c0:	428b      	cmp	r3, r1
 80025c2:	d819      	bhi.n	80025f8 <HAL_I2C_Init+0x13c>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e59      	subs	r1, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025d8:	400b      	ands	r3, r1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_I2C_Init+0x138>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e59      	subs	r1, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	e051      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e04f      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <HAL_I2C_Init+0x168>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e012      	b.n	800264a <HAL_I2C_Init+0x18e>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	0099      	lsls	r1, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Init+0x196>
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10e      	bne.n	8002678 <HAL_I2C_Init+0x1bc>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e58      	subs	r0, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	440b      	add	r3, r1
 8002668:	fbb0 f3f3 	udiv	r3, r0, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6809      	ldr	r1, [r1, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6911      	ldr	r1, [r2, #16]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	000186a0 	.word	0x000186a0
 8002734:	001e847f 	.word	0x001e847f
 8002738:	003d08ff 	.word	0x003d08ff
 800273c:	431bde83 	.word	0x431bde83
 8002740:	10624dd3 	.word	0x10624dd3

08002744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275e:	f7ff fc01 	bl	8001f64 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b20      	cmp	r3, #32
 800276e:	f040 80d9 	bne.w	8002924 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2319      	movs	r3, #25
 8002778:	2201      	movs	r2, #1
 800277a:	496d      	ldr	r1, [pc, #436]	; (8002930 <HAL_I2C_Mem_Write+0x1ec>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fdef 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
 800278a:	e0cc      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Write+0x56>
 8002796:	2302      	movs	r3, #2
 8002798:	e0c5      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d007      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2221      	movs	r2, #33	; 0x21
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <HAL_I2C_Mem_Write+0x1f0>)
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002802:	88f8      	ldrh	r0, [r7, #6]
 8002804:	893a      	ldrh	r2, [r7, #8]
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4603      	mov	r3, r0
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fc26 	bl	8003064 <I2C_RequestMemoryWrite>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d052      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e081      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 feb4 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b04      	cmp	r3, #4
 8002838:	d107      	bne.n	800284a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b04      	cmp	r3, #4
 800288a:	d11b      	bne.n	80028c4 <HAL_I2C_Mem_Write+0x180>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d017      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1aa      	bne.n	8002822 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fea7 	bl	8003624 <I2C_WaitOnBTFFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d107      	bne.n	80028f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e016      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	00100002 	.word	0x00100002
 8002934:	ffff0000 	.word	0xffff0000

08002938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002956:	f7ff fb05 	bl	8001f64 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b20      	cmp	r3, #32
 8002966:	f040 8244 	bne.w	8002df2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2319      	movs	r3, #25
 8002970:	2201      	movs	r2, #1
 8002972:	4982      	ldr	r1, [pc, #520]	; (8002b7c <HAL_I2C_Mem_Read+0x244>)
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fcf3 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
 8002982:	e237      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_I2C_Mem_Read+0x5a>
 800298e:	2302      	movs	r3, #2
 8002990:	e230      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d007      	beq.n	80029b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2222      	movs	r2, #34	; 0x22
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a62      	ldr	r2, [pc, #392]	; (8002b80 <HAL_I2C_Mem_Read+0x248>)
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fa:	88f8      	ldrh	r0, [r7, #6]
 80029fc:	893a      	ldrh	r2, [r7, #8]
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4603      	mov	r3, r0
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fbc0 	bl	8003190 <I2C_RequestMemoryRead>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1ec      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d113      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e1c0      	b.n	8002dcc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d11e      	bne.n	8002a90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a62:	b672      	cpsid	i
}
 8002a64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a8c:	b662      	cpsie	i
}
 8002a8e:	e035      	b.n	8002afc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d11e      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa8:	b672      	cpsid	i
}
 8002aaa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad2:	b662      	cpsie	i
}
 8002ad4:	e012      	b.n	8002afc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002afc:	e166      	b.n	8002dcc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	f200 811f 	bhi.w	8002d46 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d123      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fdcd 	bl	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e167      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b56:	e139      	b.n	8002dcc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d152      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	2200      	movs	r2, #0
 8002b68:	4906      	ldr	r1, [pc, #24]	; (8002b84 <HAL_I2C_Mem_Read+0x24c>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fbf8 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e13c      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
 8002b7a:	bf00      	nop
 8002b7c:	00100002 	.word	0x00100002
 8002b80:	ffff0000 	.word	0xffff0000
 8002b84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bce:	b662      	cpsie	i
}
 8002bd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c04:	e0e2      	b.n	8002dcc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	497b      	ldr	r1, [pc, #492]	; (8002dfc <HAL_I2C_Mem_Read+0x4c4>)
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fba5 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0e9      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
}
 8002c32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c66:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_I2C_Mem_Read+0x4c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_I2C_Mem_Read+0x4cc>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a1a      	lsrs	r2, r3, #8
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00da      	lsls	r2, r3, #3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d118      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cae:	b662      	cpsie	i
}
 8002cb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e09a      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d1d9      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0e:	b662      	cpsie	i
}
 8002d10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d44:	e042      	b.n	8002dcc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fcb2 	bl	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e04c      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d118      	bne.n	8002dcc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f ae94 	bne.w	8002afe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010004 	.word	0x00010004
 8002e00:	20000000 	.word	0x20000000
 8002e04:	14f8b589 	.word	0x14f8b589

08002e08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff f8a4 	bl	8001f64 <HAL_GetTick>
 8002e1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	f040 8111 	bne.w	8003052 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2319      	movs	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	4988      	ldr	r1, [pc, #544]	; (800305c <HAL_I2C_IsDeviceReady+0x254>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa90 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	e104      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_IsDeviceReady+0x50>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0fd      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d007      	beq.n	8002e7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2224      	movs	r2, #36	; 0x24
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_I2C_IsDeviceReady+0x258>)
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa4e 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed8:	d103      	bne.n	8002ee2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0b6      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ef4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7ff f835 	bl	8001f64 <HAL_GetTick>
 8002efa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f2a:	e025      	b.n	8002f78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7ff f81a 	bl	8001f64 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d302      	bcc.n	8002f42 <HAL_I2C_IsDeviceReady+0x13a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	22a0      	movs	r2, #160	; 0xa0
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2ba0      	cmp	r3, #160	; 0xa0
 8002f82:	d005      	beq.n	8002f90 <HAL_I2C_IsDeviceReady+0x188>
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_I2C_IsDeviceReady+0x188>
 8002f8a:	7dbb      	ldrb	r3, [r7, #22]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0cd      	beq.n	8002f2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d129      	bne.n	8002ffa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2319      	movs	r3, #25
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4921      	ldr	r1, [pc, #132]	; (800305c <HAL_I2C_IsDeviceReady+0x254>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f9c2 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e036      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e02c      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003012:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2319      	movs	r3, #25
 800301a:	2201      	movs	r2, #1
 800301c:	490f      	ldr	r1, [pc, #60]	; (800305c <HAL_I2C_IsDeviceReady+0x254>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f99e 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e012      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	3301      	adds	r3, #1
 8003032:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	f4ff af32 	bcc.w	8002ea2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	00100002 	.word	0x00100002
 8003060:	ffff0000 	.word	0xffff0000

08003064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f960 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d103      	bne.n	80030be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e05f      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	492d      	ldr	r1, [pc, #180]	; (800318c <I2C_RequestMemoryWrite+0x128>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f9bb 	bl	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04c      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa46 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02b      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	e021      	b.n	8003180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa20 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e005      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	00010002 	.word	0x00010002

08003190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8c2 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f0:	d103      	bne.n	80031fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0aa      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800320c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	4952      	ldr	r1, [pc, #328]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f91d 	bl	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e097      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f9a8 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e076      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e021      	b.n	80032bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	6a39      	ldr	r1, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f982 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	d107      	bne.n	80032ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e050      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b2:	893b      	ldrh	r3, [r7, #8]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f967 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e035      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f82b 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d103      	bne.n	8003328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e013      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800332c:	897b      	ldrh	r3, [r7, #10]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f886 	bl	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010002 	.word	0x00010002

08003360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003370:	e048      	b.n	8003404 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d044      	beq.n	8003404 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe fdf3 	bl	8001f64 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d139      	bne.n	8003404 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	e00c      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e023      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10d      	bne.n	800342a <I2C_WaitOnFlagUntilTimeout+0xca>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	e00c      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	43da      	mvns	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d093      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003462:	e071      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d123      	bne.n	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800348c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e067      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d041      	beq.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7fe fd4e 	bl	8001f64 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d136      	bne.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e00b      	b.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e021      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10c      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e00b      	b.n	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af6d 	bne.w	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a0:	e034      	b.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f8e3 	bl	800376e <I2C_IsAcknowledgeFailed>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e034      	b.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d028      	beq.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fe fcd3 	bl	8001f64 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11d      	bne.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b80      	cmp	r3, #128	; 0x80
 80035dc:	d016      	beq.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d1c3      	bne.n	80035a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003630:	e034      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f89b 	bl	800376e <I2C_IsAcknowledgeFailed>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e034      	b.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d028      	beq.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7fe fc8b 	bl	8001f64 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11d      	bne.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d016      	beq.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e007      	b.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d1c3      	bne.n	8003632 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c0:	e049      	b.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d119      	bne.n	8003704 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0210 	mvn.w	r2, #16
 80036d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e030      	b.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7fe fc2e 	bl	8001f64 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11d      	bne.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d016      	beq.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e007      	b.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d1ae      	bne.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d11b      	bne.n	80037be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e272      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8087 	beq.w	80038fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ec:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d00c      	beq.n	8003812 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f8:	4b8f      	ldr	r3, [pc, #572]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b08      	cmp	r3, #8
 8003802:	d112      	bne.n	800382a <HAL_RCC_OscConfig+0x5e>
 8003804:	4b8c      	ldr	r3, [pc, #560]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d10b      	bne.n	800382a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d06c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x12c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d168      	bne.n	80038f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e24c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x76>
 8003834:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7f      	ldr	r2, [pc, #508]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e02e      	b.n	80038a0 <HAL_RCC_OscConfig+0xd4>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7a      	ldr	r2, [pc, #488]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b78      	ldr	r3, [pc, #480]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a77      	ldr	r2, [pc, #476]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800385c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xd4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0xbc>
 800386e:	4b72      	ldr	r3, [pc, #456]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a71      	ldr	r2, [pc, #452]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6e      	ldr	r2, [pc, #440]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xd4>
 8003888:	4b6b      	ldr	r3, [pc, #428]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a6a      	ldr	r2, [pc, #424]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fb5c 	bl	8001f64 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fb58 	bl	8001f64 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e200      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xe4>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fb48 	bl	8001f64 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fb44 	bl	8001f64 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1ec      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x10c>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d063      	beq.n	80039ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003906:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11c      	bne.n	8003958 <HAL_RCC_OscConfig+0x18c>
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x176>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1c0      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4939      	ldr	r1, [pc, #228]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	e03a      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fe fafd 	bl	8001f64 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe faf9 	bl	8001f64 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1a1      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4927      	ldr	r1, [pc, #156]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fadc 	bl	8001f64 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe fad8 	bl	8001f64 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e180      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d03a      	beq.n	8003a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d019      	beq.n	8003a16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fabc 	bl	8001f64 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fe fab8 	bl	8001f64 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e160      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f000 faba 	bl	8003f88 <RCC_Delay>
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe faa2 	bl	8001f64 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a22:	e00f      	b.n	8003a44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fe fa9e 	bl	8001f64 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d908      	bls.n	8003a44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e146      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	42420000 	.word	0x42420000
 8003a40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e9      	bne.n	8003a24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a6 	beq.w	8003baa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a87      	ldr	r2, [pc, #540]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	61d3      	str	r3, [r2, #28]
 8003a7a:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <HAL_RCC_OscConfig+0x4c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x4c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7e      	ldr	r2, [pc, #504]	; (8003c94 <HAL_RCC_OscConfig+0x4c8>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fa5f 	bl	8001f64 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fe fa5b 	bl	8001f64 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e103      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b75      	ldr	r3, [pc, #468]	; (8003c94 <HAL_RCC_OscConfig+0x4c8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x312>
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	e02d      	b.n	8003b3a <HAL_RCC_OscConfig+0x36e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x334>
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6213      	str	r3, [r2, #32]
 8003af2:	4b67      	ldr	r3, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4a66      	ldr	r2, [pc, #408]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6213      	str	r3, [r2, #32]
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x36e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x356>
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4a60      	ldr	r2, [pc, #384]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6213      	str	r3, [r2, #32]
 8003b14:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a5d      	ldr	r2, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x36e>
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a5a      	ldr	r2, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	4b58      	ldr	r3, [pc, #352]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fa0f 	bl	8001f64 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fa0b 	bl	8001f64 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0b1      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x37e>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fe f9f9 	bl	8001f64 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f9f5 	bl	8001f64 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e09b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8087 	beq.w	8003cc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb4:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d061      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d146      	bne.n	8003c56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f9c9 	bl	8001f64 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe f9c5 	bl	8001f64 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e06d      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4921      	ldr	r1, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c10:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a19      	ldr	r1, [r3, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	430b      	orrs	r3, r1
 8003c22:	491b      	ldr	r1, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe f999 	bl	8001f64 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe f995 	bl	8001f64 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e03d      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x46a>
 8003c54:	e035      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe f982 	bl	8001f64 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fe f97e 	bl	8001f64 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e026      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x498>
 8003c82:	e01e      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e019      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_OscConfig+0x500>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0d0      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d910      	bls.n	8003d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 0207 	bic.w	r2, r3, #7
 8003cfa:	4965      	ldr	r1, [pc, #404]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0b8      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d2c:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b50      	ldr	r3, [pc, #320]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	494d      	ldr	r1, [pc, #308]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d040      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d115      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07f      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e073      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06b      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4936      	ldr	r1, [pc, #216]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe f8d0 	bl	8001f64 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fe f8cc 	bl	8001f64 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e053      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d210      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 0207 	bic.w	r2, r3, #7
 8003e06:	4922      	ldr	r1, [pc, #136]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e032      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4916      	ldr	r1, [pc, #88]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	490e      	ldr	r1, [pc, #56]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e5e:	f000 f821 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e62:	4602      	mov	r2, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	490a      	ldr	r1, [pc, #40]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	5ccb      	ldrb	r3, [r1, r3]
 8003e72:	fa22 f303 	lsr.w	r3, r2, r3
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1cc>)
 8003e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe f82e 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40022000 	.word	0x40022000
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08005638 	.word	0x08005638
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x36>
 8003ed2:	e027      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed6:	613b      	str	r3, [r7, #16]
      break;
 8003ed8:	e027      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	0c9b      	lsrs	r3, r3, #18
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ee4:	5cd3      	ldrb	r3, [r2, r3]
 8003ee6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0c5b      	lsrs	r3, r3, #17
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f06:	fb03 f202 	mul.w	r2, r3, r2
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e004      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	613b      	str	r3, [r7, #16]
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f26:	613b      	str	r3, [r7, #16]
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	693b      	ldr	r3, [r7, #16]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	007a1200 	.word	0x007a1200
 8003f40:	08005650 	.word	0x08005650
 8003f44:	08005660 	.word	0x08005660
 8003f48:	003d0900 	.word	0x003d0900

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f64:	f7ff fff2 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	08005648 	.word	0x08005648

08003f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <RCC_Delay+0x34>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <RCC_Delay+0x38>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0a5b      	lsrs	r3, r3, #9
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fa4:	bf00      	nop
  }
  while (Delay --);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f9      	bne.n	8003fa4 <RCC_Delay+0x1c>
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	10624dd3 	.word	0x10624dd3

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e041      	b.n	800405a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fec2 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 fa76 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e035      	b.n	80040e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_TIM_Base_Start_IT+0x90>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x4e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x4e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <HAL_TIM_Base_Start_IT+0x94>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d111      	bne.n	80040d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d010      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	e007      	b.n	80040e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400

080040fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9bd 	bl	80044be <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9b0 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9bf 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0204 	mvn.w	r2, #4
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f993 	bl	80044be <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f986 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f995 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0208 	mvn.w	r2, #8
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f969 	bl	80044be <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f95c 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f96b 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0210 	mvn.w	r2, #16
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2208      	movs	r2, #8
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f93f 	bl	80044be <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f932 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f941 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0201 	mvn.w	r2, #1
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f90d 	bl	800449a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fa73 	bl	8004792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f905 	bl	80044e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d10e      	bne.n	8004304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0220 	mvn.w	r2, #32
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa3e 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIM_ConfigClockSource+0x1c>
 8004324:	2302      	movs	r3, #2
 8004326:	e0b4      	b.n	8004492 <HAL_TIM_ConfigClockSource+0x186>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d03e      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	f200 8087 	bhi.w	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	f000 8086 	beq.w	800447e <HAL_TIM_ConfigClockSource+0x172>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d87f      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b70      	cmp	r3, #112	; 0x70
 800437a:	d01a      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xa6>
 800437c:	2b70      	cmp	r3, #112	; 0x70
 800437e:	d87b      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b60      	cmp	r3, #96	; 0x60
 8004382:	d050      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x11a>
 8004384:	2b60      	cmp	r3, #96	; 0x60
 8004386:	d877      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b50      	cmp	r3, #80	; 0x50
 800438a:	d03c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xfa>
 800438c:	2b50      	cmp	r3, #80	; 0x50
 800438e:	d873      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d058      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x13a>
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d86f      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d064      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 800439c:	2b30      	cmp	r3, #48	; 0x30
 800439e:	d86b      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d060      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d867      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05c      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d05a      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043b0:	e062      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	f000 f966 	bl	8004692 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	609a      	str	r2, [r3, #8]
      break;
 80043de:	e04f      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	f000 f94f 	bl	8004692 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004402:	609a      	str	r2, [r3, #8]
      break;
 8004404:	e03c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	461a      	mov	r2, r3
 8004414:	f000 f8c6 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2150      	movs	r1, #80	; 0x50
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f91d 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004424:	e02c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004432:	461a      	mov	r2, r3
 8004434:	f000 f8e4 	bl	8004600 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2160      	movs	r1, #96	; 0x60
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f90d 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004444:	e01c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	461a      	mov	r2, r3
 8004454:	f000 f8a6 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f8fd 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004464:	e00c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f000 f8f4 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004476:	e003      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e000      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800447e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a25      	ldr	r2, [pc, #148]	; (800459c <TIM_Base_SetConfig+0xa8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x28>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x28>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <TIM_Base_SetConfig+0xac>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1a      	ldr	r2, [pc, #104]	; (800459c <TIM_Base_SetConfig+0xa8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0x52>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0x52>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <TIM_Base_SetConfig+0xac>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a07      	ldr	r2, [pc, #28]	; (800459c <TIM_Base_SetConfig+0xa8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d103      	bne.n	800458c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	615a      	str	r2, [r3, #20]
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40000400 	.word	0x40000400

080045a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 030a 	bic.w	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	031b      	lsls	r3, r3, #12
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	f043 0307 	orr.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	021a      	lsls	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e041      	b.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d004      	beq.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10c      	bne.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004746:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <memset>:
 80047a4:	4603      	mov	r3, r0
 80047a6:	4402      	add	r2, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d100      	bne.n	80047ae <memset+0xa>
 80047ac:	4770      	bx	lr
 80047ae:	f803 1b01 	strb.w	r1, [r3], #1
 80047b2:	e7f9      	b.n	80047a8 <memset+0x4>

080047b4 <__errno>:
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <__errno+0x8>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000058 	.word	0x20000058

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	2600      	movs	r6, #0
 80047c4:	4d0c      	ldr	r5, [pc, #48]	; (80047f8 <__libc_init_array+0x38>)
 80047c6:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	f000 ff24 	bl	800561c <_init>
 80047d4:	2600      	movs	r6, #0
 80047d6:	4d0a      	ldr	r5, [pc, #40]	; (8004800 <__libc_init_array+0x40>)
 80047d8:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <__libc_init_array+0x44>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	08005698 	.word	0x08005698
 80047fc:	08005698 	.word	0x08005698
 8004800:	08005698 	.word	0x08005698
 8004804:	0800569c 	.word	0x0800569c

08004808 <pow>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4680      	mov	r8, r0
 8004812:	4689      	mov	r9, r1
 8004814:	f000 f868 	bl	80048e8 <__ieee754_pow>
 8004818:	4622      	mov	r2, r4
 800481a:	4606      	mov	r6, r0
 800481c:	460f      	mov	r7, r1
 800481e:	462b      	mov	r3, r5
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f7fc f8ea 	bl	80009fc <__aeabi_dcmpun>
 8004828:	bbc8      	cbnz	r0, 800489e <pow+0x96>
 800482a:	2200      	movs	r2, #0
 800482c:	2300      	movs	r3, #0
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fc f8b1 	bl	8000998 <__aeabi_dcmpeq>
 8004836:	b1b8      	cbz	r0, 8004868 <pow+0x60>
 8004838:	2200      	movs	r2, #0
 800483a:	2300      	movs	r3, #0
 800483c:	4620      	mov	r0, r4
 800483e:	4629      	mov	r1, r5
 8004840:	f7fc f8aa 	bl	8000998 <__aeabi_dcmpeq>
 8004844:	2800      	cmp	r0, #0
 8004846:	d141      	bne.n	80048cc <pow+0xc4>
 8004848:	4620      	mov	r0, r4
 800484a:	4629      	mov	r1, r5
 800484c:	f000 f844 	bl	80048d8 <finite>
 8004850:	b328      	cbz	r0, 800489e <pow+0x96>
 8004852:	2200      	movs	r2, #0
 8004854:	2300      	movs	r3, #0
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fc f8a7 	bl	80009ac <__aeabi_dcmplt>
 800485e:	b1f0      	cbz	r0, 800489e <pow+0x96>
 8004860:	f7ff ffa8 	bl	80047b4 <__errno>
 8004864:	2322      	movs	r3, #34	; 0x22
 8004866:	e019      	b.n	800489c <pow+0x94>
 8004868:	4630      	mov	r0, r6
 800486a:	4639      	mov	r1, r7
 800486c:	f000 f834 	bl	80048d8 <finite>
 8004870:	b9c8      	cbnz	r0, 80048a6 <pow+0x9e>
 8004872:	4640      	mov	r0, r8
 8004874:	4649      	mov	r1, r9
 8004876:	f000 f82f 	bl	80048d8 <finite>
 800487a:	b1a0      	cbz	r0, 80048a6 <pow+0x9e>
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f000 f82a 	bl	80048d8 <finite>
 8004884:	b178      	cbz	r0, 80048a6 <pow+0x9e>
 8004886:	4632      	mov	r2, r6
 8004888:	463b      	mov	r3, r7
 800488a:	4630      	mov	r0, r6
 800488c:	4639      	mov	r1, r7
 800488e:	f7fc f8b5 	bl	80009fc <__aeabi_dcmpun>
 8004892:	2800      	cmp	r0, #0
 8004894:	d0e4      	beq.n	8004860 <pow+0x58>
 8004896:	f7ff ff8d 	bl	80047b4 <__errno>
 800489a:	2321      	movs	r3, #33	; 0x21
 800489c:	6003      	str	r3, [r0, #0]
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	4630      	mov	r0, r6
 80048ac:	4639      	mov	r1, r7
 80048ae:	f7fc f873 	bl	8000998 <__aeabi_dcmpeq>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0f3      	beq.n	800489e <pow+0x96>
 80048b6:	4640      	mov	r0, r8
 80048b8:	4649      	mov	r1, r9
 80048ba:	f000 f80d 	bl	80048d8 <finite>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d0ed      	beq.n	800489e <pow+0x96>
 80048c2:	4620      	mov	r0, r4
 80048c4:	4629      	mov	r1, r5
 80048c6:	f000 f807 	bl	80048d8 <finite>
 80048ca:	e7c8      	b.n	800485e <pow+0x56>
 80048cc:	2600      	movs	r6, #0
 80048ce:	4f01      	ldr	r7, [pc, #4]	; (80048d4 <pow+0xcc>)
 80048d0:	e7e5      	b.n	800489e <pow+0x96>
 80048d2:	bf00      	nop
 80048d4:	3ff00000 	.word	0x3ff00000

080048d8 <finite>:
 80048d8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80048dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80048e0:	0fc0      	lsrs	r0, r0, #31
 80048e2:	4770      	bx	lr
 80048e4:	0000      	movs	r0, r0
	...

080048e8 <__ieee754_pow>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	b093      	sub	sp, #76	; 0x4c
 80048ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80048f6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80048fa:	4689      	mov	r9, r1
 80048fc:	ea56 0102 	orrs.w	r1, r6, r2
 8004900:	4680      	mov	r8, r0
 8004902:	d111      	bne.n	8004928 <__ieee754_pow+0x40>
 8004904:	1803      	adds	r3, r0, r0
 8004906:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800490a:	4152      	adcs	r2, r2
 800490c:	4299      	cmp	r1, r3
 800490e:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <__ieee754_pow+0x230>)
 8004910:	4193      	sbcs	r3, r2
 8004912:	f080 84ba 	bcs.w	800528a <__ieee754_pow+0x9a2>
 8004916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f7fb fc1d 	bl	800015c <__adddf3>
 8004922:	4683      	mov	fp, r0
 8004924:	468c      	mov	ip, r1
 8004926:	e06f      	b.n	8004a08 <__ieee754_pow+0x120>
 8004928:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <__ieee754_pow+0x234>)
 800492a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800492e:	429c      	cmp	r4, r3
 8004930:	464d      	mov	r5, r9
 8004932:	4682      	mov	sl, r0
 8004934:	dc06      	bgt.n	8004944 <__ieee754_pow+0x5c>
 8004936:	d101      	bne.n	800493c <__ieee754_pow+0x54>
 8004938:	2800      	cmp	r0, #0
 800493a:	d1ec      	bne.n	8004916 <__ieee754_pow+0x2e>
 800493c:	429e      	cmp	r6, r3
 800493e:	dc01      	bgt.n	8004944 <__ieee754_pow+0x5c>
 8004940:	d10f      	bne.n	8004962 <__ieee754_pow+0x7a>
 8004942:	b172      	cbz	r2, 8004962 <__ieee754_pow+0x7a>
 8004944:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004948:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800494c:	ea55 050a 	orrs.w	r5, r5, sl
 8004950:	d1e1      	bne.n	8004916 <__ieee754_pow+0x2e>
 8004952:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004956:	18db      	adds	r3, r3, r3
 8004958:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800495c:	4152      	adcs	r2, r2
 800495e:	429d      	cmp	r5, r3
 8004960:	e7d5      	b.n	800490e <__ieee754_pow+0x26>
 8004962:	2d00      	cmp	r5, #0
 8004964:	da39      	bge.n	80049da <__ieee754_pow+0xf2>
 8004966:	4b6e      	ldr	r3, [pc, #440]	; (8004b20 <__ieee754_pow+0x238>)
 8004968:	429e      	cmp	r6, r3
 800496a:	dc52      	bgt.n	8004a12 <__ieee754_pow+0x12a>
 800496c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004970:	429e      	cmp	r6, r3
 8004972:	f340 849d 	ble.w	80052b0 <__ieee754_pow+0x9c8>
 8004976:	1533      	asrs	r3, r6, #20
 8004978:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800497c:	2b14      	cmp	r3, #20
 800497e:	dd0f      	ble.n	80049a0 <__ieee754_pow+0xb8>
 8004980:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004984:	fa22 f103 	lsr.w	r1, r2, r3
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	4293      	cmp	r3, r2
 800498e:	f040 848f 	bne.w	80052b0 <__ieee754_pow+0x9c8>
 8004992:	f001 0101 	and.w	r1, r1, #1
 8004996:	f1c1 0302 	rsb	r3, r1, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	b182      	cbz	r2, 80049c0 <__ieee754_pow+0xd8>
 800499e:	e05d      	b.n	8004a5c <__ieee754_pow+0x174>
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d159      	bne.n	8004a58 <__ieee754_pow+0x170>
 80049a4:	f1c3 0314 	rsb	r3, r3, #20
 80049a8:	fa46 f103 	asr.w	r1, r6, r3
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	42b3      	cmp	r3, r6
 80049b2:	f040 847a 	bne.w	80052aa <__ieee754_pow+0x9c2>
 80049b6:	f001 0101 	and.w	r1, r1, #1
 80049ba:	f1c1 0302 	rsb	r3, r1, #2
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <__ieee754_pow+0x23c>)
 80049c2:	429e      	cmp	r6, r3
 80049c4:	d132      	bne.n	8004a2c <__ieee754_pow+0x144>
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	f280 846b 	bge.w	80052a2 <__ieee754_pow+0x9ba>
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	2000      	movs	r0, #0
 80049d2:	4954      	ldr	r1, [pc, #336]	; (8004b24 <__ieee754_pow+0x23c>)
 80049d4:	f7fb fea2 	bl	800071c <__aeabi_ddiv>
 80049d8:	e7a3      	b.n	8004922 <__ieee754_pow+0x3a>
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2a00      	cmp	r2, #0
 80049e0:	d13c      	bne.n	8004a5c <__ieee754_pow+0x174>
 80049e2:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <__ieee754_pow+0x234>)
 80049e4:	429e      	cmp	r6, r3
 80049e6:	d1eb      	bne.n	80049c0 <__ieee754_pow+0xd8>
 80049e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80049ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80049f0:	ea53 030a 	orrs.w	r3, r3, sl
 80049f4:	f000 8449 	beq.w	800528a <__ieee754_pow+0x9a2>
 80049f8:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <__ieee754_pow+0x240>)
 80049fa:	429c      	cmp	r4, r3
 80049fc:	dd0b      	ble.n	8004a16 <__ieee754_pow+0x12e>
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	f2c0 8449 	blt.w	8005296 <__ieee754_pow+0x9ae>
 8004a04:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004a08:	4658      	mov	r0, fp
 8004a0a:	4661      	mov	r1, ip
 8004a0c:	b013      	add	sp, #76	; 0x4c
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	2302      	movs	r3, #2
 8004a14:	e7e2      	b.n	80049dc <__ieee754_pow+0xf4>
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	f04f 0b00 	mov.w	fp, #0
 8004a1c:	f04f 0c00 	mov.w	ip, #0
 8004a20:	daf2      	bge.n	8004a08 <__ieee754_pow+0x120>
 8004a22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004a26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004a2a:	e7ed      	b.n	8004a08 <__ieee754_pow+0x120>
 8004a2c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004a30:	d106      	bne.n	8004a40 <__ieee754_pow+0x158>
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	4640      	mov	r0, r8
 8004a38:	4649      	mov	r1, r9
 8004a3a:	f7fb fd45 	bl	80004c8 <__aeabi_dmul>
 8004a3e:	e770      	b.n	8004922 <__ieee754_pow+0x3a>
 8004a40:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <__ieee754_pow+0x244>)
 8004a42:	429f      	cmp	r7, r3
 8004a44:	d10a      	bne.n	8004a5c <__ieee754_pow+0x174>
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	db08      	blt.n	8004a5c <__ieee754_pow+0x174>
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	b013      	add	sp, #76	; 0x4c
 8004a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	f000 bd0a 	b.w	800546c <__ieee754_sqrt>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	f000 fc58 	bl	8005314 <fabs>
 8004a64:	4683      	mov	fp, r0
 8004a66:	468c      	mov	ip, r1
 8004a68:	f1ba 0f00 	cmp.w	sl, #0
 8004a6c:	d128      	bne.n	8004ac0 <__ieee754_pow+0x1d8>
 8004a6e:	b124      	cbz	r4, 8004a7a <__ieee754_pow+0x192>
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <__ieee754_pow+0x23c>)
 8004a72:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d122      	bne.n	8004ac0 <__ieee754_pow+0x1d8>
 8004a7a:	2f00      	cmp	r7, #0
 8004a7c:	da07      	bge.n	8004a8e <__ieee754_pow+0x1a6>
 8004a7e:	465a      	mov	r2, fp
 8004a80:	4663      	mov	r3, ip
 8004a82:	2000      	movs	r0, #0
 8004a84:	4927      	ldr	r1, [pc, #156]	; (8004b24 <__ieee754_pow+0x23c>)
 8004a86:	f7fb fe49 	bl	800071c <__aeabi_ddiv>
 8004a8a:	4683      	mov	fp, r0
 8004a8c:	468c      	mov	ip, r1
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	daba      	bge.n	8004a08 <__ieee754_pow+0x120>
 8004a92:	9b00      	ldr	r3, [sp, #0]
 8004a94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004a98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004a9c:	431c      	orrs	r4, r3
 8004a9e:	d108      	bne.n	8004ab2 <__ieee754_pow+0x1ca>
 8004aa0:	465a      	mov	r2, fp
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	4661      	mov	r1, ip
 8004aa8:	f7fb fb56 	bl	8000158 <__aeabi_dsub>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e790      	b.n	80049d4 <__ieee754_pow+0xec>
 8004ab2:	9b00      	ldr	r3, [sp, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d1a7      	bne.n	8004a08 <__ieee754_pow+0x120>
 8004ab8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004abc:	469c      	mov	ip, r3
 8004abe:	e7a3      	b.n	8004a08 <__ieee754_pow+0x120>
 8004ac0:	0feb      	lsrs	r3, r5, #31
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ac8:	9b00      	ldr	r3, [sp, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d104      	bne.n	8004ad8 <__ieee754_pow+0x1f0>
 8004ace:	4642      	mov	r2, r8
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	e7e7      	b.n	8004aa8 <__ieee754_pow+0x1c0>
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <__ieee754_pow+0x248>)
 8004ada:	429e      	cmp	r6, r3
 8004adc:	f340 80f6 	ble.w	8004ccc <__ieee754_pow+0x3e4>
 8004ae0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ae4:	429e      	cmp	r6, r3
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <__ieee754_pow+0x240>)
 8004ae8:	dd09      	ble.n	8004afe <__ieee754_pow+0x216>
 8004aea:	429c      	cmp	r4, r3
 8004aec:	dc0c      	bgt.n	8004b08 <__ieee754_pow+0x220>
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	da0c      	bge.n	8004b0c <__ieee754_pow+0x224>
 8004af2:	2000      	movs	r0, #0
 8004af4:	b013      	add	sp, #76	; 0x4c
 8004af6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	f000 bcb2 	b.w	8005462 <__math_oflow>
 8004afe:	429c      	cmp	r4, r3
 8004b00:	dbf5      	blt.n	8004aee <__ieee754_pow+0x206>
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <__ieee754_pow+0x23c>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	dd15      	ble.n	8004b34 <__ieee754_pow+0x24c>
 8004b08:	2f00      	cmp	r7, #0
 8004b0a:	dcf2      	bgt.n	8004af2 <__ieee754_pow+0x20a>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	b013      	add	sp, #76	; 0x4c
 8004b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	f000 bca0 	b.w	8005458 <__math_uflow>
 8004b18:	fff00000 	.word	0xfff00000
 8004b1c:	7ff00000 	.word	0x7ff00000
 8004b20:	433fffff 	.word	0x433fffff
 8004b24:	3ff00000 	.word	0x3ff00000
 8004b28:	3fefffff 	.word	0x3fefffff
 8004b2c:	3fe00000 	.word	0x3fe00000
 8004b30:	41e00000 	.word	0x41e00000
 8004b34:	4661      	mov	r1, ip
 8004b36:	2200      	movs	r2, #0
 8004b38:	4658      	mov	r0, fp
 8004b3a:	4b5f      	ldr	r3, [pc, #380]	; (8004cb8 <__ieee754_pow+0x3d0>)
 8004b3c:	f7fb fb0c 	bl	8000158 <__aeabi_dsub>
 8004b40:	a355      	add	r3, pc, #340	; (adr r3, 8004c98 <__ieee754_pow+0x3b0>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	4604      	mov	r4, r0
 8004b48:	460d      	mov	r5, r1
 8004b4a:	f7fb fcbd 	bl	80004c8 <__aeabi_dmul>
 8004b4e:	a354      	add	r3, pc, #336	; (adr r3, 8004ca0 <__ieee754_pow+0x3b8>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	4606      	mov	r6, r0
 8004b56:	460f      	mov	r7, r1
 8004b58:	4620      	mov	r0, r4
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	f7fb fcb4 	bl	80004c8 <__aeabi_dmul>
 8004b60:	2200      	movs	r2, #0
 8004b62:	4682      	mov	sl, r0
 8004b64:	468b      	mov	fp, r1
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4b54      	ldr	r3, [pc, #336]	; (8004cbc <__ieee754_pow+0x3d4>)
 8004b6c:	f7fb fcac 	bl	80004c8 <__aeabi_dmul>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	a14c      	add	r1, pc, #304	; (adr r1, 8004ca8 <__ieee754_pow+0x3c0>)
 8004b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b7a:	f7fb faed 	bl	8000158 <__aeabi_dsub>
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	f7fb fca1 	bl	80004c8 <__aeabi_dmul>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	494c      	ldr	r1, [pc, #304]	; (8004cc0 <__ieee754_pow+0x3d8>)
 8004b8e:	f7fb fae3 	bl	8000158 <__aeabi_dsub>
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	4680      	mov	r8, r0
 8004b98:	4689      	mov	r9, r1
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	f7fb fc93 	bl	80004c8 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	4649      	mov	r1, r9
 8004baa:	f7fb fc8d 	bl	80004c8 <__aeabi_dmul>
 8004bae:	a340      	add	r3, pc, #256	; (adr r3, 8004cb0 <__ieee754_pow+0x3c8>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fc88 	bl	80004c8 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4650      	mov	r0, sl
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	f7fb faca 	bl	8000158 <__aeabi_dsub>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4604      	mov	r4, r0
 8004bca:	460d      	mov	r5, r1
 8004bcc:	4630      	mov	r0, r6
 8004bce:	4639      	mov	r1, r7
 8004bd0:	f7fb fac4 	bl	800015c <__adddf3>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	4632      	mov	r2, r6
 8004bd8:	463b      	mov	r3, r7
 8004bda:	4682      	mov	sl, r0
 8004bdc:	468b      	mov	fp, r1
 8004bde:	f7fb fabb 	bl	8000158 <__aeabi_dsub>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb fab5 	bl	8000158 <__aeabi_dsub>
 8004bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bf2:	9b00      	ldr	r3, [sp, #0]
 8004bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f04f 0600 	mov.w	r6, #0
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	4b2f      	ldreq	r3, [pc, #188]	; (8004cc4 <__ieee754_pow+0x3dc>)
 8004c06:	4b2c      	ldrne	r3, [pc, #176]	; (8004cb8 <__ieee754_pow+0x3d0>)
 8004c08:	4604      	mov	r4, r0
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c10:	e9cd 2300 	strd	r2, r3, [sp]
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	f7fb fa9e 	bl	8000158 <__aeabi_dsub>
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	465b      	mov	r3, fp
 8004c20:	f7fb fc52 	bl	80004c8 <__aeabi_dmul>
 8004c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c28:	4680      	mov	r8, r0
 8004c2a:	4689      	mov	r9, r1
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb fc4a 	bl	80004c8 <__aeabi_dmul>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fa8e 	bl	800015c <__adddf3>
 8004c40:	4632      	mov	r2, r6
 8004c42:	463b      	mov	r3, r7
 8004c44:	4680      	mov	r8, r0
 8004c46:	4689      	mov	r9, r1
 8004c48:	4650      	mov	r0, sl
 8004c4a:	4659      	mov	r1, fp
 8004c4c:	f7fb fc3c 	bl	80004c8 <__aeabi_dmul>
 8004c50:	4604      	mov	r4, r0
 8004c52:	460d      	mov	r5, r1
 8004c54:	460b      	mov	r3, r1
 8004c56:	4602      	mov	r2, r0
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c60:	f7fb fa7c 	bl	800015c <__adddf3>
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <__ieee754_pow+0x3e0>)
 8004c66:	4682      	mov	sl, r0
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	f340 82e7 	ble.w	8005240 <__ieee754_pow+0x958>
 8004c72:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004c76:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004c7a:	4303      	orrs	r3, r0
 8004c7c:	f000 81e2 	beq.w	8005044 <__ieee754_pow+0x75c>
 8004c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2300      	movs	r3, #0
 8004c88:	f7fb fe90 	bl	80009ac <__aeabi_dcmplt>
 8004c8c:	3800      	subs	r0, #0
 8004c8e:	bf18      	it	ne
 8004c90:	2001      	movne	r0, #1
 8004c92:	e72f      	b.n	8004af4 <__ieee754_pow+0x20c>
 8004c94:	f3af 8000 	nop.w
 8004c98:	60000000 	.word	0x60000000
 8004c9c:	3ff71547 	.word	0x3ff71547
 8004ca0:	f85ddf44 	.word	0xf85ddf44
 8004ca4:	3e54ae0b 	.word	0x3e54ae0b
 8004ca8:	55555555 	.word	0x55555555
 8004cac:	3fd55555 	.word	0x3fd55555
 8004cb0:	652b82fe 	.word	0x652b82fe
 8004cb4:	3ff71547 	.word	0x3ff71547
 8004cb8:	3ff00000 	.word	0x3ff00000
 8004cbc:	3fd00000 	.word	0x3fd00000
 8004cc0:	3fe00000 	.word	0x3fe00000
 8004cc4:	bff00000 	.word	0xbff00000
 8004cc8:	408fffff 	.word	0x408fffff
 8004ccc:	4bd4      	ldr	r3, [pc, #848]	; (8005020 <__ieee754_pow+0x738>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	402b      	ands	r3, r5
 8004cd2:	b943      	cbnz	r3, 8004ce6 <__ieee754_pow+0x3fe>
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	4661      	mov	r1, ip
 8004cd8:	4bd2      	ldr	r3, [pc, #840]	; (8005024 <__ieee754_pow+0x73c>)
 8004cda:	f7fb fbf5 	bl	80004c8 <__aeabi_dmul>
 8004cde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004ce2:	4683      	mov	fp, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	1523      	asrs	r3, r4, #20
 8004ce8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004cec:	4413      	add	r3, r2
 8004cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf0:	4bcd      	ldr	r3, [pc, #820]	; (8005028 <__ieee754_pow+0x740>)
 8004cf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004cf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004d00:	dd08      	ble.n	8004d14 <__ieee754_pow+0x42c>
 8004d02:	4bca      	ldr	r3, [pc, #808]	; (800502c <__ieee754_pow+0x744>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	f340 8164 	ble.w	8004fd2 <__ieee754_pow+0x6ea>
 8004d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004d10:	3301      	adds	r3, #1
 8004d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d14:	2600      	movs	r6, #0
 8004d16:	00f3      	lsls	r3, r6, #3
 8004d18:	930d      	str	r3, [sp, #52]	; 0x34
 8004d1a:	4bc5      	ldr	r3, [pc, #788]	; (8005030 <__ieee754_pow+0x748>)
 8004d1c:	4658      	mov	r0, fp
 8004d1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d26:	4629      	mov	r1, r5
 8004d28:	461a      	mov	r2, r3
 8004d2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d2e:	4623      	mov	r3, r4
 8004d30:	f7fb fa12 	bl	8000158 <__aeabi_dsub>
 8004d34:	46da      	mov	sl, fp
 8004d36:	462b      	mov	r3, r5
 8004d38:	4652      	mov	r2, sl
 8004d3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004d3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d42:	f7fb fa0b 	bl	800015c <__adddf3>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	49b9      	ldr	r1, [pc, #740]	; (8005034 <__ieee754_pow+0x74c>)
 8004d4e:	f7fb fce5 	bl	800071c <__aeabi_ddiv>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d5e:	f7fb fbb3 	bl	80004c8 <__aeabi_dmul>
 8004d62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004d6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	46ab      	mov	fp, r5
 8004d74:	106d      	asrs	r5, r5, #1
 8004d76:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004d7a:	9304      	str	r3, [sp, #16]
 8004d7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004d80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	461d      	mov	r5, r3
 8004d90:	f7fb fb9a 	bl	80004c8 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d9c:	f7fb f9dc 	bl	8000158 <__aeabi_dsub>
 8004da0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb f9d4 	bl	8000158 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	f7fb f9ce 	bl	8000158 <__aeabi_dsub>
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f7fb fb82 	bl	80004c8 <__aeabi_dmul>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4630      	mov	r0, r6
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb f9c4 	bl	8000158 <__aeabi_dsub>
 8004dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dd4:	f7fb fb78 	bl	80004c8 <__aeabi_dmul>
 8004dd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ddc:	4682      	mov	sl, r0
 8004dde:	468b      	mov	fp, r1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	f7fb fb70 	bl	80004c8 <__aeabi_dmul>
 8004de8:	a37b      	add	r3, pc, #492	; (adr r3, 8004fd8 <__ieee754_pow+0x6f0>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	4604      	mov	r4, r0
 8004df0:	460d      	mov	r5, r1
 8004df2:	f7fb fb69 	bl	80004c8 <__aeabi_dmul>
 8004df6:	a37a      	add	r3, pc, #488	; (adr r3, 8004fe0 <__ieee754_pow+0x6f8>)
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f7fb f9ae 	bl	800015c <__adddf3>
 8004e00:	4622      	mov	r2, r4
 8004e02:	462b      	mov	r3, r5
 8004e04:	f7fb fb60 	bl	80004c8 <__aeabi_dmul>
 8004e08:	a377      	add	r3, pc, #476	; (adr r3, 8004fe8 <__ieee754_pow+0x700>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb f9a5 	bl	800015c <__adddf3>
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	f7fb fb57 	bl	80004c8 <__aeabi_dmul>
 8004e1a:	a375      	add	r3, pc, #468	; (adr r3, 8004ff0 <__ieee754_pow+0x708>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb f99c 	bl	800015c <__adddf3>
 8004e24:	4622      	mov	r2, r4
 8004e26:	462b      	mov	r3, r5
 8004e28:	f7fb fb4e 	bl	80004c8 <__aeabi_dmul>
 8004e2c:	a372      	add	r3, pc, #456	; (adr r3, 8004ff8 <__ieee754_pow+0x710>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f7fb f993 	bl	800015c <__adddf3>
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	f7fb fb45 	bl	80004c8 <__aeabi_dmul>
 8004e3e:	a370      	add	r3, pc, #448	; (adr r3, 8005000 <__ieee754_pow+0x718>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f7fb f98a 	bl	800015c <__adddf3>
 8004e48:	4622      	mov	r2, r4
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460f      	mov	r7, r1
 8004e4e:	462b      	mov	r3, r5
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7fb fb38 	bl	80004c8 <__aeabi_dmul>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fb32 	bl	80004c8 <__aeabi_dmul>
 8004e64:	4604      	mov	r4, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f7fb f974 	bl	800015c <__adddf3>
 8004e74:	4652      	mov	r2, sl
 8004e76:	465b      	mov	r3, fp
 8004e78:	f7fb fb26 	bl	80004c8 <__aeabi_dmul>
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	f7fb f96c 	bl	800015c <__adddf3>
 8004e84:	4642      	mov	r2, r8
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	4649      	mov	r1, r9
 8004e90:	f7fb fb1a 	bl	80004c8 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4b66      	ldr	r3, [pc, #408]	; (8005038 <__ieee754_pow+0x750>)
 8004ea0:	f7fb f95c 	bl	800015c <__adddf3>
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	f7fb f958 	bl	800015c <__adddf3>
 8004eac:	2400      	movs	r4, #0
 8004eae:	460d      	mov	r5, r1
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb fb06 	bl	80004c8 <__aeabi_dmul>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <__ieee754_pow+0x750>)
 8004ec8:	f7fb f946 	bl	8000158 <__aeabi_dsub>
 8004ecc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ed0:	f7fb f942 	bl	8000158 <__aeabi_dsub>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	f7fb f93c 	bl	8000158 <__aeabi_dsub>
 8004ee0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ee4:	f7fb faf0 	bl	80004c8 <__aeabi_dmul>
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4606      	mov	r6, r0
 8004eec:	460f      	mov	r7, r1
 8004eee:	462b      	mov	r3, r5
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f7fb fae8 	bl	80004c8 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4630      	mov	r0, r6
 8004efe:	4639      	mov	r1, r7
 8004f00:	f7fb f92c 	bl	800015c <__adddf3>
 8004f04:	2400      	movs	r4, #0
 8004f06:	4606      	mov	r6, r0
 8004f08:	460f      	mov	r7, r1
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4640      	mov	r0, r8
 8004f10:	4649      	mov	r1, r9
 8004f12:	f7fb f923 	bl	800015c <__adddf3>
 8004f16:	a33c      	add	r3, pc, #240	; (adr r3, 8005008 <__ieee754_pow+0x720>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	460d      	mov	r5, r1
 8004f20:	f7fb fad2 	bl	80004c8 <__aeabi_dmul>
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f912 	bl	8000158 <__aeabi_dsub>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb f90c 	bl	8000158 <__aeabi_dsub>
 8004f40:	a333      	add	r3, pc, #204	; (adr r3, 8005010 <__ieee754_pow+0x728>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb fabf 	bl	80004c8 <__aeabi_dmul>
 8004f4a:	a333      	add	r3, pc, #204	; (adr r3, 8005018 <__ieee754_pow+0x730>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb fab6 	bl	80004c8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb f8fa 	bl	800015c <__adddf3>
 8004f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f6a:	4b34      	ldr	r3, [pc, #208]	; (800503c <__ieee754_pow+0x754>)
 8004f6c:	4413      	add	r3, r2
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f7fb f8f3 	bl	800015c <__adddf3>
 8004f76:	4680      	mov	r8, r0
 8004f78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f7a:	4689      	mov	r9, r1
 8004f7c:	f7fb fa3a 	bl	80003f4 <__aeabi_i2d>
 8004f80:	4604      	mov	r4, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <__ieee754_pow+0x758>)
 8004f8c:	4413      	add	r3, r2
 8004f8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004f92:	4642      	mov	r2, r8
 8004f94:	464b      	mov	r3, r9
 8004f96:	f7fb f8e1 	bl	800015c <__adddf3>
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	f7fb f8dd 	bl	800015c <__adddf3>
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	f7fb f8d9 	bl	800015c <__adddf3>
 8004faa:	2000      	movs	r0, #0
 8004fac:	4622      	mov	r2, r4
 8004fae:	462b      	mov	r3, r5
 8004fb0:	4682      	mov	sl, r0
 8004fb2:	468b      	mov	fp, r1
 8004fb4:	f7fb f8d0 	bl	8000158 <__aeabi_dsub>
 8004fb8:	4632      	mov	r2, r6
 8004fba:	463b      	mov	r3, r7
 8004fbc:	f7fb f8cc 	bl	8000158 <__aeabi_dsub>
 8004fc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fc4:	f7fb f8c8 	bl	8000158 <__aeabi_dsub>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	e60b      	b.n	8004bea <__ieee754_pow+0x302>
 8004fd2:	2601      	movs	r6, #1
 8004fd4:	e69f      	b.n	8004d16 <__ieee754_pow+0x42e>
 8004fd6:	bf00      	nop
 8004fd8:	4a454eef 	.word	0x4a454eef
 8004fdc:	3fca7e28 	.word	0x3fca7e28
 8004fe0:	93c9db65 	.word	0x93c9db65
 8004fe4:	3fcd864a 	.word	0x3fcd864a
 8004fe8:	a91d4101 	.word	0xa91d4101
 8004fec:	3fd17460 	.word	0x3fd17460
 8004ff0:	518f264d 	.word	0x518f264d
 8004ff4:	3fd55555 	.word	0x3fd55555
 8004ff8:	db6fabff 	.word	0xdb6fabff
 8004ffc:	3fdb6db6 	.word	0x3fdb6db6
 8005000:	33333303 	.word	0x33333303
 8005004:	3fe33333 	.word	0x3fe33333
 8005008:	e0000000 	.word	0xe0000000
 800500c:	3feec709 	.word	0x3feec709
 8005010:	dc3a03fd 	.word	0xdc3a03fd
 8005014:	3feec709 	.word	0x3feec709
 8005018:	145b01f5 	.word	0x145b01f5
 800501c:	be3e2fe0 	.word	0xbe3e2fe0
 8005020:	7ff00000 	.word	0x7ff00000
 8005024:	43400000 	.word	0x43400000
 8005028:	0003988e 	.word	0x0003988e
 800502c:	000bb679 	.word	0x000bb679
 8005030:	08005668 	.word	0x08005668
 8005034:	3ff00000 	.word	0x3ff00000
 8005038:	40080000 	.word	0x40080000
 800503c:	08005688 	.word	0x08005688
 8005040:	08005678 	.word	0x08005678
 8005044:	a39c      	add	r3, pc, #624	; (adr r3, 80052b8 <__ieee754_pow+0x9d0>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	4640      	mov	r0, r8
 800504c:	4649      	mov	r1, r9
 800504e:	f7fb f885 	bl	800015c <__adddf3>
 8005052:	4622      	mov	r2, r4
 8005054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005058:	462b      	mov	r3, r5
 800505a:	4650      	mov	r0, sl
 800505c:	4639      	mov	r1, r7
 800505e:	f7fb f87b 	bl	8000158 <__aeabi_dsub>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800506a:	f7fb fcbd 	bl	80009e8 <__aeabi_dcmpgt>
 800506e:	2800      	cmp	r0, #0
 8005070:	f47f ae06 	bne.w	8004c80 <__ieee754_pow+0x398>
 8005074:	4aa2      	ldr	r2, [pc, #648]	; (8005300 <__ieee754_pow+0xa18>)
 8005076:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800507a:	4293      	cmp	r3, r2
 800507c:	f340 8100 	ble.w	8005280 <__ieee754_pow+0x998>
 8005080:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005084:	151b      	asrs	r3, r3, #20
 8005086:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800508a:	fa4a fa03 	asr.w	sl, sl, r3
 800508e:	44b2      	add	sl, r6
 8005090:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005094:	489b      	ldr	r0, [pc, #620]	; (8005304 <__ieee754_pow+0xa1c>)
 8005096:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800509a:	4108      	asrs	r0, r1
 800509c:	ea00 030a 	and.w	r3, r0, sl
 80050a0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80050a4:	f1c1 0114 	rsb	r1, r1, #20
 80050a8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80050ac:	fa4a fa01 	asr.w	sl, sl, r1
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	bfb8      	it	lt
 80050bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80050c0:	f7fb f84a 	bl	8000158 <__aeabi_dsub>
 80050c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050cc:	2400      	movs	r4, #0
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	f7fb f843 	bl	800015c <__adddf3>
 80050d6:	a37a      	add	r3, pc, #488	; (adr r3, 80052c0 <__ieee754_pow+0x9d8>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	4620      	mov	r0, r4
 80050de:	460d      	mov	r5, r1
 80050e0:	f7fb f9f2 	bl	80004c8 <__aeabi_dmul>
 80050e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb f832 	bl	8000158 <__aeabi_dsub>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb f82c 	bl	8000158 <__aeabi_dsub>
 8005100:	a371      	add	r3, pc, #452	; (adr r3, 80052c8 <__ieee754_pow+0x9e0>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb f9df 	bl	80004c8 <__aeabi_dmul>
 800510a:	a371      	add	r3, pc, #452	; (adr r3, 80052d0 <__ieee754_pow+0x9e8>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	4680      	mov	r8, r0
 8005112:	4689      	mov	r9, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f9d6 	bl	80004c8 <__aeabi_dmul>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb f81a 	bl	800015c <__adddf3>
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4630      	mov	r0, r6
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb f812 	bl	800015c <__adddf3>
 8005138:	4632      	mov	r2, r6
 800513a:	463b      	mov	r3, r7
 800513c:	4680      	mov	r8, r0
 800513e:	4689      	mov	r9, r1
 8005140:	f7fb f80a 	bl	8000158 <__aeabi_dsub>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	f7fb f804 	bl	8000158 <__aeabi_dsub>
 8005150:	4642      	mov	r2, r8
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	464b      	mov	r3, r9
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb f9b4 	bl	80004c8 <__aeabi_dmul>
 8005160:	a35d      	add	r3, pc, #372	; (adr r3, 80052d8 <__ieee754_pow+0x9f0>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	f7fb f9ad 	bl	80004c8 <__aeabi_dmul>
 800516e:	a35c      	add	r3, pc, #368	; (adr r3, 80052e0 <__ieee754_pow+0x9f8>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fa fff0 	bl	8000158 <__aeabi_dsub>
 8005178:	4622      	mov	r2, r4
 800517a:	462b      	mov	r3, r5
 800517c:	f7fb f9a4 	bl	80004c8 <__aeabi_dmul>
 8005180:	a359      	add	r3, pc, #356	; (adr r3, 80052e8 <__ieee754_pow+0xa00>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fa ffe9 	bl	800015c <__adddf3>
 800518a:	4622      	mov	r2, r4
 800518c:	462b      	mov	r3, r5
 800518e:	f7fb f99b 	bl	80004c8 <__aeabi_dmul>
 8005192:	a357      	add	r3, pc, #348	; (adr r3, 80052f0 <__ieee754_pow+0xa08>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fa ffde 	bl	8000158 <__aeabi_dsub>
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	f7fb f992 	bl	80004c8 <__aeabi_dmul>
 80051a4:	a354      	add	r3, pc, #336	; (adr r3, 80052f8 <__ieee754_pow+0xa10>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fa ffd7 	bl	800015c <__adddf3>
 80051ae:	4622      	mov	r2, r4
 80051b0:	462b      	mov	r3, r5
 80051b2:	f7fb f989 	bl	80004c8 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fa ffcb 	bl	8000158 <__aeabi_dsub>
 80051c2:	4604      	mov	r4, r0
 80051c4:	460d      	mov	r5, r1
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fb f97b 	bl	80004c8 <__aeabi_dmul>
 80051d2:	2200      	movs	r2, #0
 80051d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fa ffba 	bl	8000158 <__aeabi_dsub>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ec:	f7fb fa96 	bl	800071c <__aeabi_ddiv>
 80051f0:	4632      	mov	r2, r6
 80051f2:	4604      	mov	r4, r0
 80051f4:	460d      	mov	r5, r1
 80051f6:	463b      	mov	r3, r7
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	f7fb f964 	bl	80004c8 <__aeabi_dmul>
 8005200:	4632      	mov	r2, r6
 8005202:	463b      	mov	r3, r7
 8005204:	f7fa ffaa 	bl	800015c <__adddf3>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fa ffa2 	bl	8000158 <__aeabi_dsub>
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	f7fa ff9e 	bl	8000158 <__aeabi_dsub>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	2000      	movs	r0, #0
 8005222:	4939      	ldr	r1, [pc, #228]	; (8005308 <__ieee754_pow+0xa20>)
 8005224:	f7fa ff98 	bl	8000158 <__aeabi_dsub>
 8005228:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800522c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005230:	da29      	bge.n	8005286 <__ieee754_pow+0x99e>
 8005232:	4652      	mov	r2, sl
 8005234:	f000 f874 	bl	8005320 <scalbn>
 8005238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800523c:	f7ff bbfd 	b.w	8004a3a <__ieee754_pow+0x152>
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <__ieee754_pow+0xa24>)
 8005242:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005246:	429f      	cmp	r7, r3
 8005248:	f77f af14 	ble.w	8005074 <__ieee754_pow+0x78c>
 800524c:	4b30      	ldr	r3, [pc, #192]	; (8005310 <__ieee754_pow+0xa28>)
 800524e:	440b      	add	r3, r1
 8005250:	4303      	orrs	r3, r0
 8005252:	d009      	beq.n	8005268 <__ieee754_pow+0x980>
 8005254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	f7fb fba6 	bl	80009ac <__aeabi_dcmplt>
 8005260:	3800      	subs	r0, #0
 8005262:	bf18      	it	ne
 8005264:	2001      	movne	r0, #1
 8005266:	e452      	b.n	8004b0e <__ieee754_pow+0x226>
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	f7fa ff74 	bl	8000158 <__aeabi_dsub>
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	f7fb fbae 	bl	80009d4 <__aeabi_dcmpge>
 8005278:	2800      	cmp	r0, #0
 800527a:	f43f aefb 	beq.w	8005074 <__ieee754_pow+0x78c>
 800527e:	e7e9      	b.n	8005254 <__ieee754_pow+0x96c>
 8005280:	f04f 0a00 	mov.w	sl, #0
 8005284:	e720      	b.n	80050c8 <__ieee754_pow+0x7e0>
 8005286:	4621      	mov	r1, r4
 8005288:	e7d6      	b.n	8005238 <__ieee754_pow+0x950>
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005308 <__ieee754_pow+0xa20>
 8005292:	f7ff bbb9 	b.w	8004a08 <__ieee754_pow+0x120>
 8005296:	f04f 0b00 	mov.w	fp, #0
 800529a:	f04f 0c00 	mov.w	ip, #0
 800529e:	f7ff bbb3 	b.w	8004a08 <__ieee754_pow+0x120>
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7ff bb3c 	b.w	8004922 <__ieee754_pow+0x3a>
 80052aa:	9200      	str	r2, [sp, #0]
 80052ac:	f7ff bb88 	b.w	80049c0 <__ieee754_pow+0xd8>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f7ff bb72 	b.w	800499a <__ieee754_pow+0xb2>
 80052b6:	bf00      	nop
 80052b8:	652b82fe 	.word	0x652b82fe
 80052bc:	3c971547 	.word	0x3c971547
 80052c0:	00000000 	.word	0x00000000
 80052c4:	3fe62e43 	.word	0x3fe62e43
 80052c8:	fefa39ef 	.word	0xfefa39ef
 80052cc:	3fe62e42 	.word	0x3fe62e42
 80052d0:	0ca86c39 	.word	0x0ca86c39
 80052d4:	be205c61 	.word	0xbe205c61
 80052d8:	72bea4d0 	.word	0x72bea4d0
 80052dc:	3e663769 	.word	0x3e663769
 80052e0:	c5d26bf1 	.word	0xc5d26bf1
 80052e4:	3ebbbd41 	.word	0x3ebbbd41
 80052e8:	af25de2c 	.word	0xaf25de2c
 80052ec:	3f11566a 	.word	0x3f11566a
 80052f0:	16bebd93 	.word	0x16bebd93
 80052f4:	3f66c16c 	.word	0x3f66c16c
 80052f8:	5555553e 	.word	0x5555553e
 80052fc:	3fc55555 	.word	0x3fc55555
 8005300:	3fe00000 	.word	0x3fe00000
 8005304:	fff00000 	.word	0xfff00000
 8005308:	3ff00000 	.word	0x3ff00000
 800530c:	4090cbff 	.word	0x4090cbff
 8005310:	3f6f3400 	.word	0x3f6f3400

08005314 <fabs>:
 8005314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005318:	4619      	mov	r1, r3
 800531a:	4770      	bx	lr
 800531c:	0000      	movs	r0, r0
	...

08005320 <scalbn>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	4616      	mov	r6, r2
 8005324:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005328:	4604      	mov	r4, r0
 800532a:	460d      	mov	r5, r1
 800532c:	460b      	mov	r3, r1
 800532e:	b992      	cbnz	r2, 8005356 <scalbn+0x36>
 8005330:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005334:	4303      	orrs	r3, r0
 8005336:	d03c      	beq.n	80053b2 <scalbn+0x92>
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <scalbn+0xe0>)
 800533a:	2200      	movs	r2, #0
 800533c:	f7fb f8c4 	bl	80004c8 <__aeabi_dmul>
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <scalbn+0xe4>)
 8005342:	4604      	mov	r4, r0
 8005344:	429e      	cmp	r6, r3
 8005346:	460d      	mov	r5, r1
 8005348:	da0f      	bge.n	800536a <scalbn+0x4a>
 800534a:	a329      	add	r3, pc, #164	; (adr r3, 80053f0 <scalbn+0xd0>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fb f8ba 	bl	80004c8 <__aeabi_dmul>
 8005354:	e006      	b.n	8005364 <scalbn+0x44>
 8005356:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800535a:	42ba      	cmp	r2, r7
 800535c:	d109      	bne.n	8005372 <scalbn+0x52>
 800535e:	4602      	mov	r2, r0
 8005360:	f7fa fefc 	bl	800015c <__adddf3>
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
 8005368:	e023      	b.n	80053b2 <scalbn+0x92>
 800536a:	460b      	mov	r3, r1
 800536c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005370:	3a36      	subs	r2, #54	; 0x36
 8005372:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005376:	428e      	cmp	r6, r1
 8005378:	dd0e      	ble.n	8005398 <scalbn+0x78>
 800537a:	a31f      	add	r3, pc, #124	; (adr r3, 80053f8 <scalbn+0xd8>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005384:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005388:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800538c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005390:	481d      	ldr	r0, [pc, #116]	; (8005408 <scalbn+0xe8>)
 8005392:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005396:	e7db      	b.n	8005350 <scalbn+0x30>
 8005398:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800539c:	4432      	add	r2, r6
 800539e:	428a      	cmp	r2, r1
 80053a0:	dceb      	bgt.n	800537a <scalbn+0x5a>
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	dd08      	ble.n	80053b8 <scalbn+0x98>
 80053a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80053bc:	da0c      	bge.n	80053d8 <scalbn+0xb8>
 80053be:	a30c      	add	r3, pc, #48	; (adr r3, 80053f0 <scalbn+0xd0>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053c8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80053cc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80053d0:	480e      	ldr	r0, [pc, #56]	; (800540c <scalbn+0xec>)
 80053d2:	f041 011f 	orr.w	r1, r1, #31
 80053d6:	e7bb      	b.n	8005350 <scalbn+0x30>
 80053d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053dc:	3236      	adds	r2, #54	; 0x36
 80053de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	2200      	movs	r2, #0
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <scalbn+0xf0>)
 80053ee:	e7af      	b.n	8005350 <scalbn+0x30>
 80053f0:	c2f8f359 	.word	0xc2f8f359
 80053f4:	01a56e1f 	.word	0x01a56e1f
 80053f8:	8800759c 	.word	0x8800759c
 80053fc:	7e37e43c 	.word	0x7e37e43c
 8005400:	43500000 	.word	0x43500000
 8005404:	ffff3cb0 	.word	0xffff3cb0
 8005408:	8800759c 	.word	0x8800759c
 800540c:	c2f8f359 	.word	0xc2f8f359
 8005410:	3c900000 	.word	0x3c900000

08005414 <with_errno>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	4604      	mov	r4, r0
 8005418:	460d      	mov	r5, r1
 800541a:	4616      	mov	r6, r2
 800541c:	f7ff f9ca 	bl	80047b4 <__errno>
 8005420:	4629      	mov	r1, r5
 8005422:	6006      	str	r6, [r0, #0]
 8005424:	4620      	mov	r0, r4
 8005426:	bd70      	pop	{r4, r5, r6, pc}

08005428 <xflow>:
 8005428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800542a:	4615      	mov	r5, r2
 800542c:	461c      	mov	r4, r3
 800542e:	b180      	cbz	r0, 8005452 <xflow+0x2a>
 8005430:	4610      	mov	r0, r2
 8005432:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005436:	e9cd 0100 	strd	r0, r1, [sp]
 800543a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800543e:	4628      	mov	r0, r5
 8005440:	4621      	mov	r1, r4
 8005442:	f7fb f841 	bl	80004c8 <__aeabi_dmul>
 8005446:	2222      	movs	r2, #34	; 0x22
 8005448:	b003      	add	sp, #12
 800544a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800544e:	f7ff bfe1 	b.w	8005414 <with_errno>
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	e7ee      	b.n	8005436 <xflow+0xe>

08005458 <__math_uflow>:
 8005458:	2200      	movs	r2, #0
 800545a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800545e:	f7ff bfe3 	b.w	8005428 <xflow>

08005462 <__math_oflow>:
 8005462:	2200      	movs	r2, #0
 8005464:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005468:	f7ff bfde 	b.w	8005428 <xflow>

0800546c <__ieee754_sqrt>:
 800546c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005610 <__ieee754_sqrt+0x1a4>
 8005470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ea3c 0c01 	bics.w	ip, ip, r1
 8005478:	460b      	mov	r3, r1
 800547a:	4606      	mov	r6, r0
 800547c:	460d      	mov	r5, r1
 800547e:	460a      	mov	r2, r1
 8005480:	4604      	mov	r4, r0
 8005482:	d10e      	bne.n	80054a2 <__ieee754_sqrt+0x36>
 8005484:	4602      	mov	r2, r0
 8005486:	f7fb f81f 	bl	80004c8 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4630      	mov	r0, r6
 8005490:	4629      	mov	r1, r5
 8005492:	f7fa fe63 	bl	800015c <__adddf3>
 8005496:	4606      	mov	r6, r0
 8005498:	460d      	mov	r5, r1
 800549a:	4630      	mov	r0, r6
 800549c:	4629      	mov	r1, r5
 800549e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a2:	2900      	cmp	r1, #0
 80054a4:	dc0d      	bgt.n	80054c2 <__ieee754_sqrt+0x56>
 80054a6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80054aa:	ea5c 0c00 	orrs.w	ip, ip, r0
 80054ae:	d0f4      	beq.n	800549a <__ieee754_sqrt+0x2e>
 80054b0:	b139      	cbz	r1, 80054c2 <__ieee754_sqrt+0x56>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f7fa fe50 	bl	8000158 <__aeabi_dsub>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	f7fb f92e 	bl	800071c <__aeabi_ddiv>
 80054c0:	e7e9      	b.n	8005496 <__ieee754_sqrt+0x2a>
 80054c2:	1512      	asrs	r2, r2, #20
 80054c4:	f000 8089 	beq.w	80055da <__ieee754_sqrt+0x16e>
 80054c8:	2500      	movs	r5, #0
 80054ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ce:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80054d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054d6:	07d2      	lsls	r2, r2, #31
 80054d8:	bf5c      	itt	pl
 80054da:	005b      	lslpl	r3, r3, #1
 80054dc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80054e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054e4:	bf58      	it	pl
 80054e6:	0064      	lslpl	r4, r4, #1
 80054e8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80054ec:	0062      	lsls	r2, r4, #1
 80054ee:	2016      	movs	r0, #22
 80054f0:	4629      	mov	r1, r5
 80054f2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80054f6:	1076      	asrs	r6, r6, #1
 80054f8:	190f      	adds	r7, r1, r4
 80054fa:	429f      	cmp	r7, r3
 80054fc:	bfde      	ittt	le
 80054fe:	1bdb      	suble	r3, r3, r7
 8005500:	1939      	addle	r1, r7, r4
 8005502:	192d      	addle	r5, r5, r4
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	3801      	subs	r0, #1
 8005508:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800550c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005510:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005514:	d1f0      	bne.n	80054f8 <__ieee754_sqrt+0x8c>
 8005516:	4604      	mov	r4, r0
 8005518:	2720      	movs	r7, #32
 800551a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800551e:	428b      	cmp	r3, r1
 8005520:	eb0c 0e00 	add.w	lr, ip, r0
 8005524:	dc02      	bgt.n	800552c <__ieee754_sqrt+0xc0>
 8005526:	d113      	bne.n	8005550 <__ieee754_sqrt+0xe4>
 8005528:	4596      	cmp	lr, r2
 800552a:	d811      	bhi.n	8005550 <__ieee754_sqrt+0xe4>
 800552c:	f1be 0f00 	cmp.w	lr, #0
 8005530:	eb0e 000c 	add.w	r0, lr, ip
 8005534:	da56      	bge.n	80055e4 <__ieee754_sqrt+0x178>
 8005536:	2800      	cmp	r0, #0
 8005538:	db54      	blt.n	80055e4 <__ieee754_sqrt+0x178>
 800553a:	f101 0801 	add.w	r8, r1, #1
 800553e:	1a5b      	subs	r3, r3, r1
 8005540:	4641      	mov	r1, r8
 8005542:	4596      	cmp	lr, r2
 8005544:	bf88      	it	hi
 8005546:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800554a:	eba2 020e 	sub.w	r2, r2, lr
 800554e:	4464      	add	r4, ip
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	3f01      	subs	r7, #1
 8005554:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005558:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800555c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005560:	d1dd      	bne.n	800551e <__ieee754_sqrt+0xb2>
 8005562:	4313      	orrs	r3, r2
 8005564:	d01b      	beq.n	800559e <__ieee754_sqrt+0x132>
 8005566:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005614 <__ieee754_sqrt+0x1a8>
 800556a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005618 <__ieee754_sqrt+0x1ac>
 800556e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005572:	e9db 2300 	ldrd	r2, r3, [fp]
 8005576:	f7fa fdef 	bl	8000158 <__aeabi_dsub>
 800557a:	e9da 8900 	ldrd	r8, r9, [sl]
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fb fa1b 	bl	80009c0 <__aeabi_dcmple>
 800558a:	b140      	cbz	r0, 800559e <__ieee754_sqrt+0x132>
 800558c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005590:	e9db 2300 	ldrd	r2, r3, [fp]
 8005594:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005598:	d126      	bne.n	80055e8 <__ieee754_sqrt+0x17c>
 800559a:	463c      	mov	r4, r7
 800559c:	3501      	adds	r5, #1
 800559e:	106b      	asrs	r3, r5, #1
 80055a0:	0864      	lsrs	r4, r4, #1
 80055a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80055a6:	07ea      	lsls	r2, r5, #31
 80055a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80055ac:	bf48      	it	mi
 80055ae:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80055b2:	4620      	mov	r0, r4
 80055b4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80055b8:	e76d      	b.n	8005496 <__ieee754_sqrt+0x2a>
 80055ba:	0ae3      	lsrs	r3, r4, #11
 80055bc:	3915      	subs	r1, #21
 80055be:	0564      	lsls	r4, r4, #21
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0fa      	beq.n	80055ba <__ieee754_sqrt+0x14e>
 80055c4:	02d8      	lsls	r0, r3, #11
 80055c6:	d50a      	bpl.n	80055de <__ieee754_sqrt+0x172>
 80055c8:	f1c2 0020 	rsb	r0, r2, #32
 80055cc:	fa24 f000 	lsr.w	r0, r4, r0
 80055d0:	1e55      	subs	r5, r2, #1
 80055d2:	4094      	lsls	r4, r2
 80055d4:	4303      	orrs	r3, r0
 80055d6:	1b4a      	subs	r2, r1, r5
 80055d8:	e776      	b.n	80054c8 <__ieee754_sqrt+0x5c>
 80055da:	4611      	mov	r1, r2
 80055dc:	e7f0      	b.n	80055c0 <__ieee754_sqrt+0x154>
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	3201      	adds	r2, #1
 80055e2:	e7ef      	b.n	80055c4 <__ieee754_sqrt+0x158>
 80055e4:	4688      	mov	r8, r1
 80055e6:	e7aa      	b.n	800553e <__ieee754_sqrt+0xd2>
 80055e8:	f7fa fdb8 	bl	800015c <__adddf3>
 80055ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fb f9d8 	bl	80009ac <__aeabi_dcmplt>
 80055fc:	b120      	cbz	r0, 8005608 <__ieee754_sqrt+0x19c>
 80055fe:	1ca1      	adds	r1, r4, #2
 8005600:	bf08      	it	eq
 8005602:	3501      	addeq	r5, #1
 8005604:	3402      	adds	r4, #2
 8005606:	e7ca      	b.n	800559e <__ieee754_sqrt+0x132>
 8005608:	3401      	adds	r4, #1
 800560a:	f024 0401 	bic.w	r4, r4, #1
 800560e:	e7c6      	b.n	800559e <__ieee754_sqrt+0x132>
 8005610:	7ff00000 	.word	0x7ff00000
 8005614:	20000060 	.word	0x20000060
 8005618:	20000068 	.word	0x20000068

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
