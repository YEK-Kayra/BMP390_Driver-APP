
BMP390_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aac  08003aac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003aac  08003aac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aac  08003aac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003ac0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003ac0  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000071b4  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013b7  00000000  00000000  0002722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  000285e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000543  00000000  00000000  00028cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001669f  00000000  00000000  0002920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000921f  00000000  00000000  0003f8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008040a  00000000  00000000  00048ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cc8  00000000  00000000  000c8ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cab9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a68 	.word	0x08003a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a68 	.word	0x08003a68

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2f>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a58:	bf24      	itt	cs
 8000a5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a62:	d90d      	bls.n	8000a80 <__aeabi_d2f+0x30>
 8000a64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a78:	bf08      	it	eq
 8000a7a:	f020 0001 	biceq.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a84:	d121      	bne.n	8000aca <__aeabi_d2f+0x7a>
 8000a86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8a:	bfbc      	itt	lt
 8000a8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	4770      	bxlt	lr
 8000a92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9a:	f1c2 0218 	rsb	r2, r2, #24
 8000a9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aaa:	bf18      	it	ne
 8000aac:	f040 0001 	orrne.w	r0, r0, #1
 8000ab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000abc:	ea40 000c 	orr.w	r0, r0, ip
 8000ac0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac8:	e7cc      	b.n	8000a64 <__aeabi_d2f+0x14>
 8000aca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ace:	d107      	bne.n	8000ae0 <__aeabi_d2f+0x90>
 8000ad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad4:	bf1e      	ittt	ne
 8000ad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bxne	lr
 8000ae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_frsub>:
 8000af0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	e002      	b.n	8000afc <__addsf3>
 8000af6:	bf00      	nop

08000af8 <__aeabi_fsub>:
 8000af8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000afc <__addsf3>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	bf1f      	itttt	ne
 8000b00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b04:	ea92 0f03 	teqne	r2, r3
 8000b08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b10:	d06a      	beq.n	8000be8 <__addsf3+0xec>
 8000b12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1a:	bfc1      	itttt	gt
 8000b1c:	18d2      	addgt	r2, r2, r3
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	4048      	eorgt	r0, r1
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	2b19      	cmp	r3, #25
 8000b2a:	bf88      	it	hi
 8000b2c:	4770      	bxhi	lr
 8000b2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4249      	negne	r1, r1
 8000b4e:	ea92 0f03 	teq	r2, r3
 8000b52:	d03f      	beq.n	8000bd4 <__addsf3+0xd8>
 8000b54:	f1a2 0201 	sub.w	r2, r2, #1
 8000b58:	fa41 fc03 	asr.w	ip, r1, r3
 8000b5c:	eb10 000c 	adds.w	r0, r0, ip
 8000b60:	f1c3 0320 	rsb	r3, r3, #32
 8000b64:	fa01 f103 	lsl.w	r1, r1, r3
 8000b68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6c:	d502      	bpl.n	8000b74 <__addsf3+0x78>
 8000b6e:	4249      	negs	r1, r1
 8000b70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b78:	d313      	bcc.n	8000ba2 <__addsf3+0xa6>
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7e:	d306      	bcc.n	8000b8e <__addsf3+0x92>
 8000b80:	0840      	lsrs	r0, r0, #1
 8000b82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b86:	f102 0201 	add.w	r2, r2, #1
 8000b8a:	2afe      	cmp	r2, #254	; 0xfe
 8000b8c:	d251      	bcs.n	8000c32 <__addsf3+0x136>
 8000b8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ba0:	4770      	bx	lr
 8000ba2:	0049      	lsls	r1, r1, #1
 8000ba4:	eb40 0000 	adc.w	r0, r0, r0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	bf28      	it	cs
 8000bac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb0:	d2ed      	bcs.n	8000b8e <__addsf3+0x92>
 8000bb2:	fab0 fc80 	clz	ip, r0
 8000bb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bba:	ebb2 020c 	subs.w	r2, r2, ip
 8000bbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc2:	bfaa      	itet	ge
 8000bc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc8:	4252      	neglt	r2, r2
 8000bca:	4318      	orrge	r0, r3
 8000bcc:	bfbc      	itt	lt
 8000bce:	40d0      	lsrlt	r0, r2
 8000bd0:	4318      	orrlt	r0, r3
 8000bd2:	4770      	bx	lr
 8000bd4:	f092 0f00 	teq	r2, #0
 8000bd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bdc:	bf06      	itte	eq
 8000bde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be2:	3201      	addeq	r2, #1
 8000be4:	3b01      	subne	r3, #1
 8000be6:	e7b5      	b.n	8000b54 <__addsf3+0x58>
 8000be8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf0:	bf18      	it	ne
 8000bf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf6:	d021      	beq.n	8000c3c <__addsf3+0x140>
 8000bf8:	ea92 0f03 	teq	r2, r3
 8000bfc:	d004      	beq.n	8000c08 <__addsf3+0x10c>
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	bf08      	it	eq
 8000c04:	4608      	moveq	r0, r1
 8000c06:	4770      	bx	lr
 8000c08:	ea90 0f01 	teq	r0, r1
 8000c0c:	bf1c      	itt	ne
 8000c0e:	2000      	movne	r0, #0
 8000c10:	4770      	bxne	lr
 8000c12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c16:	d104      	bne.n	8000c22 <__addsf3+0x126>
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	4770      	bx	lr
 8000c22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c26:	bf3c      	itt	cc
 8000c28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bxcc	lr
 8000c2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	4770      	bx	lr
 8000c3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c40:	bf16      	itet	ne
 8000c42:	4608      	movne	r0, r1
 8000c44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c48:	4601      	movne	r1, r0
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	bf06      	itte	eq
 8000c4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c52:	ea90 0f01 	teqeq	r0, r1
 8000c56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_ui2f>:
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e004      	b.n	8000c6c <__aeabi_i2f+0x8>
 8000c62:	bf00      	nop

08000c64 <__aeabi_i2f>:
 8000c64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	ea5f 0c00 	movs.w	ip, r0
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c78:	4601      	mov	r1, r0
 8000c7a:	f04f 0000 	mov.w	r0, #0
 8000c7e:	e01c      	b.n	8000cba <__aeabi_l2f+0x2a>

08000c80 <__aeabi_ul2f>:
 8000c80:	ea50 0201 	orrs.w	r2, r0, r1
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <__aeabi_l2f+0x14>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_l2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__aeabi_l2f+0x14>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	ea5f 0c01 	movs.w	ip, r1
 8000ca8:	bf02      	ittt	eq
 8000caa:	4684      	moveq	ip, r0
 8000cac:	4601      	moveq	r1, r0
 8000cae:	2000      	moveq	r0, #0
 8000cb0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb4:	bf08      	it	eq
 8000cb6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cbe:	fabc f28c 	clz	r2, ip
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc8:	db10      	blt.n	8000cec <__aeabi_l2f+0x5c>
 8000cca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f102 0220 	add.w	r2, r2, #32
 8000cf0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0a:	4770      	bx	lr

08000d0c <BMP390_Init>:
 * NOTE ==> if our sensor does soft reset. All params of the sensor are cleared. We have to init our sensor properly again.
 */

#include "bmp390.h"

_Bool BMP390_Init(BMP390_HandleTypeDef *BMP390){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, 10, 1000) != HAL_OK){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69d8      	ldr	r0, [r3, #28]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	8b19      	ldrh	r1, [r3, #24]
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	220a      	movs	r2, #10
 8000d22:	f001 fd97 	bl	8002854 <HAL_I2C_IsDeviceReady>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <BMP390_Init+0x2c>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d32:	483e      	ldr	r0, [pc, #248]	; (8000e2c <BMP390_Init+0x120>)
 8000d34:	f001 f8d0 	bl	8001ed8 <HAL_GPIO_WritePin>

	 }

	 BMP390_Get_RawCalibCoeff(BMP390);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f879 	bl	8000e30 <BMP390_Get_RawCalibCoeff>

	 BMP390_Calc_PrcsdCalibrationCoeff(BMP390);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f97a 	bl	8001038 <BMP390_Calc_PrcsdCalibrationCoeff>

	 BMP390_Set_DefaultParams(BMP390);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 fabf 	bl	80012c8 <BMP390_Set_DefaultParams>

	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	799b      	ldrb	r3, [r3, #6]
 8000d56:	005b      	lsls	r3, r3, #1
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b25a      	sxtb	r2, r3
			 	 	 	((BMP390->Params.stat_meas_press)<<0);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b25b      	sxtb	r3, r3
			 	 	 	((BMP390->Params.stat_meas_temp)<<1)|
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	b2da      	uxtb	r2, r3
	 BMP390->PWR_CTRL = ((BMP390->Params.mode)<<4) |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73


	 BMP390->CONFIG = ((BMP390->Params.filtercoef)<<1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	789b      	ldrb	r3, [r3, #2]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	 BMP390->ODR 	= (BMP390->Params.odr);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	785a      	ldrb	r2, [r3, #1]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	b25a      	sxtb	r2, r3
			 	   ((BMP390->Params.temp_osrs)<<3);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	00db      	lsls	r3, r3, #3
	 BMP390->OSR = ((BMP390->Params.press_osrs)<<0) |
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_PWR_CTRL , 1, &BMP390->PWR_CTRL, 1, 1000);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69d8      	ldr	r0, [r3, #28]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	8b19      	ldrh	r1, [r3, #24]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3373      	adds	r3, #115	; 0x73
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	9202      	str	r2, [sp, #8]
 8000db4:	2201      	movs	r2, #1
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	221b      	movs	r2, #27
 8000dbe:	f001 f9e7 	bl	8002190 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_CONFIG , 1, &BMP390->CONFIG, 1, 1000);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69d8      	ldr	r0, [r3, #28]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	8b19      	ldrh	r1, [r3, #24]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3370      	adds	r3, #112	; 0x70
 8000dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd2:	9202      	str	r2, [sp, #8]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	9201      	str	r2, [sp, #4]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	221f      	movs	r2, #31
 8000dde:	f001 f9d7 	bl	8002190 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_ODR , 1, &BMP390->ODR, 1, 1000);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69d8      	ldr	r0, [r3, #28]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8b19      	ldrh	r1, [r3, #24]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3371      	adds	r3, #113	; 0x71
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	9202      	str	r2, [sp, #8]
 8000df4:	2201      	movs	r2, #1
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	221d      	movs	r2, #29
 8000dfe:	f001 f9c7 	bl	8002190 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_REG_OSR , 1, &BMP390->OSR, 1, 1000);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69d8      	ldr	r0, [r3, #28]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	8b19      	ldrh	r1, [r3, #24]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3372      	adds	r3, #114	; 0x72
 8000e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e12:	9202      	str	r2, [sp, #8]
 8000e14:	2201      	movs	r2, #1
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	f001 f9b7 	bl	8002190 <HAL_I2C_Mem_Write>

return true;
 8000e22:	2301      	movs	r3, #1

}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40011000 	.word	0x40011000

08000e30 <BMP390_Get_RawCalibCoeff>:

_Bool BMP390_Get_RawCalibCoeff(BMP390_HandleTypeDef *BMP390){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	6078      	str	r0, [r7, #4]

	uint8_t BMP390_CalibCoeff[21];
	uint8_t cnt = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_CalibCoeff, 1, &BMP390_CalibCoeff[0], 21, 1000);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69d8      	ldr	r0, [r3, #28]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	8b19      	ldrh	r1, [r3, #24]
 8000e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2315      	movs	r3, #21
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2231      	movs	r2, #49	; 0x31
 8000e58:	f001 fa94 	bl	8002384 <HAL_I2C_Mem_Read>

	BMP390->Raw_NVM.T1  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000e5c:	7ffb      	ldrb	r3, [r7, #31]
 8000e5e:	3320      	adds	r3, #32
 8000e60:	443b      	add	r3, r7
 8000e62:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	7ffb      	ldrb	r3, [r7, #31]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	3320      	adds	r3, #32
 8000e6e:	443b      	add	r3, r7
 8000e70:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	841a      	strh	r2, [r3, #32]
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	3302      	adds	r3, #2
 8000e86:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T2  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000e88:	7ffb      	ldrb	r3, [r7, #31]
 8000e8a:	3320      	adds	r3, #32
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	3301      	adds	r3, #1
 8000e98:	3320      	adds	r3, #32
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	845a      	strh	r2, [r3, #34]	; 0x22
 8000eae:	7ffb      	ldrb	r3, [r7, #31]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.T3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000eb4:	7ffb      	ldrb	r3, [r7, #31]
 8000eb6:	3320      	adds	r3, #32
 8000eb8:	443b      	add	r3, r7
 8000eba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ec6:	7ffb      	ldrb	r3, [r7, #31]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P1  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	3320      	adds	r3, #32
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	7ffb      	ldrb	r3, [r7, #31]
 8000eda:	3301      	adds	r3, #1
 8000edc:	3320      	adds	r3, #32
 8000ede:	443b      	add	r3, r7
 8000ee0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	84da      	strh	r2, [r3, #38]	; 0x26
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P2  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	3320      	adds	r3, #32
 8000efa:	443b      	add	r3, r7
 8000efc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	3301      	adds	r3, #1
 8000f06:	3320      	adds	r3, #32
 8000f08:	443b      	add	r3, r7
 8000f0a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P3  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	3320      	adds	r3, #32
 8000f24:	443b      	add	r3, r7
 8000f26:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	3301      	adds	r3, #1
 8000f36:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P4  = (int8_t)((BMP390_CalibCoeff[cnt])); 								     cnt+=1;
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	3320      	adds	r3, #32
 8000f3c:	443b      	add	r3, r7
 8000f3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P5  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	3320      	adds	r3, #32
 8000f54:	443b      	add	r3, r7
 8000f56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	3320      	adds	r3, #32
 8000f62:	443b      	add	r3, r7
 8000f64:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P6  = (uint16_t)((BMP390_CalibCoeff[cnt]) | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	3320      	adds	r3, #32
 8000f80:	443b      	add	r3, r7
 8000f82:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7ffb      	ldrb	r3, [r7, #31]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	443b      	add	r3, r7
 8000f90:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P7  = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
 8000faa:	3320      	adds	r3, #32
 8000fac:	443b      	add	r3, r7
 8000fae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P8  = (int8_t)((BMP390_CalibCoeff[cnt]));  									 cnt+=1;
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	443b      	add	r3, r7
 8000fc6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P9  = (int16_t)((BMP390_CalibCoeff[cnt])  | (BMP390_CalibCoeff[cnt+1]<<8));  cnt+=2;
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3320      	adds	r3, #32
 8000fdc:	443b      	add	r3, r7
 8000fde:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	7ffb      	ldrb	r3, [r7, #31]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	3320      	adds	r3, #32
 8000fea:	443b      	add	r3, r7
 8000fec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	865a      	strh	r2, [r3, #50]	; 0x32
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	3302      	adds	r3, #2
 8001000:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P10 = (int8_t)((BMP390_CalibCoeff[cnt])); 									 cnt+=1;
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	3320      	adds	r3, #32
 8001006:	443b      	add	r3, r7
 8001008:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	3301      	adds	r3, #1
 8001018:	77fb      	strb	r3, [r7, #31]
	BMP390->Raw_NVM.P11 = (int8_t)((BMP390_CalibCoeff[cnt]));
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	3320      	adds	r3, #32
 800101e:	443b      	add	r3, r7
 8001020:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001024:	b25a      	sxtb	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

return true;
 800102c:	2301      	movs	r3, #1

}
 800102e:	4618      	mov	r0, r3
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BMP390_Calc_PrcsdCalibrationCoeff>:

_Bool BMP390_Calc_PrcsdCalibrationCoeff(BMP390_HandleTypeDef *BMP390){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

	BMP390->Prcsd_NVM.T1 = (BMP390->Raw_NVM.T1 / pow(2,-8));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	8c1b      	ldrh	r3, [r3, #32]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa87 	bl	8000558 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b93      	ldr	r3, [pc, #588]	; (800129c <BMP390_Calc_PrcsdCalibrationCoeff+0x264>)
 8001050:	f7ff fc16 	bl	8000880 <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fcf8 	bl	8000a50 <__aeabi_d2f>
 8001060:	4602      	mov	r2, r0
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
	BMP390->Prcsd_NVM.T2 = (BMP390->Raw_NVM.T2 / pow(2,30));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_i2d>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b8a      	ldr	r3, [pc, #552]	; (80012a0 <BMP390_Calc_PrcsdCalibrationCoeff+0x268>)
 8001076:	f7ff fc03 	bl	8000880 <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fce5 	bl	8000a50 <__aeabi_d2f>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
	BMP390->Prcsd_NVM.T3 = (BMP390->Raw_NVM.T3 / pow(2,48));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa60 	bl	8000558 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 800109e:	f7ff fbef 	bl	8000880 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fcd1 	bl	8000a50 <__aeabi_d2f>
 80010ae:	4602      	mov	r2, r0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
	BMP390->Prcsd_NVM.P1 = ((BMP390->Raw_NVM.P1 - pow(2,14)) / pow(2,20));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_i2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 80010c6:	f7ff f8f9 	bl	80002bc <__aeabi_dsub>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <BMP390_Calc_PrcsdCalibrationCoeff+0x274>)
 80010d8:	f7ff fbd2 	bl	8000880 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fcb4 	bl	8000a50 <__aeabi_d2f>
 80010e8:	4602      	mov	r2, r0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
	BMP390->Prcsd_NVM.P2 = ((BMP390->Raw_NVM.P2 - pow(2,14)) / pow(2,29));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_i2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <BMP390_Calc_PrcsdCalibrationCoeff+0x270>)
 8001100:	f7ff f8dc 	bl	80002bc <__aeabi_dsub>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <BMP390_Calc_PrcsdCalibrationCoeff+0x278>)
 8001112:	f7ff fbb5 	bl	8000880 <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc97 	bl	8000a50 <__aeabi_d2f>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	649a      	str	r2, [r3, #72]	; 0x48
	BMP390->Prcsd_NVM.P3 = (BMP390->Raw_NVM.P3 / pow(2,32));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa12 	bl	8000558 <__aeabi_i2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <BMP390_Calc_PrcsdCalibrationCoeff+0x27c>)
 800113a:	f7ff fba1 	bl	8000880 <__aeabi_ddiv>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc83 	bl	8000a50 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	64da      	str	r2, [r3, #76]	; 0x4c
	BMP390->Prcsd_NVM.P4 = (BMP390->Raw_NVM.P4 / pow(2,37));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f993 302b 	ldrsb.w	r3, [r3, #43]	; 0x2b
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9fe 	bl	8000558 <__aeabi_i2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <BMP390_Calc_PrcsdCalibrationCoeff+0x280>)
 8001162:	f7ff fb8d 	bl	8000880 <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fc6f 	bl	8000a50 <__aeabi_d2f>
 8001172:	4602      	mov	r2, r0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	651a      	str	r2, [r3, #80]	; 0x50
	BMP390->Prcsd_NVM.P5 = (BMP390->Raw_NVM.P5 / pow(2,-3));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9eb 	bl	8000558 <__aeabi_i2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800118a:	f7ff fb79 	bl	8000880 <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fc5b 	bl	8000a50 <__aeabi_d2f>
 800119a:	4602      	mov	r2, r0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	655a      	str	r2, [r3, #84]	; 0x54
	BMP390->Prcsd_NVM.P6 = (BMP390->Raw_NVM.P6 / pow(2,6));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9d7 	bl	8000558 <__aeabi_i2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <BMP390_Calc_PrcsdCalibrationCoeff+0x284>)
 80011b0:	f7ff fb66 	bl	8000880 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc48 	bl	8000a50 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58
	BMP390->Prcsd_NVM.P7 = (BMP390->Raw_NVM.P7 / pow(2,8));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9c3 	bl	8000558 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <BMP390_Calc_PrcsdCalibrationCoeff+0x288>)
 80011d8:	f7ff fb52 	bl	8000880 <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc34 	bl	8000a50 <__aeabi_d2f>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	65da      	str	r2, [r3, #92]	; 0x5c
	BMP390->Prcsd_NVM.P8 = (BMP390->Raw_NVM.P8 / pow(2,15));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9af 	bl	8000558 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <BMP390_Calc_PrcsdCalibrationCoeff+0x28c>)
 8001200:	f7ff fb3e 	bl	8000880 <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fc20 	bl	8000a50 <__aeabi_d2f>
 8001210:	4602      	mov	r2, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	661a      	str	r2, [r3, #96]	; 0x60
	BMP390->Prcsd_NVM.P9 = (BMP390->Raw_NVM.P9 / pow(2,48));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f99b 	bl	8000558 <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001228:	f7ff fb2a 	bl	8000880 <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc0c 	bl	8000a50 <__aeabi_d2f>
 8001238:	4602      	mov	r2, r0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	665a      	str	r2, [r3, #100]	; 0x64
	BMP390->Prcsd_NVM.P10 = (BMP390->Raw_NVM.P10 / pow(2,48));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f987 	bl	8000558 <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <BMP390_Calc_PrcsdCalibrationCoeff+0x26c>)
 8001250:	f7ff fb16 	bl	8000880 <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbf8 	bl	8000a50 <__aeabi_d2f>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	669a      	str	r2, [r3, #104]	; 0x68
	BMP390->Prcsd_NVM.P11 = (BMP390->Raw_NVM.P11 / pow(2,65));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f973 	bl	8000558 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800127a:	f7ff fb01 	bl	8000880 <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fbe3 	bl	8000a50 <__aeabi_d2f>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	66da      	str	r2, [r3, #108]	; 0x6c

return true;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	3f700000 	.word	0x3f700000
 80012a0:	41d00000 	.word	0x41d00000
 80012a4:	42f00000 	.word	0x42f00000
 80012a8:	40d00000 	.word	0x40d00000
 80012ac:	41300000 	.word	0x41300000
 80012b0:	41c00000 	.word	0x41c00000
 80012b4:	41f00000 	.word	0x41f00000
 80012b8:	42400000 	.word	0x42400000
 80012bc:	40500000 	.word	0x40500000
 80012c0:	40700000 	.word	0x40700000
 80012c4:	40e00000 	.word	0x40e00000

080012c8 <BMP390_Set_DefaultParams>:

_Bool BMP390_Set_DefaultParams(BMP390_HandleTypeDef *BMP390){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	BMP390->Params.mode = BMP390_Mode_Normal;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	701a      	strb	r2, [r3, #0]
	BMP390->Params.stat_meas_press = Enable;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	715a      	strb	r2, [r3, #5]
	BMP390->Params.stat_meas_temp = Enable;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	719a      	strb	r2, [r3, #6]
	BMP390->Params.press_osrs = BMP390_Oversampling_X8 ;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	70da      	strb	r2, [r3, #3]
	BMP390->Params.temp_osrs= BMP390_Oversampling_X2 ;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	711a      	strb	r2, [r3, #4]
	BMP390->Params.filtercoef = BMP390_Filter_Coef_3;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	709a      	strb	r2, [r3, #2]
	BMP390->Params.odr = BMP390_ODR_50;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	705a      	strb	r2, [r3, #1]

return true;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <BMP390_Get_SensorValues>:


_Bool BMP390_Get_SensorValues(BMP390_HandleTypeDef *BMP390, float *BMP390_Press,
							 float *BMP390_Temp,float *BMP390_VertAlt,
							 float *BMP390_VertAcc, float *BMP390_VertSpd,
							 float *BMP390_gForce){
 8001306:	b580      	push	{r7, lr}
 8001308:	b08c      	sub	sp, #48	; 0x30
 800130a:	af04      	add	r7, sp, #16
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]

	uint32_t rawPress;
	uint32_t rawTemp;
	uint8_t MSB_LSB_XLSB_PT[6] = {0};
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	2300      	movs	r3, #0
 800131a:	82bb      	strh	r3, [r7, #20]

	HAL_I2C_Mem_Read(BMP390->i2c, BMP390->BMP390_I2C_ADDRESS, BMP390_StartAdd_MSB_LSB_XLSB_PT, 1, &MSB_LSB_XLSB_PT[6], 6, 10000);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	69d8      	ldr	r0, [r3, #28]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8b19      	ldrh	r1, [r3, #24]
 8001324:	f242 7310 	movw	r3, #10000	; 0x2710
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2306      	movs	r3, #6
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	3306      	adds	r3, #6
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2204      	movs	r2, #4
 800133a:	f001 f823 	bl	8002384 <HAL_I2C_Mem_Read>

	rawPress = ((MSB_LSB_XLSB_PT[2])<<16)  | ((MSB_LSB_XLSB_PT[1])<<8) | ((MSB_LSB_XLSB_PT[0])<<0);
 800133e:	7cbb      	ldrb	r3, [r7, #18]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	7c7b      	ldrb	r3, [r7, #17]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4313      	orrs	r3, r2
 8001348:	7c3a      	ldrb	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61fb      	str	r3, [r7, #28]
	rawTemp  = ((MSB_LSB_XLSB_PT[5])<<16)  | ((MSB_LSB_XLSB_PT[4])<<8) | ((MSB_LSB_XLSB_PT[3])<<0);
 800134e:	7d7b      	ldrb	r3, [r7, #21]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	7d3b      	ldrb	r3, [r7, #20]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	4313      	orrs	r3, r2
 8001358:	7cfa      	ldrb	r2, [r7, #19]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]


	*BMP390_Temp  	= BMP390_Calc_PrcsdTemp(BMP390,rawTemp);
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f810 	bl	8001386 <BMP390_Calc_PrcsdTemp>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
	*BMP390_Press 	= BMP390_Calc_PrcsdPress(BMP390,rawPress,BMP390_Temp);
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	69f9      	ldr	r1, [r7, #28]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f837 	bl	80013e4 <BMP390_Calc_PrcsdPress>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	601a      	str	r2, [r3, #0]
	//*BMP390_VertAcc = BMP390_Calc_VertAcc();
	//*BMP390_VertSpd = BMP390_Calc_VertSpd();
	//*BMP390_gForce	= BMP390_Calc_gForce();
	//*BMP390_VertAlt = BMP390_Calc_VertAlt();

return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <BMP390_Calc_PrcsdTemp>:


float BMP390_Calc_PrcsdTemp(BMP390_HandleTypeDef *BMP390, uint32_t rawTemp){
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]

	float partial_data1;
	float partial_data2;

	partial_data1 = (float)(rawTemp - BMP390->Prcsd_NVM.T1);
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f7ff fc63 	bl	8000c5c <__aeabi_ui2f>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f7ff fbaa 	bl	8000af8 <__aeabi_fsub>
 80013a4:	4603      	mov	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]
	partial_data2 = (float)(partial_data1 * BMP390->Prcsd_NVM.T2);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	4619      	mov	r1, r3
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7fe fecc 	bl	800014c <__aeabi_fmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60bb      	str	r3, [r7, #8]

	return (partial_data2 + (partial_data1 * partial_data1) * BMP390->Prcsd_NVM.T3);
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7fe fec6 	bl	800014c <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7fe febe 	bl	800014c <__aeabi_fmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fb91 	bl	8000afc <__addsf3>
 80013da:	4603      	mov	r3, r0

}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <BMP390_Calc_PrcsdPress>:

float BMP390_Calc_PrcsdPress(BMP390_HandleTypeDef *BMP390, uint32_t rawPress, float *BMP390_Temp){
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	float partial_out1;
	float partial_out2;



	partial_data1 = BMP390->Prcsd_NVM.P6 * (*(BMP390_Temp));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7fe fea6 	bl	800014c <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P7 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7fe fe9a 	bl	800014c <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	4619      	mov	r1, r3
 800141c:	4620      	mov	r0, r4
 800141e:	f7fe fe95 	bl	800014c <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P8 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7fe fe89 	bl	800014c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f7fe fe81 	bl	800014c <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	4620      	mov	r0, r4
 8001450:	f7fe fe7c 	bl	800014c <__aeabi_fmul>
 8001454:	4603      	mov	r3, r0
 8001456:	61fb      	str	r3, [r7, #28]
	partial_out1 =  BMP390->Prcsd_NVM.P5 + partial_data1 + partial_data2 + partial_data3;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb4c 	bl	8000afc <__addsf3>
 8001464:	4603      	mov	r3, r0
 8001466:	6a39      	ldr	r1, [r7, #32]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb47 	bl	8000afc <__addsf3>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	69f8      	ldr	r0, [r7, #28]
 8001474:	f7ff fb42 	bl	8000afc <__addsf3>
 8001478:	4603      	mov	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
	partial_data1 = BMP390->Prcsd_NVM.P2 * (*(BMP390_Temp));
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f7fe fe60 	bl	800014c <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P3 * ((*(BMP390_Temp)) * (*(BMP390_Temp)));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7fe fe54 	bl	800014c <__aeabi_fmul>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7fe fe4f 	bl	800014c <__aeabi_fmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	623b      	str	r3, [r7, #32]
	partial_data3 = BMP390->Prcsd_NVM.P4 * ((*(BMP390_Temp)) * (*(BMP390_Temp)) * (*(BMP390_Temp)));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7fe fe43 	bl	800014c <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4610      	mov	r0, r2
 80014d2:	f7fe fe3b 	bl	800014c <__aeabi_fmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4619      	mov	r1, r3
 80014da:	4620      	mov	r0, r4
 80014dc:	f7fe fe36 	bl	800014c <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)rawPress * (BMP390->Prcsd_NVM.P1 + partial_data1 + partial_data2 + partial_data3);
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f7ff fbb9 	bl	8000c5c <__aeabi_ui2f>
 80014ea:	4604      	mov	r4, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fb02 	bl	8000afc <__addsf3>
 80014f8:	4603      	mov	r3, r0
 80014fa:	6a39      	ldr	r1, [r7, #32]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fafd 	bl	8000afc <__addsf3>
 8001502:	4603      	mov	r3, r0
 8001504:	69f9      	ldr	r1, [r7, #28]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff faf8 	bl	8000afc <__addsf3>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4620      	mov	r0, r4
 8001512:	f7fe fe1b 	bl	800014c <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	617b      	str	r3, [r7, #20]
	partial_data1 = (float)rawPress * (float)rawPress;
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	f7ff fb9e 	bl	8000c5c <__aeabi_ui2f>
 8001520:	4604      	mov	r4, r0
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f7ff fb9a 	bl	8000c5c <__aeabi_ui2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4620      	mov	r0, r4
 800152e:	f7fe fe0d 	bl	800014c <__aeabi_fmul>
 8001532:	4603      	mov	r3, r0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
	partial_data2 = BMP390->Prcsd_NVM.P9 + BMP390->Prcsd_NVM.P10 * (*(BMP390_Temp));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	4610      	mov	r0, r2
 8001546:	f7fe fe01 	bl	800014c <__aeabi_fmul>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fad4 	bl	8000afc <__addsf3>
 8001554:	4603      	mov	r3, r0
 8001556:	623b      	str	r3, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800155c:	f7fe fdf6 	bl	800014c <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	61fb      	str	r3, [r7, #28]
	partial_data4 = partial_data3 + ((float)rawPress * (float)rawPress * (float)rawPress) * BMP390->Prcsd_NVM.P11;
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7ff fb79 	bl	8000c5c <__aeabi_ui2f>
 800156a:	4604      	mov	r4, r0
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fb75 	bl	8000c5c <__aeabi_ui2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4619      	mov	r1, r3
 8001576:	4620      	mov	r0, r4
 8001578:	f7fe fde8 	bl	800014c <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	461c      	mov	r4, r3
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f7ff fb6b 	bl	8000c5c <__aeabi_ui2f>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	4620      	mov	r0, r4
 800158c:	f7fe fdde 	bl	800014c <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7fe fdd6 	bl	800014c <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	69f8      	ldr	r0, [r7, #28]
 80015a6:	f7ff faa9 	bl	8000afc <__addsf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]

	return partial_out1 + partial_out2 + partial_data4;
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	69b8      	ldr	r0, [r7, #24]
 80015b2:	f7ff faa3 	bl	8000afc <__addsf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fa9e 	bl	8000afc <__addsf3>
 80015c0:	4603      	mov	r3, r0


}
 80015c2:	4618      	mov	r0, r3
 80015c4:	372c      	adds	r7, #44	; 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
	...

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d2:	f000 f9bf 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d6:	f000 f82f 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015da:	f000 f897 	bl	800170c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015de:	f000 f867 	bl	80016b0 <MX_I2C1_Init>

  /**
   * Ref_Alt_Sel is a selection; false value : it sets the reference altitude to the current location (0 meters)
   * 							 true value  : it sets the reference altitude to sea level
   */
  BMP390.BMP390_I2C_ADDRESS = BMP390_I2C_ADDRESS_L;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <main+0x4c>)
 80015e4:	2276      	movs	r2, #118	; 0x76
 80015e6:	831a      	strh	r2, [r3, #24]
  BMP390.i2c = &hi2c1;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <main+0x4c>)
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <main+0x50>)
 80015ec:	61da      	str	r2, [r3, #28]
  BMP390.Ref_Alt_Sel = false;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <main+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  BMP390_Init(&BMP390);
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <main+0x4c>)
 80015f8:	f7ff fb88 	bl	8000d0c <BMP390_Init>

  BMP390_Get_SensorValues(&BMP390, &BMP390_Press,
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <main+0x54>)
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <main+0x58>)
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <main+0x5c>)
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <main+0x60>)
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <main+0x64>)
 800160c:	4909      	ldr	r1, [pc, #36]	; (8001634 <main+0x68>)
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <main+0x4c>)
 8001610:	f7ff fe79 	bl	8001306 <BMP390_Get_SensorValues>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001614:	e7fe      	b.n	8001614 <main+0x48>
 8001616:	bf00      	nop
 8001618:	2000007c 	.word	0x2000007c
 800161c:	20000028 	.word	0x20000028
 8001620:	2000010c 	.word	0x2000010c
 8001624:	20000108 	.word	0x20000108
 8001628:	20000104 	.word	0x20000104
 800162c:	20000100 	.word	0x20000100
 8001630:	200000fc 	.word	0x200000fc
 8001634:	200000f8 	.word	0x200000f8

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b090      	sub	sp, #64	; 0x40
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2228      	movs	r2, #40	; 0x28
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f002 f9e2 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165e:	2301      	movs	r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001662:	2310      	movs	r3, #16
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fdd2 	bl	8003218 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800167a:	f000 f89f 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f840 	bl	800371c <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016a2:	f000 f88b 	bl	80017bc <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3740      	adds	r7, #64	; 0x40
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f000 fc0b 	bl	8001f08 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f860 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000028 	.word	0x20000028
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0xac>)
 8001788:	f000 fba6 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2302      	movs	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_GPIO_Init+0xac>)
 80017a6:	f000 fa1b 	bl	8001be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40011000 	.word	0x40011000

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_MspInit+0x5c>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_MspInit+0x5c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_MspInit+0x5c>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x5c>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_MspInit+0x5c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_MspInit+0x5c>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_MspInit+0x60>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_MspInit+0x60>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000

0800182c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <HAL_I2C_MspInit+0x74>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d125      	bne.n	8001898 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	2312      	movs	r3, #18
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	480b      	ldr	r0, [pc, #44]	; (80018a8 <HAL_I2C_MspInit+0x7c>)
 800187c:	f000 f9b0 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 8001886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800188a:	61d3      	str	r3, [r2, #28]
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_I2C_MspInit+0x78>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010c00 	.word	0x40010c00

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f875 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}

080018fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001908:	f7ff fff7 	bl	80018fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190e:	490c      	ldr	r1, [pc, #48]	; (8001940 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001924:	4c09      	ldr	r4, [pc, #36]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001932:	f002 f875 	bl	8003a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001936:	f7ff fe49 	bl	80015cc <main>
  bx lr
 800193a:	4770      	bx	lr
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001944:	08003ab4 	.word	0x08003ab4
  ldr r2, =_sbss
 8001948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800194c:	20000114 	.word	0x20000114

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x28>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f907 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff ff2a 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40022000 	.word	0x40022000

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f911 	bl	8001bc6 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f8e7 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x1c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_IncTick+0x20>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_IncTick+0x20>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000110 	.word	0x20000110

08001a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_GetTick+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000110 	.word	0x20000110

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff49 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff5e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffb0 	bl	8001b34 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e161      	b.n	8001eb8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8150 	bne.w	8001eb2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a97      	ldr	r2, [pc, #604]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d05e      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c1c:	4a95      	ldr	r2, [pc, #596]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d875      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c22:	4a95      	ldr	r2, [pc, #596]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d058      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c28:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d86f      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d052      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c34:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d869      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c3a:	4a91      	ldr	r2, [pc, #580]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d04c      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c40:	4a8f      	ldr	r2, [pc, #572]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d863      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c46:	4a8f      	ldr	r2, [pc, #572]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d046      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c4c:	4a8d      	ldr	r2, [pc, #564]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d85d      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d82a      	bhi.n	8001cac <HAL_GPIO_Init+0xcc>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d859      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <HAL_GPIO_Init+0x80>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001cc7 	.word	0x08001cc7
 8001c6c:	08001d09 	.word	0x08001d09
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d0f 	.word	0x08001d0f
 8001c78:	08001d0f 	.word	0x08001d0f
 8001c7c:	08001d0f 	.word	0x08001d0f
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d0f 	.word	0x08001d0f
 8001c88:	08001d0f 	.word	0x08001d0f
 8001c8c:	08001d0f 	.word	0x08001d0f
 8001c90:	08001d0f 	.word	0x08001d0f
 8001c94:	08001d0f 	.word	0x08001d0f
 8001c98:	08001d0f 	.word	0x08001d0f
 8001c9c:	08001d0f 	.word	0x08001d0f
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb2:	e02c      	b.n	8001d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e029      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e024      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e01f      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	330c      	adds	r3, #12
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e01a      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e013      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	611a      	str	r2, [r3, #16]
          break;
 8001cfa:	e009      	b.n	8001d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	615a      	str	r2, [r3, #20]
          break;
 8001d06:	e003      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          break;
 8001d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d801      	bhi.n	8001d1a <HAL_GPIO_Init+0x13a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_Init+0x13e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d802      	bhi.n	8001d2c <HAL_GPIO_Init+0x14c>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x152>
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3b08      	subs	r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	210f      	movs	r1, #15
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a9 	beq.w	8001eb2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d78:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x2b4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00d      	beq.n	8001dc0 <HAL_GPIO_Init+0x1e0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3c      	ldr	r2, [pc, #240]	; (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_GPIO_Init+0x1dc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_GPIO_Init+0x1d8>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x1e2>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x1e2>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x1e2>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	492b      	ldr	r1, [pc, #172]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	4921      	ldr	r1, [pc, #132]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	491d      	ldr	r1, [pc, #116]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4917      	ldr	r1, [pc, #92]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4913      	ldr	r1, [pc, #76]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01f      	beq.n	8001ea4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e01f      	b.n	8001eb2 <HAL_GPIO_Init+0x2d2>
 8001e72:	bf00      	nop
 8001e74:	10320000 	.word	0x10320000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10220000 	.word	0x10220000
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10110000 	.word	0x10110000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_GPIO_Init+0x2f4>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <HAL_GPIO_Init+0x2f4>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f47f ae96 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	372c      	adds	r7, #44	; 0x2c
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e12b      	b.n	8002172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fc7c 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f6c:	f001 fd1e 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8001f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a81      	ldr	r2, [pc, #516]	; (800217c <HAL_I2C_Init+0x274>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d807      	bhi.n	8001f8c <HAL_I2C_Init+0x84>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_I2C_Init+0x278>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e006      	b.n	8001f9a <HAL_I2C_Init+0x92>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a7d      	ldr	r2, [pc, #500]	; (8002184 <HAL_I2C_Init+0x27c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0e7      	b.n	8002172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a78      	ldr	r2, [pc, #480]	; (8002188 <HAL_I2C_Init+0x280>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a6a      	ldr	r2, [pc, #424]	; (800217c <HAL_I2C_Init+0x274>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d802      	bhi.n	8001fdc <HAL_I2C_Init+0xd4>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	e009      	b.n	8001ff0 <HAL_I2C_Init+0xe8>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	4a69      	ldr	r2, [pc, #420]	; (800218c <HAL_I2C_Init+0x284>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	3301      	adds	r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	495c      	ldr	r1, [pc, #368]	; (800217c <HAL_I2C_Init+0x274>)
 800200c:	428b      	cmp	r3, r1
 800200e:	d819      	bhi.n	8002044 <HAL_I2C_Init+0x13c>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e59      	subs	r1, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fbb1 f3f3 	udiv	r3, r1, r3
 800201e:	1c59      	adds	r1, r3, #1
 8002020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002024:	400b      	ands	r3, r1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_I2C_Init+0x138>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e59      	subs	r1, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fbb1 f3f3 	udiv	r3, r1, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203e:	e051      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 8002040:	2304      	movs	r3, #4
 8002042:	e04f      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_I2C_Init+0x168>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e012      	b.n	8002096 <HAL_I2C_Init+0x18e>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	0099      	lsls	r1, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Init+0x196>
 800209a:	2301      	movs	r3, #1
 800209c:	e022      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10e      	bne.n	80020c4 <HAL_I2C_Init+0x1bc>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e58      	subs	r0, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	440b      	add	r3, r1
 80020b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	6809      	ldr	r1, [r1, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6911      	ldr	r1, [r2, #16]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	000186a0 	.word	0x000186a0
 8002180:	001e847f 	.word	0x001e847f
 8002184:	003d08ff 	.word	0x003d08ff
 8002188:	431bde83 	.word	0x431bde83
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	4608      	mov	r0, r1
 800219a:	4611      	mov	r1, r2
 800219c:	461a      	mov	r2, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	817b      	strh	r3, [r7, #10]
 80021a2:	460b      	mov	r3, r1
 80021a4:	813b      	strh	r3, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021aa:	f7ff fc2b 	bl	8001a04 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	f040 80d9 	bne.w	8002370 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2319      	movs	r3, #25
 80021c4:	2201      	movs	r2, #1
 80021c6:	496d      	ldr	r1, [pc, #436]	; (800237c <HAL_I2C_Mem_Write+0x1ec>)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fdef 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cc      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Mem_Write+0x56>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e0c5      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d007      	beq.n	800220c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2221      	movs	r2, #33	; 0x21
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_I2C_Mem_Write+0x1f0>)
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800224e:	88f8      	ldrh	r0, [r7, #6]
 8002250:	893a      	ldrh	r2, [r7, #8]
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4603      	mov	r3, r0
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc26 	bl	8002ab0 <I2C_RequestMemoryWrite>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d052      	beq.n	8002310 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e081      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 feb4 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_I2C_Mem_Write+0x180>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1aa      	bne.n	800226e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fea7 	bl	8003070 <I2C_WaitOnBTFFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b04      	cmp	r3, #4
 800232e:	d107      	bne.n	8002340 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e016      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a2:	f7ff fb2f 	bl	8001a04 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	f040 8244 	bne.w	800283e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2319      	movs	r3, #25
 80023bc:	2201      	movs	r2, #1
 80023be:	4982      	ldr	r1, [pc, #520]	; (80025c8 <HAL_I2C_Mem_Read+0x244>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fcf3 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	e237      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Mem_Read+0x5a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e230      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2222      	movs	r2, #34	; 0x22
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a62      	ldr	r2, [pc, #392]	; (80025cc <HAL_I2C_Mem_Read+0x248>)
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002446:	88f8      	ldrh	r0, [r7, #6]
 8002448:	893a      	ldrh	r2, [r7, #8]
 800244a:	8979      	ldrh	r1, [r7, #10]
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	4603      	mov	r3, r0
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fbc0 	bl	8002bdc <I2C_RequestMemoryRead>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1ec      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d113      	bne.n	8002496 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e1c0      	b.n	8002818 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b01      	cmp	r3, #1
 800249c:	d11e      	bne.n	80024dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ae:	b672      	cpsid	i
}
 80024b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024d8:	b662      	cpsie	i
}
 80024da:	e035      	b.n	8002548 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d11e      	bne.n	8002522 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800251e:	b662      	cpsie	i
}
 8002520:	e012      	b.n	8002548 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002530:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002548:	e166      	b.n	8002818 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	2b03      	cmp	r3, #3
 8002550:	f200 811f 	bhi.w	8002792 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	2b01      	cmp	r3, #1
 800255a:	d123      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fdcd 	bl	8003100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e167      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025a2:	e139      	b.n	8002818 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d152      	bne.n	8002652 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	2200      	movs	r2, #0
 80025b4:	4906      	ldr	r1, [pc, #24]	; (80025d0 <HAL_I2C_Mem_Read+0x24c>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fbf8 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e13c      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000
 80025d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025d4:	b672      	cpsid	i
}
 80025d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800261a:	b662      	cpsie	i
}
 800261c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002650:	e0e2      	b.n	8002818 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2200      	movs	r2, #0
 800265a:	497b      	ldr	r1, [pc, #492]	; (8002848 <HAL_I2C_Mem_Read+0x4c4>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fba5 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0e9      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026b2:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_I2C_Mem_Read+0x4c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_I2C_Mem_Read+0x4cc>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a1a      	lsrs	r2, r3, #8
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d118      	bne.n	800270a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026fa:	b662      	cpsie	i
}
 80026fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e09a      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d1d9      	bne.n	80026cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800275a:	b662      	cpsie	i
}
 800275c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002790:	e042      	b.n	8002818 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fcb2 	bl	8003100 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e04c      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d118      	bne.n	8002818 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f47f ae94 	bne.w	800254a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00010004 	.word	0x00010004
 800284c:	20000000 	.word	0x20000000
 8002850:	14f8b589 	.word	0x14f8b589

08002854 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	460b      	mov	r3, r1
 8002862:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff f8ce 	bl	8001a04 <HAL_GetTick>
 8002868:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	f040 8111 	bne.w	8002a9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2319      	movs	r3, #25
 8002882:	2201      	movs	r2, #1
 8002884:	4988      	ldr	r1, [pc, #544]	; (8002aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa90 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e104      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_IsDeviceReady+0x50>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0fd      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d007      	beq.n	80028ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2224      	movs	r2, #36	; 0x24
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a70      	ldr	r2, [pc, #448]	; (8002aac <HAL_I2C_IsDeviceReady+0x258>)
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa4e 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002924:	d103      	bne.n	800292e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0b6      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002940:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002942:	f7ff f85f 	bl	8001a04 <HAL_GetTick>
 8002946:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002976:	e025      	b.n	80029c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002978:	f7ff f844 	bl	8001a04 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d302      	bcc.n	800298e <HAL_I2C_IsDeviceReady+0x13a>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	22a0      	movs	r2, #160	; 0xa0
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2ba0      	cmp	r3, #160	; 0xa0
 80029ce:	d005      	beq.n	80029dc <HAL_I2C_IsDeviceReady+0x188>
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_I2C_IsDeviceReady+0x188>
 80029d6:	7dbb      	ldrb	r3, [r7, #22]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0cd      	beq.n	8002978 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d129      	bne.n	8002a46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4921      	ldr	r1, [pc, #132]	; (8002aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f9c2 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e036      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e02c      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2319      	movs	r3, #25
 8002a66:	2201      	movs	r2, #1
 8002a68:	490f      	ldr	r1, [pc, #60]	; (8002aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f99e 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e012      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f4ff af32 	bcc.w	80028ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000

08002ab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f960 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b00:	d103      	bne.n	8002b0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e05f      	b.n	8002bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	492d      	ldr	r1, [pc, #180]	; (8002bd8 <I2C_RequestMemoryWrite+0x128>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f9bb 	bl	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e04c      	b.n	8002bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fa46 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e02b      	b.n	8002bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e021      	b.n	8002bcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa20 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e005      	b.n	8002bce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc2:	893b      	ldrh	r3, [r7, #8]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00010002 	.word	0x00010002

08002bdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8c2 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	d103      	bne.n	8002c46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0aa      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	4952      	ldr	r1, [pc, #328]	; (8002da8 <I2C_RequestMemoryRead+0x1cc>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f91d 	bl	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e097      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9a8 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d107      	bne.n	8002cae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e076      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	e021      	b.n	8002d08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc4:	893b      	ldrh	r3, [r7, #8]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f982 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e050      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0a:	6a39      	ldr	r1, [r7, #32]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f967 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e035      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f82b 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d103      	bne.n	8002d74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e013      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	6a3a      	ldr	r2, [r7, #32]
 8002d8c:	4906      	ldr	r1, [pc, #24]	; (8002da8 <I2C_RequestMemoryRead+0x1cc>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f886 	bl	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010002 	.word	0x00010002

08002dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbc:	e048      	b.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d044      	beq.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fe1d 	bl	8001a04 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d139      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	0c1b      	lsrs	r3, r3, #16
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10d      	bne.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	e00c      	b.n	8002e1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d116      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e023      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	e00c      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d093      	beq.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eae:	e071      	b.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebe:	d123      	bne.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e067      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d041      	beq.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe fd78 	bl	8001a04 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d136      	bne.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10c      	bne.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e00b      	b.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e021      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10c      	bne.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e00b      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f af6d 	bne.w	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fec:	e034      	b.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8e3 	bl	80031ba <I2C_IsAcknowledgeFailed>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e034      	b.n	8003068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d028      	beq.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe fcfd 	bl	8001a04 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11d      	bne.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d016      	beq.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e007      	b.n	8003068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d1c3      	bne.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800307c:	e034      	b.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f89b 	bl	80031ba <I2C_IsAcknowledgeFailed>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e034      	b.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d028      	beq.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fcb5 	bl	8001a04 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11d      	bne.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d016      	beq.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d1c3      	bne.n	800307e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800310c:	e049      	b.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b10      	cmp	r3, #16
 800311a:	d119      	bne.n	8003150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0210 	mvn.w	r2, #16
 8003124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e030      	b.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fe fc58 	bl	8001a04 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11d      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d016      	beq.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d1ae      	bne.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d11b      	bne.n	800320a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
	...

08003218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e272      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8087 	beq.w	8003346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003238:	4b92      	ldr	r3, [pc, #584]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b04      	cmp	r3, #4
 8003242:	d00c      	beq.n	800325e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003244:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d112      	bne.n	8003276 <HAL_RCC_OscConfig+0x5e>
 8003250:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d10b      	bne.n	8003276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325e:	4b89      	ldr	r3, [pc, #548]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06c      	beq.n	8003344 <HAL_RCC_OscConfig+0x12c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d168      	bne.n	8003344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e24c      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x76>
 8003280:	4b80      	ldr	r3, [pc, #512]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7f      	ldr	r2, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	e02e      	b.n	80032ec <HAL_RCC_OscConfig+0xd4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x98>
 8003296:	4b7b      	ldr	r3, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7a      	ldr	r2, [pc, #488]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b78      	ldr	r3, [pc, #480]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a77      	ldr	r2, [pc, #476]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xd4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0xbc>
 80032ba:	4b72      	ldr	r3, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a71      	ldr	r2, [pc, #452]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xd4>
 80032d4:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6a      	ldr	r2, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a67      	ldr	r2, [pc, #412]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb86 	bl	8001a04 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe fb82 	bl	8001a04 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e200      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xe4>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fb72 	bl	8001a04 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fb6e 	bl	8001a04 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1ec      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x10c>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d063      	beq.n	800341a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003352:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800335e:	4b49      	ldr	r3, [pc, #292]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d11c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x18c>
 800336a:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d116      	bne.n	80033a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x176>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1c0      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4939      	ldr	r1, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	e03a      	b.n	800341a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d020      	beq.n	80033ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe fb27 	bl	8001a04 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fb23 	bl	8001a04 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1a1      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4927      	ldr	r1, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fb06 	bl	8001a04 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fc:	f7fe fb02 	bl	8001a04 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e180      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03a      	beq.n	800349c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d019      	beq.n	8003462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7fe fae6 	bl	8001a04 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7fe fae2 	bl	8001a04 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e160      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCC_OscConfig+0x26c>)
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800345a:	2001      	movs	r0, #1
 800345c:	f000 faba 	bl	80039d4 <RCC_Delay>
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003468:	f7fe facc 	bl	8001a04 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346e:	e00f      	b.n	8003490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003470:	f7fe fac8 	bl	8001a04 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d908      	bls.n	8003490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e146      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	42420000 	.word	0x42420000
 800348c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	4b92      	ldr	r3, [pc, #584]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e9      	bne.n	8003470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a6 	beq.w	80035f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ae:	4b8b      	ldr	r3, [pc, #556]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4a87      	ldr	r2, [pc, #540]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c4:	61d3      	str	r3, [r2, #28]
 80034c6:	4b85      	ldr	r3, [pc, #532]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x4c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d118      	bne.n	8003514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e2:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x4c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x4c8>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fa89 	bl	8001a04 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe fa85 	bl	8001a04 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	; 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e103      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x4c8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x312>
 800351c:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a6e      	ldr	r2, [pc, #440]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	e02d      	b.n	8003586 <HAL_RCC_OscConfig+0x36e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x334>
 8003532:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a66      	ldr	r2, [pc, #408]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	e01c      	b.n	8003586 <HAL_RCC_OscConfig+0x36e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b05      	cmp	r3, #5
 8003552:	d10c      	bne.n	800356e <HAL_RCC_OscConfig+0x356>
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4a60      	ldr	r2, [pc, #384]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	6213      	str	r3, [r2, #32]
 8003560:	4b5e      	ldr	r3, [pc, #376]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a5d      	ldr	r2, [pc, #372]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	e00b      	b.n	8003586 <HAL_RCC_OscConfig+0x36e>
 800356e:	4b5b      	ldr	r3, [pc, #364]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4a5a      	ldr	r2, [pc, #360]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6213      	str	r3, [r2, #32]
 800357a:	4b58      	ldr	r3, [pc, #352]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a57      	ldr	r2, [pc, #348]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d015      	beq.n	80035ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7fe fa39 	bl	8001a04 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe fa35 	bl	8001a04 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0b1      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ee      	beq.n	8003596 <HAL_RCC_OscConfig+0x37e>
 80035b8:	e014      	b.n	80035e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fa23 	bl	8001a04 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fa1f 	bl	8001a04 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e09b      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ee      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8087 	beq.w	800370e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d061      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d146      	bne.n	80036a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003614:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_RCC_OscConfig+0x4cc>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe f9f3 	bl	8001a04 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe f9ef 	bl	8001a04 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e06d      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d108      	bne.n	800365c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4921      	ldr	r1, [pc, #132]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a19      	ldr	r1, [r3, #32]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	430b      	orrs	r3, r1
 800366e:	491b      	ldr	r1, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x4cc>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fe f9c3 	bl	8001a04 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7fe f9bf 	bl	8001a04 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e03d      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x46a>
 80036a0:	e035      	b.n	800370e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe f9ac 	bl	8001a04 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe f9a8 	bl	8001a04 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e026      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x498>
 80036ce:	e01e      	b.n	800370e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e019      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x500>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0d0      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d910      	bls.n	8003760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4965      	ldr	r1, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800379a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d040      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d115      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e073      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06b      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4936      	ldr	r1, [pc, #216]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7fe f8fa 	bl	8001a04 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fe f8f6 	bl	8001a04 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e053      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d210      	bcs.n	800386c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	4922      	ldr	r1, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1cc>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1d0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe f858 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08003a80 	.word	0x08003a80
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_RCC_GetSysClockFreq+0x94>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b04      	cmp	r3, #4
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x30>
 800391a:	2b08      	cmp	r3, #8
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x36>
 800391e:	e027      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	613b      	str	r3, [r7, #16]
      break;
 8003924:	e027      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	0c9b      	lsrs	r3, r3, #18
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
 8003932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_GetSysClockFreq+0x94>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0c5b      	lsrs	r3, r3, #17
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <HAL_RCC_GetSysClockFreq+0x98>)
 8003952:	fb03 f202 	mul.w	r2, r3, r2
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e004      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	613b      	str	r3, [r7, #16]
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetSysClockFreq+0x98>)
 8003972:	613b      	str	r3, [r7, #16]
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	693b      	ldr	r3, [r7, #16]
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	007a1200 	.word	0x007a1200
 800398c:	08003a98 	.word	0x08003a98
 8003990:	08003aa8 	.word	0x08003aa8
 8003994:	003d0900 	.word	0x003d0900

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000000 	.word	0x20000000

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff2 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08003a90 	.word	0x08003a90

080039d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCC_Delay+0x34>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <RCC_Delay+0x38>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039f0:	bf00      	nop
  }
  while (Delay --);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	60fa      	str	r2, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f9      	bne.n	80039f0 <RCC_Delay+0x1c>
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <memset>:
 8003a10:	4603      	mov	r3, r0
 8003a12:	4402      	add	r2, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <__libc_init_array>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	2600      	movs	r6, #0
 8003a24:	4d0c      	ldr	r5, [pc, #48]	; (8003a58 <__libc_init_array+0x38>)
 8003a26:	4c0d      	ldr	r4, [pc, #52]	; (8003a5c <__libc_init_array+0x3c>)
 8003a28:	1b64      	subs	r4, r4, r5
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	d109      	bne.n	8003a44 <__libc_init_array+0x24>
 8003a30:	f000 f81a 	bl	8003a68 <_init>
 8003a34:	2600      	movs	r6, #0
 8003a36:	4d0a      	ldr	r5, [pc, #40]	; (8003a60 <__libc_init_array+0x40>)
 8003a38:	4c0a      	ldr	r4, [pc, #40]	; (8003a64 <__libc_init_array+0x44>)
 8003a3a:	1b64      	subs	r4, r4, r5
 8003a3c:	10a4      	asrs	r4, r4, #2
 8003a3e:	42a6      	cmp	r6, r4
 8003a40:	d105      	bne.n	8003a4e <__libc_init_array+0x2e>
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a48:	4798      	blx	r3
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7ee      	b.n	8003a2c <__libc_init_array+0xc>
 8003a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a52:	4798      	blx	r3
 8003a54:	3601      	adds	r6, #1
 8003a56:	e7f2      	b.n	8003a3e <__libc_init_array+0x1e>
 8003a58:	08003aac 	.word	0x08003aac
 8003a5c:	08003aac 	.word	0x08003aac
 8003a60:	08003aac 	.word	0x08003aac
 8003a64:	08003ab0 	.word	0x08003ab0

08003a68 <_init>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr

08003a74 <_fini>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr
